---
// Sidebar.astro
import "../style/sidebar.css";

// Obtenemos la ruta actual desde Astro
const currentPath: string = Astro.url.pathname;

// Definimos la interfaz y estructura del menú
interface MenuItem {
  label: string;
  icon: string;
  href: string;
  subitems?: MenuItem[];
}

const sidebarMenu: MenuItem[] = [
  {
    label: "Página Principal",
    icon: "bx bxs-home",
    href: "/Admin-Control/Admin-home",
  },
  {
    label: "Estudiantes",
    icon: "bx bx-user",
    href: "/Admin-Control/Estudiantes",
  },
  {
    label: "Profesores",
    icon: "bx bx-user",
    href: "/Admin-Control/Profesores",
  },
  
  {
        label: "Cursos",
        icon: "bx bxs-folder",
        href: "/Admin-Control/Cursos",
      },
  {
        label: "Materias",
        icon: "bx bxs-book",
        href: "/Admin-Control/Materias",
      },
  {
    label: "Periodo",
    icon: "bx bx-calendar",
    href: "/Admin-Control/Periodo",
  },
  {
    label: "Seccion",
    icon: "bx bx-calendar",
    href: "/Admin-Control/Seccion",
  },
  {
    label: "Historial",
    icon: "bx bx-history",
    href: "/Admin-Control/Historial",
  },
  {
    label: "Inactivos",
    icon: "bx bx-trash",
    href: "/Admin-Control/Inactivos",
  },
];

// Función simple para determinar si un enlace debe estar "activo"
function isActive(link: string): boolean {
  return currentPath === link;
}
---

<section class="bar-home-content">
  <div class="section-bar-area-content">
    <div class="section-bar-menu">
      <div class="btn-buttuon-agreagar">
      </div>

      <div class="list-bar">
        <ul>
          {
            /*
            Renderizamos los tres primeros elementos en la primera lista.
            Se aplica la clase "active" si el href coincide con currentPath o si
            alguno de sus subitems es activo.
          */
          }
          {
            sidebarMenu.slice(0, 3).map((item) => {
              const itemActive =
                isActive(item.href) ||
                (item.subitems &&
                  item.subitems.some((sub) => isActive(sub.href)));
              return (
                <li
                  class={
                    item.subitems
                      ? `list-item list-item__sub ${itemActive ? "active" : ""}`
                      : `list-item ${itemActive ? "active" : ""}`
                  }
                >
                  <a href={item.href}>
                    <i class={item.icon} />
                    <span>{item.label}</span>
                  </a>
                  {item.subitems && (
                    <ul class="sublist">
                      {item.subitems.map((sub) => (
                        <li
                          class={`sublist-item ${isActive(sub.href) ? "active" : ""}`}
                        >
                          <a href={sub.href} tabindex="0">
                            <i class={sub.icon} />
                            <span>{sub.label}</span>
                          </a>
                        </li>
                      ))}
                    </ul>
                  )}
                </li>
              );
            })
          }
        </ul>
        <ul>
          {
            /*
            Renderizamos los elementos restantes en la segunda lista.
          */
          }
          {
            sidebarMenu.slice(3).map((item) => {
              const itemActive =
                isActive(item.href) ||
                (item.subitems &&
                  item.subitems.some((sub) => isActive(sub.href)));
              return (
                <li
                  class={
                    item.subitems
                      ? `list-item list-item__sub ${itemActive ? "active" : ""}`
                      : `list-item ${itemActive ? "active" : ""}`
                  }
                >
                  <a href={item.href}>
                    <i class={item.icon} />
                    <span>{item.label}</span>
                  </a>
                  {item.subitems && (
                    <ul class="sublist">
                      {item.subitems.map((sub) => (
                        <li
                          class={`sublist-item ${isActive(sub.href) ? "active" : ""}`}
                        >
                          <a href={sub.href} tabindex="0">
                            <i class={sub.icon} />
                            <span>{sub.label}</span>
                          </a>
                        </li>
                      ))}
                    </ul>
                  )}
                </li>
              );
            })
          }
        </ul>
      </div>
    </div>
  </div>
  <button class="close-sidebar" id="minimizeSidebarBtn">
    Minimizar<i class="bx bx-left-arrow-circle"></i>
  </button>
</section>

<script>
if (typeof window !== 'undefined') {
  document.addEventListener('DOMContentLoaded', function () {
    const btn = document.getElementById('minimizeSidebarBtn');
    const sidebar = document.querySelector('.bar-home-content');
    // Buscar el grid-area más cercano
    const gridArea = sidebar?.closest('.Layout-grid-area');
    if (btn && sidebar && gridArea) {
      btn.addEventListener('click', function () {
        sidebar.classList.toggle('minimized');
        gridArea.classList.toggle('sidebar-minimized', sidebar.classList.contains('minimized'));
        // Guardar estado en localStorage para persistencia
        if (sidebar.classList.contains('minimized')) {
          localStorage.setItem('sidebarMinimized', 'true');
        } else {
          localStorage.removeItem('sidebarMinimized');
        }
      });
      // Restaurar estado al recargar
      if (localStorage.getItem('sidebarMinimized') === 'true') {
        sidebar.classList.add('minimized');
        gridArea.classList.add('sidebar-minimized');
      }
    }
  });
}
</script>
