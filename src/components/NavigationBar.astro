---
// Importa tus estilos CSS
import "../style/NavigationBar.css"; // Este archivo CSS ahora incluye los estilos para los modales y offcanvas.
// Si tu logo está en la carpeta 'public' o 'assets', la ruta es correcta.
---

<nav class="bar-search">
  <div class="bar-content">
    <!-- Logo del Sistema Escolar -->
    <div class="bar-search__logo">
      <img src="/public/SVG/Logo-1.svg" alt="Logo del Sistema Escolar" />
    </div>

    <!-- Barra de búsqueda -->
    <div class="search" id="search">
      <ul id="search-results" class="search-results">
        <li class="search-result-item">
          <i class="bx bx-search"></i>Gestión de Usuarios
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Control de Notas
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Reportes
        </li>
        <li class="search-result-item">
          <i class="bx bx-search"></i>Configuración
        </li>
        <li class="search-result-item"><i class="bx bx-search"></i>Ayuda</li>
      </ul>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-search"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0"></path>
          <path d="M21 21l-6 -6"></path>
        </svg>
      </button>
    </div>

    <!-- Contenedor de iconos de navegación (campana, usuario, ajustes) -->
    <div class="icons-nav">
      <div class="icons-content">
        <!-- Campana de notificaciones con offcanvas -->
        <div class="notification-container">
          <button
            class="bar-icons btn-icon"
            type="button"
            data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasNotifications"
            aria-controls="offcanvasNotifications"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-bell"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path
                d="M10 5a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"
              ></path>
              <path d="M9 17v1a3 3 0 0 0 6 0v-1"></path>
            </svg>
            <span class="notification"></span>
          </button>

          <!-- Offcanvas de notificaciones -->
          <div
            class="offcanvas offcanvas-start"
            data-bs-scroll="true"
            data-bs-backdrop="false"
            tabindex="-1"
            id="offcanvasNotifications"
            aria-labelledby="offcanvasNotificationsLabel"
          >
            <div class="offcanvas-header">
              <h5 class="offcanvas-title" id="offcanvasNotificationsLabel">
                Notificaciones
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="offcanvas"
                data-bs-backdrop="false"
                aria-label="Close"
              >
                <i class="bx bx-chevrons-left"></i>
              </button>
            </div>
            <div class="noticatacion-card">
              <!-- Aquí se inyectan dinámicamente las notificaciones -->
            </div>
            <hr />
            <button class="btn-view-all">Ver todas las notificaciones</button>
          </div>
        </div>
      </div>

      <!-- Imagen de perfil de usuario con offcanvas -->
      <img
        class="Perfil-icons"
        src="/public/img/foto.jpg"
        alt="Imagen de perfil de usuario"
        data-bs-toggle="offcanvas"
        data-bs-target="#offcanvasWithBothOptions"
        aria-controls="offcanvasWithBothOptions"
      />

      <!-- Offcanvas de perfil de usuario -->
      <div
        class="offcanvas offcanvas-start"
        data-bs-scroll="true"
        data-bs-backdrop="false"
        tabindex="-1"
        id="offcanvasWithBothOptions"
        aria-labelledby="offcanvasWithBothOptionsLabel"
      >
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">
            Perfil
          </h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="offcanvas"
            aria-label="Close"
          >
            <i class="bx bx-chevrons-left"></i>
          </button>
        </div>
        <div class="offcanvas-body-profile">
          <div class="img-perfil-contetner">
            <img
              class="img-perfil"
              src="/public/img/foto.jpg"
              alt="Imagen de perfil de usuario"
            />
            <i class="bx bx-pencil"></i>
          </div>
          <div class="info-person-perfil">
            <h5 id="nombreUsuario" class="title-perfil">Cargando...</h5>
            <p id="emailUsuario" class="email-person">Cargando...</p>
            <span id="rolUsuario" class="type-user">Cargando...</span>
          </div>
          <hr />
          <div class="edit-close-perfil">
            <button class="btn-edit-perfil" id="editProfileNavButton">
              <i class="bx bx-pencil"></i> Editar
            </button>
            <button class="btn-close-perfil" id="logoutButton">
              <i class="bx bx-log-out"></i> Cerrar Sesión
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Modal de asignación (modalAsignarUsuario) -->
<div class="modal fade" id="modalAsignarUsuario" tabindex="-1"
     aria-labelledby="modalAsignarUsuarioLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <!-- Añadir estilo para scroll al modal-body -->
      <div class="modal-body" style="max-height: 80vh; overflow-y: auto;">
        <button type="button" class="btn-close"
                data-bs-dismiss="modal" aria-label="Cerrar"></button>
        <!-- Logo GLLR -->
        <img class="logo-login" src="/public/SVG/Logo-1.svg" alt="GLLR Logo">
        <h5 class="modal-title" id="modalAsignarUsuarioLabel">
          Completar registro de usuario
        </h5>
        <p class="login-modal-p">Asigna el rol y los detalles para este nuevo usuario.</p>

        <form id="formAsignacionUsuario">
          <input type="hidden" id="inputIdNotificacion" name="id_notificacion" />
          <input type="hidden" id="inputIdUsuario" name="id_usuario" />
          <div class="mb-3">
            <label class="form-label section-title">Usuario:</label>
            <p id="infoUsuario" class="fw-bold"></p>
          </div>
          <div class="row g-3">
            <div class="col-md-4">
              <label for="rolSelect" class="form-label">Rol <span class="campo-obligatorio">*</span></label>
              <select id="rolSelect" name="rol" class="form-select" required>
                <option value="" disabled selected>Selecciona un rol</option>
                <option value="profesor">Profesor</option>
                <option value="estudiante">Estudiante</option>
                <option value="admin">Administrador</option>
              </select>
            </div>
            
            <!-- Contenedor para Secciones, Cursos, Materias y Periodo - Se ocultará/mostrará -->
            <!-- Cada div individual también tendrá una clase para control granular -->
            <div class="col-md-4 assign-field-group" id="seccionesField">
              <label for="seccionesSelect" class="form-label">Secciones <span class="campo-obligatorio">*</span></label>
              <select id="seccionesSelect" name="secciones" class="form-select" required>
                <option value="" disabled>Seleccione una sección</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
            
            <div class="col-md-4 assign-field-group" id="cursosField">
              <label for="cursosSelect" class="form-label">Cursos <span class="campo-obligatorio">*</span></label>
              <select id="cursosSelect" name="cursos" class="form-select" required>
                <option value="" disabled>Seleccione un curso</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>

            <!-- Nuevo campo para Periodo -->
            <div class="col-md-4 assign-field-group" id="periodosField">
              <label for="periodoSelect" class="form-label">Período <span class="campo-obligatorio">*</span></label>
              <select id="periodoSelect" name="periodos" class="form-select" required>
                <option value="" disabled selected>Seleccione un período</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>

            <div class="col-12 assign-field-group" id="materiasField">
              <label for="materiasSelect" class="form-label">Materias <span class="campo-obligatorio">*</span></label>
              <select id="materiasSelect" name="materias" class="form-select" required>
                <option value="" disabled>Seleccione una materia</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary-custom"
                data-bs-dismiss="modal">Cancelar</button>
        <button type="button" id="btnGuardarAsignacion"
                class="btn btn-primary-custom">Guardar y procesar</button>
      </div>
    </div>
  </div>
</div>

<!-- Tus Toasts existentes -->
<!-- Toast “Listo” (confirmación de éxito) -->
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="toastConfirmacion"
       class="toast align-items-center text-white bg-success border-0"
       role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body">
        ¡Listo! El usuario ha sido procesado.
      </div>
      <button type="button"
              class="btn-close btn-close-white me-2 m-auto"
              data-bs-dismiss="toast" aria-label="Cerrar"></button>
    </div>
  </div>
</div>

<!-- Toast de Error (para errores de logout u otros) -->
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="toastError"
       class="toast align-items-center text-white bg-danger border-0"
       role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body" id="toastErrorBody">
        Hubo un error. Por favor, inténtalo de nuevo.
      </div>
      <button type="button"
              class="btn-close btn-close-white me-2 m-auto"
              data-bs-dismiss="toast" aria-label="Cerrar"></button>
    </div>
  </div>
</div>


<script type="module">
  // Importa Bootstrap Bundle con Popper para que los offcanvas y modales funcionen
  import 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js';

  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM completamente cargado. Inicializando funciones de navegación.');
    cargarUsuarioLogueado();
    cargarNotificaciones();
    configurarLogout();
    configurarAsignacion(); // Esta función ahora inicializa los listeners para la visibilidad
    configurarOffcanvasPerfil(); // Nueva función para manejar el offcanvas del perfil
    const editProfileNavButton = document.getElementById('editProfileNavButton');
    if (editProfileNavButton) {
      editProfileNavButton.addEventListener('click', () => {
        // Redirige a la página de perfil al hacer clic en el botón
        window.location.href = '/Admin-Control/Editar-perfil'; 
      });
    }
  });

  // Función para mostrar un toast de error
  function mostrarToastError(message = 'Ocurrió un error inesperado.') {
    const toastErrorEl = document.getElementById('toastError');
    const toastErrorBody = document.getElementById('toastErrorBody');
    if (toastErrorBody) {
      toastErrorBody.textContent = message;
    }
    if (toastErrorEl) {
      const toast = new bootstrap.Toast(toastErrorEl);
      toast.show();
    } else {
      console.error("No se encontró el elemento 'toastError' para mostrar el mensaje:", message);
    }
  }


  // 1) Carga datos del usuario logueado en el offcanvas de perfil
  async function cargarUsuarioLogueado() {
    try {
      const res = await fetch('http://localhost:3001/usuario', {
        method: 'GET',
        credentials: 'include' // Incluye cookies de sesión
      });
      const data = await res.json();

      if (!res.ok || !data.id) {
        // Si la respuesta no es OK o no hay ID de usuario, registra un error y no actualiza la UI
        console.warn('No se pudo obtener datos del usuario logueado o el usuario no está autenticado.');
        // Puedes optar por dejar los textos en "Cargando..." o poner "No disponible"
        return;
      }

      // Actualiza los datos en la interfaz del perfil
      document.getElementById('nombreUsuario').textContent = `${data.primer_nombre} ${data.primer_apellido}`;
      document.getElementById('emailUsuario').textContent = data.correo;
      document.getElementById('rolUsuario').textContent = data.rol;
    } catch (error) {
      console.error('❌ Error obteniendo datos del usuario:', error);
      // No mostrar toast de error aquí, ya que es una carga inicial y podría ser normal si no hay sesión
    }
  }

  // 2) Carga notificaciones pendientes y las inyecta en el offcanvas
  async function cargarNotificaciones() {
    const btnBell = document.querySelector('.notification-container button');
    const dot = btnBell.querySelector('.notification');
    const container = document.querySelector('.noticatacion-card');
    container.innerHTML = ''; // Limpia las notificaciones anteriores

    try {
      const resp = await fetch('http://localhost:3001/api/notificaciones', {
        credentials: 'include'
      });
      const { notificaciones } = await resp.json();

      if (notificaciones.length > 0) {
        dot.style.display = 'block'; // Muestra el punto si hay notificaciones
      } else {
        dot.style.display = 'none'; // Oculta el punto si no hay notificaciones
        container.innerHTML = `<p class="text-center text-muted p-4">Sin notificaciones pendientes</p>`;
        return;
      }

      // Añade las notificaciones dinámicamente
      notificaciones.forEach(n => {
        const card = document.createElement('div');
        card.className = 'offcanvas-body notificacion-item'; // Clase para aplicar estilos
        card.dataset.notificacionId = n.id_notificacion;
        card.dataset.usuarioId = n.id_usuario;
        card.innerHTML = `
          <div class="notification-content">
            <i class="bx bx-user-circle"></i>
          </div>
          <div class="notification-text">
            <h6 class="name-user-notifi">
              ${n.primer_nombre} ${n.primer_apellido} <span>C.I: ${n.cedula}</span>
            </h6>
            <p class="message-user-notifi">${n.mensaje}</p>
          </div>`;
        // Abre el modal de asignación al hacer clic en la tarjeta de notificación
        card.addEventListener('click', () => abrirModalAsignacion(n));
        container.appendChild(card);
      });
    } catch (error) {
      console.error('Error cargando notificaciones:', error);
      container.innerHTML = `<p class="text-center text-danger p-4">Error al cargar notificaciones.</p>`;
    }
  }

  // 3) Abrir modal y poblar selects (para asignación de usuario)
  async function abrirModalAsignacion({ id_notificacion, id_usuario, primer_nombre, primer_apellido, cedula }) {
    // Rellena los campos ocultos y la información del usuario en el modal
    document.getElementById('inputIdNotificacion').value = id_notificacion;
    document.getElementById('inputIdUsuario').value = id_usuario;
    document.getElementById('infoUsuario').textContent = `${primer_nombre} ${primer_apellido} — C.I: ${cedula}`;

    // Restablecer los selects y campos al estado inicial (para reabrir el modal)
    document.getElementById('formAsignacionUsuario').reset();
    
    // Ocultar los campos adicionales por defecto al abrir el modal
    const assignFields = document.querySelectorAll('.assign-field-group');
    assignFields.forEach(field => field.classList.add('d-none')); // d-none de Bootstrap para ocultar
    document.getElementById('seccionesSelect').removeAttribute('required');
    document.getElementById('cursosSelect').removeAttribute('required');
    document.getElementById('materiasSelect').removeAttribute('required');
    document.getElementById('periodoSelect').removeAttribute('required'); // Nuevo

    // Carga los selects de secciones, cursos y periodos
    await cargarSelect('/api/secciones', 'seccionesSelect');
    await cargarSelect('/api/cursos', 'cursosSelect');
    await cargarSelect('/api/periodos', 'periodoSelect'); // Nuevo: Cargar periodos

    // Limpia el select de materias al abrir el modal
    document.getElementById('materiasSelect').innerHTML = '<option value="" disabled selected>Seleccione una materia</option>';

    // Configura el evento change para el select de cursos para cargar materias
    document.getElementById('cursosSelect').onchange = async e => {
      // Si el select es multiple, e.target.selectedOptions es una HTMLCollection.
      // Si es single select, solo se tomará el primer valor.
      const selectedCourseIds = Array.from(e.target.selectedOptions).map(o => o.value).filter(Boolean); // Filtrar vacíos
      
      const materiasSelect = document.getElementById('materiasSelect');
      materiasSelect.innerHTML = '<option value="" disabled selected>Seleccione una materia</option>'; // Limpiar antes de cargar

      if (selectedCourseIds.length === 0) {
        return; // No hay cursos seleccionados, no cargar materias
      }

      const materias = [];
      for (let id of selectedCourseIds) {
        try {
          const resp = await fetch(`http://localhost:3001/api/cursos/${id}/materias`, { credentials: 'include' });
          if (!resp.ok) {
              const errorData = await resp.json();
              throw new Error(errorData.error || `Error HTTP: ${resp.status}`);
          }
          const body = await resp.json(); // Asumo que el body es un array de materias
          materias.push(...body);
        } catch (error) {
          console.error(`Error al cargar materias para el curso ${id}:`, error);
          mostrarToastError(`No se pudieron cargar las materias para un curso seleccionado.`);
        }
      }
      
      // Asegurarse de que no haya duplicados si se seleccionan múltiples cursos que comparten materias
      const uniqueMaterias = [];
      const materiaIds = new Set();
      materias.forEach(m => {
          if (!materiaIds.has(m.id_materia)) {
              uniqueMaterias.push(m);
              materiaIds.add(m.id_materia);
          }
      });

      materiasSelect.innerHTML += uniqueMaterias
        .map(m => `<option value="${m.id_materia}">${m.materia}</option>`)
        .join('');
    };

    // Muestra el modal de asignación
    const modalAsignarUsuario = new bootstrap.Modal(document.getElementById('modalAsignarUsuario'));
    modalAsignarUsuario.show();
  }

  // 4) Helper para poblar selects (reutilizable)
  async function cargarSelect(api, selectId) {
    try {
      const resp = await fetch(`http://localhost:3001${api}`, { credentials: 'include' });
      if (!resp.ok) {
        throw new Error(`Error HTTP: ${resp.status}`);
      }
      const items = await resp.json();
      const sel = document.getElementById(selectId);
      if (sel) {
        // Limpia las opciones existentes excepto la primera (deshabilitada/seleccionada)
        // O limpia todas y añade la primera deshabilitada si no existe.
        // CORRECCIÓN: Ajuste del artículo 'un'/'una' basado en el género.
        const placeholderText = selectId.replace('Select', '').toLowerCase();
        
        let finalPlaceholder = placeholderText;
        let article = 'un'; // Default to masculine 'un'

        if (placeholderText === 'secciones') {
          finalPlaceholder = 'sección';
          article = 'una';
        } else if (placeholderText === 'cursos') {
          finalPlaceholder = 'curso';
          article = 'un'; // 'curso' is masculine
        } else if (placeholderText === 'materias') {
          finalPlaceholder = 'materia';
          article = 'una';
        } else if (placeholderText === 'periodos') {
          finalPlaceholder = 'período';
          article = 'un'; // 'período' is masculine
        }
        
        sel.innerHTML = `<option value="" disabled selected>Seleccione ${article} ${finalPlaceholder}</option>`;

        if (items && items.length > 0) {
            // Determina la clave de ID y de nombre basada en el primer objeto
            const firstItem = items[0];
            const idKey = Object.keys(firstItem)[0]; // e.g., 'id_seccion', 'id_curso', 'id_periodo'
            const nameKey = Object.keys(firstItem)[1]; // e.g., 'seccion', 'curso', 'periodo'

            sel.innerHTML += items
                .map(it => `<option value="${it[idKey]}">${it[nameKey]}</option>`)
                .join('');
        }
      } else {
        console.warn(`Elemento select con ID '${selectId}' no encontrado.`);
      }
    } catch (error) {
      console.error(`Error al cargar el select para ${api}:`, error);
      mostrarToastError(`No se pudieron cargar las opciones para ${selectId}.`);
    }
  }

  // Lógica para mostrar/ocultar campos basada en la selección del rol
  function setupRolChangeListener() {
    const rolSelect = document.getElementById('rolSelect');
    const seccionesField = document.getElementById('seccionesField');
    const cursosField = document.getElementById('cursosField');
    const materiasField = document.getElementById('materiasField');
    const periodosField = document.getElementById('periodosField'); // Nuevo

    const seccionesSelect = document.getElementById('seccionesSelect');
    const cursosSelect = document.getElementById('cursosSelect');
    const materiasSelect = document.getElementById('materiasSelect');
    const periodoSelect = document.getElementById('periodoSelect'); // Nuevo

    // Función para aplicar la visibilidad y los atributos 'required'
    const applyVisibility = () => {
      const selectedRol = rolSelect.value;
      const shouldShowFields = (selectedRol === 'estudiante' || selectedRol === 'profesor');

      [seccionesField, cursosField, materiasField, periodosField].forEach(field => {
        if (shouldShowFields) {
          field.classList.remove('d-none');
        } else {
          field.classList.add('d-none');
        }
      });

      // Gestionar el atributo 'required'
      [seccionesSelect, cursosSelect, materiasSelect, periodoSelect].forEach(select => {
        if (shouldShowFields) {
          select.setAttribute('required', 'true');
        } else {
          select.removeAttribute('required');
          // Opcional: Limpiar las selecciones y deshabilitar si se ocultan
          // select.value = ''; 
          // Array.from(select.options).forEach(option => option.selected = false); // Para selects multiple
        }
      });
    };

    // Aplicar al cargar la página (en caso de que haya una selección inicial)
    applyVisibility();

    // Añadir listener para cuando el rol cambie
    rolSelect.addEventListener('change', applyVisibility);
  }


  // 5) Guardar y procesar asignación de usuario
  function configurarAsignacion() {
    const btnGuardar = document.getElementById('btnGuardarAsignacion');
    if (!btnGuardar) {
      console.warn('El botón con ID "btnGuardarAsignacion" no fue encontrado en el DOM.');
      return;
    }

    // Llama a la función para configurar el listener del rol
    setupRolChangeListener(); 

    btnGuardar.addEventListener('click', async () => {
      const id_usuario = parseInt(document.getElementById('inputIdUsuario').value);
      const id_notificacion = parseInt(document.getElementById('inputIdNotificacion').value);
      const rol = document.getElementById('rolSelect').value;

      // Recolectar datos solo si el rol no es 'admin'
      let secciones = [];
      let cursos = [];
      let materias = [];
      let periodos = []; // Nuevo

      if (rol === 'estudiante' || rol === 'profesor') {
        // Validación básica de Bootstrap antes de enviar
        const form = document.getElementById('formAsignacionUsuario');
        if (!form.checkValidity()) {
          form.classList.add('was-validated'); // Muestra los mensajes de error de Bootstrap
          mostrarToastError('Por favor, completa todos los campos obligatorios para Estudiante/Profesor.');
          return;
        }

        secciones = Array.from(document.getElementById('seccionesSelect').selectedOptions).map(o => parseInt(o.value));
        cursos = Array.from(document.getElementById('cursosSelect').selectedOptions).map(o => parseInt(o.value));
        materias = Array.from(document.getElementById('materiasSelect').selectedOptions).map(o => parseInt(o.value));
        periodos = Array.from(document.getElementById('periodoSelect').selectedOptions).map(o => parseInt(o.value)); // Nuevo

        // Asegúrate de que las selecciones no estén vacías si son requeridas
        if (secciones.length === 0 || cursos.length === 0 || materias.length === 0 || periodos.length === 0) {
             mostrarToastError('Por favor, selecciona al menos una opción para cada campo requerido.');
             return;
        }
      }

      try {
        const resp = await fetch('http://localhost:3001/asignar-usuario', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          // Envía los datos condicionalmente
          body: JSON.stringify({ id_usuario, rol, secciones, cursos, materias, periodos })
        });
        const data = await resp.json();

        if (!resp.ok) {
          throw new Error(data.error || `Error en asignación: ${resp.statusText}`);
        }

        // Mostrar toast “Listo”
        const toastEl = document.getElementById('toastConfirmacion');
        if (toastEl) {
          new bootstrap.Toast(toastEl).show();
        }

        // Cerrar modal
        const modalInstance = bootstrap.Modal.getInstance(document.getElementById('modalAsignarUsuario'));
        if (modalInstance) {
          modalInstance.hide();
        }

        // Remover notificación procesada de la UI
        document.querySelector(`.notificacion-item[data-notificacion-id="${id_notificacion}"]`)?.remove();
        const remaining = document.querySelectorAll('.notificacion-item').length;
        // Oculta/muestra el punto de notificación
        document.querySelector('.notification').style.display = remaining > 0 ? 'block' : 'none';

        // Recargar notificaciones para asegurar que el listado esté actualizado
        cargarNotificaciones();

      } catch (error) {
        console.error('Error al procesar usuario:', error);
        mostrarToastError(`No se pudo completar el registro: ${error.message}`);
      }
    });
  }

  // 6) Configurar logout
  function configurarLogout() {
    const btn = document.getElementById('logoutButton');
    if (!btn) {
      console.warn('El botón con ID "logoutButton" no fue encontrado en el DOM.');
      return;
    }
    btn.addEventListener('click', async (event) => {
      event.preventDefault(); // Evita el comportamiento por defecto del botón
      try {
        const response = await fetch('http://localhost:3001/logout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include'
        });

        if (response.ok) {
          const data = await response.json();
          console.log('Respuesta del backend al logout:', data.message);
          // Opcional: Elimina cualquier bandera de sesión que tengas en localStorage
          localStorage.removeItem('isLoggedIn');
          // Redirige al usuario
          window.location.href = '/';
        } else {
          const errorData = await response.json();
          console.error('Error al cerrar sesión en el backend:', errorData.error || response.statusText);
          mostrarToastError(`Error al cerrar sesión: ${errorData.error || response.statusText}`);
        }
      } catch (error) {
        console.error('Error de red o del servidor al cerrar sesión:', error);
        mostrarToastError('No se pudo conectar con el servidor para cerrar la sesión.');
      }
    });
  }

  // 7) Configurar offcanvas del perfil para manejar clics fuera del área
  function configurarOffcanvasPerfil() {
    const offcanvasPerfil = document.getElementById('offcanvasWithBothOptions');
    if (!offcanvasPerfil) {
      console.warn('El offcanvas del perfil no fue encontrado en el DOM.');
      return;
    }

    // Event listener para detectar clics fuera del offcanvas
    document.addEventListener('click', (event) => {
      const offcanvasInstance = bootstrap.Offcanvas.getInstance(offcanvasPerfil);
      
      // Si el offcanvas está abierto
      if (offcanvasInstance && offcanvasPerfil.classList.contains('show')) {
        // Verificar si el clic fue fuera del offcanvas
        if (!offcanvasPerfil.contains(event.target) && 
            !event.target.closest('.Perfil-icons')) {
          // Cerrar el offcanvas
          offcanvasInstance.hide();
        }
      }
    });

    // Event listener para el evento 'hidden.bs.offcanvas' para limpiar cualquier estado residual
    offcanvasPerfil.addEventListener('hidden.bs.offcanvas', () => {
      // Asegurar que no haya backdrop residual
      const backdrop = document.querySelector('.offcanvas-backdrop');
      if (backdrop) {
        backdrop.remove();
      }
    });
  }
</script>
