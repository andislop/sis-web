---
// src/pages/student/notas.astro (o la ruta que uses para la vista del estudiante)
import "../../style/style-admin/actividades.css"; // Mantén tus estilos CSS
---

<section class="data-content-section">
  <!-- Título principal de la sección -->
  <section class="actividades-header-card mb-4">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title" id="materiaTitulo">Cargando Notas de Materia...</h2>
      <button class="btn btn-outline-secondary btn-sm ms-auto" id="btnVolverMaterias" type="button">
        <i class='bx bx-arrow-back'></i> Volver a Mis Materias
      </button>
    </div>
  </section>

  <!-- Sección de Notas: Simplificada para mostrar solo la tabla de notas del estudiante -->
  <div id="notasSection">
    <h3 class="mt-4 mb-3">Mis Notas en <span id="currentMateriaNameDisplay"></span></h3>
    
    <div class="d-flex justify-content-end mb-3">
        <!-- Botón para descargar notas -->
        <button class="btn btn-info btn-sm" id="btnDownloadNotes">
            <i class='bx bxs-download me-2'></i> Descargar Notas
        </button>
    </div>

    <div class="display-table mt-4" id="tableNotas">
      <div class="tabla-info-person">
        <table class="table table-dark table-hover table-striped tabla-notas-admin">
          <thead id="notasTableHeader">
            <!-- Headers dinámicos de las notas y actividades del estudiante -->
            <tr>
                <th scope="col">Nº</th>
                <th scope="col">Actividad</th>
                <th scope="col">Ponderación (%)</th>
                <th scope="col">Mi Nota</th>
                <th scope="col">Comentarios</th>
                <th scope="col">Fecha Registro</th>
            </tr>
          </thead>
          <tbody id="notasTableBody">
            <tr>
              <td colspan="6" class="text-center">Cargando notas...</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="paginationControlsNotas" class="pagination text-center mt-3"></div>
    </div>
  </div>
</section>

<!-- Scripts de Bootstrap y JavaScript personalizado -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001/api';
  let currentMateriaId = null;
  let currentPeriodoId = null; 
  let currentMateriaNombre = '';
  let currentUserId = null; // ESTO SE ESTABLECERÁ DESPUÉS DE LA CARGA DE USUARIO
  let currentPageNotas = 1;
  const itemsPerPageNotas = 10;

  // Nuevas variables globales para almacenar datos de contexto para la descarga
  let currentStudentNombreCompleto = 'Estudiante Desconocido';
  let currentCursoNombre = 'N/A';
  let currentPeriodoNombreParaDescarga = 'N/A';
  let currentSeccionNombre = 'N/A';
  let allActivitiesForDownload = [];
  let allNotasForDownload = [];

  let jspdfLoaded = false;
  let autotableLoaded = false;

  // Función robusta para mostrar alertas (reutilizada de tus archivos)
  function mostrarAlerta(mensaje, tipo, duracion = 5000) {
    const alertContainer = document.getElementById('alertContainer') || (() => {
      const div = document.createElement('div');
      div.id = 'alertContainer';
      div.style.position = 'fixed';
      div.style.top = '20px';
      div.style.left = '50%';
      div.style.transform = 'translateX(-50%)';
      div.style.zIndex = '9999';
      div.style.width = 'auto';
      div.style.maxWidth = '90%';
      document.body.appendChild(div);
      return div;
    })();

    const alertElement = document.createElement('div');
    alertElement.className = `alert alert-${tipo} alert-dismissible fade show`;
    alertElement.role = 'alert';
    alertElement.textContent = mensaje;

    alertContainer.appendChild(alertElement);

    setTimeout(() => {
      alertElement.classList.remove('show');
      setTimeout(() => {
        alertElement.remove();
      }, 150);
    }, duracion);
  }

  // Función para habilitar el botón de descarga
  function enableDownloadButton() {
    const downloadButton = document.getElementById('btnDownloadNotes');
    if (downloadButton) {
      downloadButton.removeAttribute('disabled');
      downloadButton.innerHTML = '<i class="bx bxs-download me-2"></i> Descargar Notas';
    }
  }

  // Cargar jsPDF primero
  const scriptJSPDF = document.createElement('script');
  scriptJSPDF.src = '/js/lib/jspdf.umd.min.js';
  scriptJSPDF.onload = () => {
    jspdfLoaded = true;
    console.log('jsPDF cargado correctamente.');

    const scriptAutoTable = document.createElement('script');
    scriptAutoTable.src = '/js/lib/jspdf.plugin.autotable.min.js';
    scriptAutoTable.onload = () => {
      autotableLoaded = true;
      console.log('jsPDF-AutoTable cargado correctamente.');
      window.jspdf = window.jspdf || {};
      window.jspdf.jsPDF = window.jspdf.jsPDF || window.jspDF || window.jsPDF;
      window.jspdf.AutoTable = window.jspdf.AutoTable || window.jspdf?.jsPDF?.API?.autoTable || window.jspDF?.API?.autoTable;
      enableDownloadButton();
    };
    scriptAutoTable.onerror = () => {
      console.error('Error al cargar jsPDF-AutoTable desde la ruta relativa.');
      mostrarAlerta('Error al cargar la librería de tablas (jsPDF-AutoTable). Verifica la ruta relativa.', 'danger');
    };
    document.head.appendChild(scriptAutoTable);
  };
  scriptJSPDF.onerror = () => {
    console.error('Error al cargar jsPDF desde la ruta relativa.');
    mostrarAlerta('Error al cargar la librería base de PDF (jsPDF). Verifica la ruta relativa.', 'danger');
  };
  document.head.appendChild(scriptJSPDF);


  document.addEventListener('DOMContentLoaded', async () => {
    const urlParams = new URLSearchParams(window.location.search);
    currentMateriaId = urlParams.get('materiaId');
    currentPeriodoId = urlParams.get('periodoId');

    // Deshabilitar el botón de descarga inicialmente y mostrar spinner
    const downloadButton = document.getElementById('btnDownloadNotes');
    if (downloadButton) {
      downloadButton.setAttribute('disabled', 'true');
      downloadButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Cargando librerías...';
    }

    // OBTENER EL ID DEL USUARIO CORRECTO DESDE EL BACKEND
    const userIdFromBackend = await fetchStudentIdFromBackend();
    if (userIdFromBackend) {
      currentUserId = userIdFromBackend;
    } else {
      // Fallback si no se puede obtener del backend (considerar un error y no continuar)
      mostrarAlerta('No se pudo obtener el ID del usuario. Por favor, inicia sesión de nuevo.', 'danger');
      document.getElementById('materiaTitulo').textContent = 'Error: Usuario no identificado';
      return;
    }

    if (!currentMateriaId || !currentPeriodoId) {
      mostrarAlerta('ID de materia o de período no especificado en la URL.', 'danger');
      document.getElementById('materiaTitulo').textContent = 'Error: Materia o Periodo no encontrados';
      return;
    }

    // Ahora que tenemos currentUserId, procedemos
    await fetchStudentName(currentUserId);
    await fetchMateriaDetails(currentMateriaId, currentPeriodoId);
    await loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, currentPageNotas);

    // Listener para el botón de volver a las materias
    document.getElementById('btnVolverMaterias').addEventListener('click', () => {
      window.location.href = '/Students-Control/Students-Control';
    });

    // Listener para el botón "Descargar Notas"
    document.getElementById('btnDownloadNotes').addEventListener('click', handleDownloadNotes);
  });

  /**
   * @function fetchStudentIdFromBackend
   * @description Fetches the authenticated user's ID directly from the backend.
   * This is more reliable than localStorage for authentication.
   * @returns {string|null} The user's ID or null if not found/error.
   */
  async function fetchStudentIdFromBackend() {
    try {
      const res = await fetch(`${API_BASE_URL.replace('/api', '')}/usuario`, {
        method: 'GET',
        credentials: 'include' 
      });
      const data = await res.json();
      if (res.ok && data && data.id) {
        console.log('DEBUG: User ID obtained from backend:', data.id);
        return data.id;
      } else {
        console.warn('Could not get logged-in user ID from backend:', data.error || res.statusText);
        return null;
      }
    } catch (error) {
      console.error('Error fetching user ID from backend:', error);
      return null;
    }
  }


  async function fetchStudentName(id_usuario) {
    try {
      const res = await fetch(`${API_BASE_URL.replace('/api', '')}/usuario`, { 
        method: 'GET',
        credentials: 'include' 
      });

      if (!res.ok) {
        throw new Error(`Error HTTP! estado: ${res.status}`);
      }

      const data = await res.json();
      if (data && data.primer_nombre && data.primer_apellido) {
        currentStudentNombreCompleto = `${data.primer_nombre} ${data.primer_apellido}`;
      } else {
        currentStudentNombreCompleto = 'Estudiante (ID: ' + id_usuario + ')';
      }
    } catch (error) {
      console.error('Error al obtener el nombre del estudiante:', error);
      mostrarAlerta('No se pudo cargar el nombre del estudiante.', 'danger');
      currentStudentNombreCompleto = 'Estudiante (ID: ' + id_usuario + ')';
    }
  }

  async function fetchMateriaDetails(id_materia, id_periodo) {
    try {
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${id_materia}?id_periodo=${id_periodo}`);
      if (!response.ok) {
        throw new Error(`Error HTTP! estado: ${response.status}`);
      }
      const data = await response.json();
      currentMateriaNombre = data.nombre_materia;
      currentCursoNombre = data.nombre_curso || 'N/A';      
      currentPeriodoNombreParaDescarga = data.nombre_periodo || 'N/A'; 
      currentSeccionNombre = data.nombre_seccion || 'N/A';  

      document.getElementById('materiaTitulo').textContent = `Notas de la Materia: "${data.nombre_materia || 'Materia Desconocida'}" (${data.nombre_periodo || 'Periodo Desconocido'})`;
      document.getElementById('currentMateriaNameDisplay').textContent = data.nombre_materia || 'Materia Desconocida';
    } catch (error) {
      console.error('Error al obtener detalles de la materia:', error);
      document.getElementById('materiaTitulo').textContent = 'Error al cargar Materia';
      document.getElementById('currentMateriaNameDisplay').textContent = 'Error';
      mostrarAlerta('No se pudo cargar el nombre de la materia o los detalles del período.', 'danger');
    }
  }

  async function loadNotasEstudiante(id_estudiante, id_materia, id_periodo, page) {
    const notasTableBody = document.getElementById('notasTableBody');
    const paginationControls = document.getElementById('paginationControlsNotas');

    notasTableBody.innerHTML = `<tr><td colspan="6" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div> Cargando notas...</td></tr>`;
    paginationControls.innerHTML = '';

    try {
      console.log('DEBUG: currentUserId (en loadNotasEstudiante):', id_estudiante);
      console.log('DEBUG: currentMateriaId:', id_materia);
      console.log('DEBUG: currentPeriodoId (en loadNotasEstudiante):', id_periodo);


      const actividadesResponse = await fetch(`${API_BASE_URL}/materias/${id_materia}/actividades?id_periodo=${id_periodo}`);
      if (!actividadesResponse.ok) {
        throw new Error(`Error HTTP! estado: ${actividadesResponse.status} al obtener actividades.`);
      }
      const actividadesData = await actividadesResponse.json();
      const actividades = actividadesData.actividades || [];
      allActivitiesForDownload = actividades;
      console.log('DEBUG: Actividades obtenidas:', actividades);

      const notasResponse = await fetch(`${API_BASE_URL}/notas/materia/${id_materia}/estudiante/${id_estudiante}?id_periodo=${id_periodo}&page=${page}&limit=${itemsPerPageNotas}`);
      if (!notasResponse.ok) {
        throw new Error(`Error HTTP! estado: ${notasResponse.status} al obtener notas.`);
      }
      const notasData = await notasResponse.json();
      const notasDelEstudiante = notasData.notas || [];
      allNotasForDownload = notasDelEstudiante;
      
      console.log('DEBUG: Raw notes data from API:', notasData);
      console.log('DEBUG: Extracted student notes from API:', notasDelEstudiante);


      notasTableBody.innerHTML = '';

      if (actividades.length === 0 && notasDelEstudiante.length === 0) {
        notasTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-muted">No se encontraron actividades ni notas para ti en esta materia y período.</td></tr>`;
        mostrarAlerta('No se encontraron actividades ni notas para esta materia o hubo un problema al cargarlas.', 'info');
        return;
      }

      const notasMap = new Map();
      notasDelEstudiante.forEach(nota => {
        notasMap.set(String(nota.id_actividad), nota);
      });
      console.log('DEBUG: notasMap (mapa de notas por ID de actividad):', notasMap);


      let sumOfWeightedNotes = 0;

      actividades.forEach((actividad, index) => {
        const row = notasTableBody.insertRow();
        const notaEncontrada = notasMap.get(String(actividad.id_actividad));
        console.log(`DEBUG: Procesando actividad "${actividad.nombre_actividad}" (ID: ${actividad.id_actividad}). Nota encontrada para mapeo:`, notaEncontrada);

        let notaValor = 'N/A';
        let comentariosDisplay = 'Sin comentarios';
        let fechaRegistroNotaDisplay = 'N/A';
        let notaClass = 'text-muted';

        if (notaEncontrada) {
          notaValor = parseFloat(notaEncontrada.nota).toFixed(2);
          comentariosDisplay = notaEncontrada.comentarios || 'Sin comentarios'; 
          fechaRegistroNotaDisplay = notaEncontrada.fecha_registro ? new Date(notaEncontrada.fecha_registro).toLocaleDateString() : 'N/A';

          if (parseFloat(notaEncontrada.nota) >= 10) { 
            notaClass = 'text-success';
          } else {
            notaClass = 'text-danger';
          }

          if (actividad.ponderacion > 0 && !isNaN(parseFloat(notaEncontrada.nota))) {
            sumOfWeightedNotes += (parseFloat(notaEncontrada.nota) * (actividad.ponderacion / 100));
          }
        }

        const ponderacionDisplay = actividad.ponderacion !== null ? actividad.ponderacion.toFixed(2) : 'N/A';

        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${actividad.nombre_actividad || 'Actividad Desconocida'}</td>
          <td>${ponderacionDisplay}</td>
          <td class="${notaClass}">
              ${notaValor}
          </td>
          <td>${comentariosDisplay}</td>
          <td>${fechaRegistroNotaDisplay}</td>
        `;
      });

      const finalRow = notasTableBody.insertRow();
      finalRow.innerHTML = `
          <td colspan="3" class="text-end fw-bold">Nota Definitiva:</td>
          <td colspan="3" class="text-start fw-bold ${sumOfWeightedNotes >= 10 ? 'text-success' : 'text-danger'}">
              ${sumOfWeightedNotes.toFixed(2)}
          </td>
      `;

      setupPagination(Math.ceil(actividades.length / itemsPerPageNotas), page, 'notas');

    } catch (error) {
      notasTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error al cargar notas: ${error.message}.</td></tr>`;
      console.error('ERROR: Error al cargar notas del estudiante:', error);
      mostrarAlerta(`Error al cargar la tabla de notas: ${error.message}`, 'danger');
    }
  }


  function setupPagination(totalPages, currentPage, type) {
    const paginationContainerId = type === 'actividades' ? 'paginationActividades' : 'paginationControlsNotas';
    const paginationContainer = document.getElementById(paginationContainerId);
    paginationContainer.innerHTML = '';

    if (totalPages <= 1) return;

    const ul = document.createElement('ul');
    ul.className = 'pagination-list flex justify-center items-center gap-2';

    const prevLi = document.createElement('li');
    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    const prevLink = document.createElement('a');
    prevLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
    prevLink.href = '#';
    prevLink.textContent = 'Anterior';
    prevLink.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage > 1) {
        loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, currentPage - 1);
      }
    });
    prevLi.appendChild(prevLink);
    ul.appendChild(prevLi);

    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    if (startPage > 1) {
      const li = document.createElement('li');
      li.className = 'page-item';
      const link = document.createElement('a');
      link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      link.href = '#';
      link.textContent = '1';
      link.addEventListener('click', (e) => {
        e.preventDefault();
        loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, 1);
      });
      li.appendChild(link);
      ul.appendChild(li);
      if (startPage > 2) {
        const ellipsis = document.createElement('li');
        ellipsis.className = 'page-item disabled';
        ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
        ul.appendChild(ellipsis);
      }
    }

    for (let i = startPage; i <= endPage; i++) {
      const li = document.createElement('li');
      li.className = `page-item ${i === currentPage ? 'active' : ''}`;
      const link = document.createElement('a');
      link.className = `page-link rounded-lg px-3 py-1 ${i === currentPage ? 'bg-purple-800' : 'bg-gray-700'} text-white hover:bg-purple-600`;
      link.href = '#';
      link.textContent = i;
      link.addEventListener('click', (e) => {
        e.preventDefault();
        loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, i);
      });
      li.appendChild(link);
      ul.appendChild(li);
    }

    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        const ellipsis = document.createElement('li');
        ellipsis.className = 'page-item disabled';
        ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
        ul.appendChild(ellipsis);
      }
      const li = document.createElement('li');
      li.className = 'page-item';
      const link = document.createElement('a');
      link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      link.href = '#';
      link.textContent = totalPages;
      link.addEventListener('click', (e) => {
        e.preventDefault();
        loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, totalPages);
      });
      li.appendChild(link);
      ul.appendChild(li);
    }

    const nextLi = document.createElement('li');
    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    const nextLink = document.createElement('a');
    nextLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
    nextLink.href = '#';
    nextLink.textContent = 'Siguiente';
    nextLink.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage < totalPages) {
        loadNotasEstudiante(currentUserId, currentMateriaId, currentPeriodoId, currentPage + 1);
      }
    });
    nextLi.appendChild(nextLink);
    ul.appendChild(nextLi);

    paginationContainer.appendChild(ul);
  }

  async function handleDownloadNotes() {
    if (typeof window.jspdf === 'undefined' || typeof window.jspdf.jsPDF === 'undefined' || typeof window.jspdf.AutoTable === 'undefined') {
      mostrarAlerta('Las librerías necesarias aún no están cargadas. Por favor, espera un momento e inténtalo de nuevo.', 'warning', 5000);
      return;
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    const svgUrl = '/SVG/Logo-1.svg';
    const img = new Image();
    img.src = svgUrl;

    await new Promise((resolve, reject) => {
      img.onload = () => resolve();
      img.onerror = reject;
    });

    const logoWidth = 80;
    const logoHeight = 40;
    const pageWidth = doc.internal.pageSize.getWidth();

    const logoX = (pageWidth - logoWidth) / 1.5;
    const logoY = 10;

    const canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0, logoWidth, logoHeight);
    const imgData = canvas.toDataURL('image/png');

    doc.addImage(imgData, 'PNG', logoX, logoY, logoWidth, logoHeight);

    let yOffset = logoY + logoHeight + 8;
    const lineHeight = 7;
    doc.setFontSize(16);
    doc.text('Reporte de Notas del Estudiante', pageWidth / 2, yOffset, { align: 'center' });
    yOffset += 12;

    doc.setFontSize(12);
    doc.text(`Estudiante: ${currentStudentNombreCompleto}` + `  Materia: ${currentMateriaNombre}` + `  Curso: ${currentCursoNombre}`, pageWidth / 2, yOffset, { align: 'center' });
    yOffset += 7;
    doc.text(`Período: ${currentPeriodoNombreParaDescarga}` + ` Sección: ${currentSeccionNombre}`,  pageWidth / 2, yOffset, { align: 'center' });
    yOffset += 7;

    let totalWeightedGrade = 0;
    const tableRows = [];

    allActivitiesForDownload.forEach((activity, index) => {
      const notaEncontrada = allNotasForDownload.find(n => String(n.id_actividad) === String(activity.id_actividad));
      let notaValor = 'N/A';
      let comentarios = 'Sin comentarios';
      let fechaRegistro = 'N/A';
      let weightedContribution = 0;

      if (notaEncontrada) {
        notaValor = parseFloat(notaEncontrada.nota).toFixed(2);
        comentarios = notaEncontrada.comentarios || 'Sin comentarios'; 
        fechaRegistro = notaEncontrada.fecha_registro ? new Date(notaEncontrada.fecha_registro).toLocaleDateString() : 'N/A';

        if (activity.ponderacion > 0 && !isNaN(parseFloat(notaEncontrada.nota))) {
          weightedContribution = (parseFloat(notaEncontrada.nota) * (activity.ponderacion / 100));
          totalWeightedGrade += weightedContribution;
        }
      }

      tableRows.push([
        index + 1,
        activity.nombre_actividad || 'Actividad Desconocida',
        (activity.ponderacion !== null ? activity.ponderacion.toFixed(2) : 'N/A') + '%',
        notaValor,
        comentarios,
        fechaRegistro
      ]);
    });

    const tableHeaders = [
      'Nº',
      'Actividad',
      'Ponderación',
      'Mi Nota',
      'Comentarios',
      'Fecha Registro'
    ];

    doc.autoTable({
      startY: yOffset,
      head: [tableHeaders],
      body: tableRows,
      theme: 'striped',
      styles: {
        fontSize: 9,
        cellPadding: 2,
        overflow: 'linebreak',
      },
      headStyles: {
        fillColor: [164, 33, 189],
        textColor: 255,
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 10 },
        1: { cellWidth: 40 },
        2: { cellWidth: 25 },
        3: { cellWidth: 20 },
        4: { cellWidth: 45 },
        5: { cellWidth: 25 }
      },
      margin: { left: 10, right: 10 },
      didDrawPage: function (data) {
      }
    });

    yOffset = doc.autoTable.previous.finalY + lineHeight * 2;

    if (yOffset > doc.internal.pageSize.height - 30) {
      doc.addPage();
      yOffset = 40;
    }

    doc.setFontSize(12);
    doc.text(`Nota Definitiva de la Materia: ${totalWeightedGrade.toFixed(2)}`, pageWidth / 2, yOffset, { align: 'center' });

    const filename = `notas_${currentStudentNombreCompleto.replace(/ /g, '_')}.pdf`;
    doc.save(filename);

    mostrarAlerta('Reporte de notas descargado exitosamente.', 'success', 3000);
  }

</script>
