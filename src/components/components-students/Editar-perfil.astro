---
// src/pages/admin/perfil.astro
import "../../style/style-admin/perfil.css";
---

<section class="profile-content-section">
  <div class="profile-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Mi perfil</h2>
    </div>
  </div>

  <section class="content-info-data">
    <section class="data-general-control">
      <div class="profile-card" id="profileView">
        <div class="profile-main-info"> <!-- Contenedor para avatar y nombre/cédula -->
          <img src="/public/img/foto.jpg" alt="Foto de Perfil" class="profile-avatar">
          <div class="profile-text-header">
            <h3 class="profile-name" id="userName">Cargando Nombre...</h3>
            <p class="profile-cedula-display">Cédula: <span id="userCedula">Cargando...</span></p>
          </div>
        </div>
        <div class="profile-details">
          <p><strong>Estado:</strong> <span id="userEstado">Cargando...</span></p>
          <p><strong>Ciudad:</strong> <span id="userCiudad">Cargando...</span></p>
          <p><strong>Dirección:</strong> <span id="userDireccion">Cargando...</span></p>
          <p><strong>Correo electrónico:</strong> <span id="userEmail">Cargando...</span></p>
          <!-- La línea de "Cursos" ha sido eliminada -->
        </div>
        <div class="profile-actions">
          <a href="#" class="btn btn-primary-custom" id="editProfileBtn">Editar</a>
        </div>
      </div>

      <div class="profile-edit-form" id="profileEdit" style="display: none;">
        <div class="profile-header-edit">
          <img src="/public/img/foto.jpg" alt="Foto de Perfil" class="profile-avatar">
          <button class="btn btn-secondary-custom">Cambiar Foto de perfil</button>
        </div>
        <h3 class="edit-title">Editar Datos</h3>
        <form id="profileEditForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="primerNombre" class="form-label">Primer Nombre</label>
              <input type="text" class="form-control" id="primerNombre" autocomplete="given-name">
            </div>
            <div class="col-md-6 mb-3">
              <label for="segundoNombre" class="form-label">Segundo Nombre</label>
              <input type="text" class="form-control" id="segundoNombre" autocomplete="additional-name">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="primerApellido" class="form-label">Primer Apellido</label>
              <input type="text" class="form-control" id="primerApellido" autocomplete="family-name">
            </div>
            <div class="col-md-6 mb-3">
              <label for="segundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="segundoApellido" autocomplete="off">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="correoElectronico" class="form-label">Correo Electrónico</label>
              <input type="email" class="form-control" id="correoElectronico" autocomplete="off">
            </div>
            <div class="col-md-6 mb-3">
              <label for="direccion" class="form-label">Dirección</label>
              <input type="text" class="form-control" id="direccion" autocomplete="off">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="oldContrasena" class="form-label">Contraseña Actual</label>
              <input type="password" class="form-control" id="oldContrasena" placeholder="Tu contraseña actual" autocomplete="current-password">
              <small class="form-text text-muted">Necesaria para cambiar la contraseña.</small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="contrasena" class="form-label">Nueva Contraseña</label>
              <input type="password" class="form-control" id="contrasena" placeholder="Nueva contraseña" autocomplete="new-password">
              <div class="invalid-feedback" id="newPasswordFeedback"></div>
              <small id="passwordStrength" class="form-text text-muted"></small>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="repetirContrasena" class="form-label">Repetir Nueva Contraseña</label>
              <input type="password" class="form-control" id="repetirContrasena" placeholder="Repite la nueva contraseña" autocomplete="new-password">
              <div class="invalid-feedback" id="repeatPasswordFeedback"></div>
            </div>
          </div>
          <div class="d-flex justify-content-center mt-4">
            <button type="submit" class="btn btn-primary-custom">Guardar</button>
          </div>
        </form>
      </div>
    </section>
  </section>
</section>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001'; // Ajusta esto a tu URL de backend

  document.addEventListener('DOMContentLoaded', async () => {
    const profileView = document.getElementById('profileView');
    const profileEdit = document.getElementById('profileEdit');
    const editProfileBtn = document.getElementById('editProfileBtn');
    const profileEditForm = document.getElementById('profileEditForm');

    const oldContrasenaInput = document.getElementById('oldContrasena');
    const contrasenaInput = document.getElementById('contrasena');
    const repetirContrasenaInput = document.getElementById('repetirContrasena');
    const passwordStrengthFeedback = document.getElementById('passwordStrength');
    const correoElectronicoInput = document.getElementById('correoElectronico');
    const direccionInput = document.getElementById('direccion');


    let currentUserId = null;

    function showAlert(message, type) {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show fixed-top mx-auto mt-3 w-75`;
      alertDiv.role = 'alert';
      alertDiv.style.maxWidth = '400px';
      alertDiv.textContent = message;
      document.body.appendChild(alertDiv);
      setTimeout(() => alertDiv.remove(), 5000);
    }

    // Funciones auxiliares para errores de validación en línea
    function mostrarError(elemento, mensaje) {
        elemento.classList.add('is-invalid');
        let feedbackElement = elemento.nextElementSibling;
        // Si el siguiente hermano no es el feedback, busca el feedback dentro del mismo div mb-3
        if (!feedbackElement || !feedbackElement.classList.contains('invalid-feedback')) {
            feedbackElement = elemento.closest('.mb-3')?.querySelector('.invalid-feedback');
        }
        if (feedbackElement) {
            feedbackElement.textContent = mensaje;
            feedbackElement.style.display = 'block';
        }
    }

    function limpiarError(elemento) {
        elemento.classList.remove('is-invalid');
        let feedbackElement = elemento.nextElementSibling;
        if (!feedbackElement || !feedbackElement.classList.contains('invalid-feedback')) {
            feedbackElement = elemento.closest('.mb-3')?.querySelector('.invalid-feedback');
        }
        if (feedbackElement) {
            feedbackElement.textContent = '';
            feedbackElement.style.display = 'none';
        }
    }

    async function fetchUserProfile() {
      try {
        const sessionResponse = await fetch(`${API_BASE_URL}/me`, {
          credentials: 'include'
        });
        const sessionData = await sessionResponse.json();

        // Si no hay ID de usuario en sesión, usamos el ID 1 como fallback sin alerta.
        if (!sessionData.id_usuario) {
          console.warn("No se pudo obtener el ID del usuario de la sesión. Se usará el ID 1 como fallback.");
          currentUserId = '1';
        } else {
          currentUserId = sessionData.id_usuario;
        }
        
        // Log para depuración del objeto user completo
        console.log("Fetching user profile for ID:", currentUserId);


        const response = await fetch(`${API_BASE_URL}/usuarios/${currentUserId}`, {
          credentials: 'include'
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'No se pudo cargar la información del perfil.');
        }

        const user = await response.json();
        console.log("User data received:", user); // Log para ver los datos del usuario, incluida la dirección

        // Mostrar datos en el modo de visualización
        document.getElementById('userName').textContent = `${user.primer_nombre || ''} ${user.segundo_nombre || ''} ${user.primer_apellido || ''} ${user.segundo_apellido || ''}`.trim();
        document.getElementById('userCedula').textContent = user.cedula || 'N/A';
        document.getElementById('userEstado').textContent = user.estado_residencia || 'N/A';
        document.getElementById('userCiudad').textContent = user.ciudad || 'N/A';
        document.getElementById('userDireccion').textContent = user.direccion || 'N/A';
        document.getElementById('userEmail').textContent = user.correo_electronico || 'N/A';
     

        // Llenar formulario de edición con un pequeño retraso para intentar evadir el autocompletado del navegador
        // Los campos de nombre/apellido se pueden llenar directamente
        document.getElementById('primerNombre').value = user.primer_nombre || '';
        document.getElementById('segundoNombre').value = user.segundo_nombre || '';
        document.getElementById('primerApellido').value = user.primer_apellido || '';
        document.getElementById('segundoApellido').value = user.segundo_apellido || '';
        
        // Retrasar el llenado de correo y dirección
        setTimeout(() => {
            correoElectronicoInput.value = user.correo_electronico || '';
            direccionInput.value = user.direccion || '';
        }, 100); // Pequeño retraso de 100ms

        // Las contraseñas se vacían siempre al cargar y al abrir el formulario de edición
        oldContrasenaInput.value = ''; 
        contrasenaInput.value = '';
        repetirContrasenaInput.value = '';
        passwordStrengthFeedback.textContent = ''; // Limpiar feedback de fortaleza
        limpiarError(contrasenaInput);
        limpiarError(repetirContrasenaInput);


      } catch (error) {
        console.error('Error al cargar el perfil:', error);
        showAlert('Error al cargar tu perfil.', 'danger');
      }
    }

    editProfileBtn.addEventListener('click', (e) => {
      e.preventDefault();
      profileView.style.display = 'none';
      profileEdit.style.display = 'block';
      document.querySelector('.profile-header-card .welcome-search-data__title').textContent = 'Editar Perfil';

      // Al hacer clic en "Editar", rellenar los campos de texto con los valores actuales
      // para asegurar que no se pierdan si el usuario edita y luego cancela.
      // Los campos de contraseña y el correo/dirección se manejan con un retraso para evitar autocompletado.
      fetchUserProfile(); // Esto recargará los datos y aplicará el retraso

      // Pero forzamos el vaciado de contraseñas de inmediato
      oldContrasenaInput.value = '';
      contrasenaInput.value = '';
      repetirContrasenaInput.value = '';
      passwordStrengthFeedback.textContent = '';
      limpiarError(contrasenaInput);
      limpiarError(repetirContrasenaInput);
    });


    // Lógica de validación de fortaleza de contraseña para Nueva Contraseña
    contrasenaInput.addEventListener('input', function() {
        const password = this.value;
        let strength = 0;
        let feedback = [];

        if (password.length >= 8) {
            strength += 1;
        } else {
            feedback.push('Al menos 8 caracteres');
        }
        if (/[A-Z]/.test(password)) {
            strength += 1;
        } else {
            feedback.push('Una letra mayúscula');
        }
        if (/[a-z]/.test(password)) {
            strength += 1;
        } else {
            feedback.push('Una letra minúscula');
        }
        if (/[0-9]/.test(password)) {
            strength += 1;
        } else {
            feedback.push('Un número');
        }
        if (/[^A-Za-z0-9]/.test(password)) {
            strength += 1;
        } else {
            feedback.push('Un caracter especial');
        }

        if (password.length === 0) {
            passwordStrengthFeedback.textContent = '';
            limpiarError(contrasenaInput);
            return;
        }

        let strengthText = '';
        let color = '';

        if (strength === 5) {
            strengthText = '¡Excelente!';
            color = 'green';
            limpiarError(contrasenaInput);
        } else if (strength >= 3) {
            strengthText = 'Buena';
            color = 'orange';
            limpiarError(contrasenaInput);
        } else {
            strengthText = 'Débil';
            color = 'red';
            mostrarError(contrasenaInput, 'Contraseña débil: ' + feedback.join(', '));
        }
        passwordStrengthFeedback.textContent = `Fortaleza: ${strengthText}`;
        passwordStrengthFeedback.style.color = color;
    });

    // Validar coincidencia de contraseñas
    repetirContrasenaInput.addEventListener('input', function() {
        if (contrasenaInput.value !== repetirContrasenaInput.value) {
            mostrarError(repetirContrasenaInput, 'Las contraseñas no coinciden.');
        } else {
            limpiarError(repetirContrasenaInput);
        }
    });

    // Revalidar repetición de contraseña si la nueva contraseña cambia
    contrasenaInput.addEventListener('input', function() {
        if (repetirContrasenaInput.value !== '') { // Solo revalida si ya hay algo en confirmar
             if (contrasenaInput.value !== repetirContrasenaInput.value) {
                mostrarError(repetirContrasenaInput, 'Las contraseñas no coinciden.');
            } else {
                limpiarError(repetirContrasenaInput);
            }
        }
    });

    // Validación en tiempo real para evitar números en nombres y apellidos
    function soloLetrasInputHandler(e) {
      const valor = e.target.value;
      // Permite solo letras, espacios y tildes
      const soloLetras = valor.replace(/[^A-Za-zÁÉÍÓÚáéíóúÑñ\s]/g, '');
      if (valor !== soloLetras) {
        e.target.value = soloLetras;
      }
    }
    document.getElementById('primerNombre').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('segundoNombre').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('primerApellido').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('segundoApellido').addEventListener('input', soloLetrasInputHandler);

    profileEditForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const primerNombreInput = document.getElementById('primerNombre');
      const segundoNombreInput = document.getElementById('segundoNombre');
      const primerApellidoInput = document.getElementById('primerApellido');
      const segundoApellidoInput = document.getElementById('segundoApellido');
      const correoElectronicoInput = document.getElementById('correoElectronico');
      const direccionInput = document.getElementById('direccion');

      const primerNombre = primerNombreInput.value.trim();
      const segundoNombre = segundoNombreInput.value.trim();
      const primerApellido = primerApellidoInput.value.trim();
      const segundoApellido = segundoApellidoInput.value.trim();
      const correoElectronico = correoElectronicoInput.value.trim();
      const direccion = direccionInput.value.trim();
      const oldContrasena = oldContrasenaInput.value;
      const contrasena = contrasenaInput.value;
      const repetirContrasena = repetirContrasenaInput.value;

      let valid = true;
      // Validar que los campos de nombre y apellido no contengan números y no estén vacíos
      const soloLetrasRegex = /^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]+$/;
      function validarCampoTexto(input, nombreCampo) {
        if (!input.value.trim()) {
          mostrarError(input, `El campo ${nombreCampo} es obligatorio.`);
          valid = false;
        } else if (!soloLetrasRegex.test(input.value.trim())) {
          mostrarError(input, `El campo ${nombreCampo} solo debe contener letras.`);
          valid = false;
        } else {
          limpiarError(input);
        }
      }
      validarCampoTexto(primerNombreInput, 'Primer Nombre');
      validarCampoTexto(segundoNombreInput, 'Segundo Nombre');
      validarCampoTexto(primerApellidoInput, 'Primer Apellido');
      validarCampoTexto(segundoApellidoInput, 'Segundo Apellido');
      // Validar que correo y dirección no estén vacíos
      if (!correoElectronico) {
        mostrarError(correoElectronicoInput, 'El campo Correo Electrónico es obligatorio.');
        valid = false;
      } else {
        limpiarError(correoElectronicoInput);
      }
      if (!direccion) {
        mostrarError(direccionInput, 'El campo Dirección es obligatorio.');
        valid = false;
      } else {
        limpiarError(direccionInput);
      }
      // Validar contraseñas (ya está la lógica existente)
      if (!valid) {
        showAlert('Ningun campo puede estar vacio, por favor llena todos los campos.', 'danger');
        return;
      }

      const updatedData = {
        primer_nombre: primerNombre,
        segundo_nombre: segundoNombre,
        primer_apellido: primerApellido,
        segundo_apellido: segundoApellido,
        correo_electronico: correoElectronico,
        direccion: direccion
      };

      // Lógica de validación y actualización de contraseña
      if (oldContrasena || contrasena || repetirContrasena) { // Si el usuario interactuó con algún campo de contraseña
        if (!oldContrasena) {
          showAlert('Debes ingresar tu contraseña actual para cambiarla.', 'danger');
          return;
        }
        if (contrasena !== repetirContrasena) {
          showAlert('La nueva contraseña y su confirmación no coinciden.', 'danger');
          return;
        }
        if (!contrasena) {
             showAlert('Debes ingresar la nueva contraseña si deseas cambiarla.', 'danger');
             return;
        }
        // Validar fortaleza de la nueva contraseña solo si se intenta cambiar
        if (contrasenaInput.classList.contains('is-invalid')) {
            showAlert('La nueva contraseña es demasiado débil.', 'danger');
            return;
        }

        updatedData.old_contrasena = oldContrasena;
        updatedData.contrasena = contrasena; // Se enviará la nueva contraseña al backend
      }


      try {
        const response = await fetch(`${API_BASE_URL}/usuarios/${currentUserId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify(updatedData)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al actualizar el perfil.');
        }

        showAlert('Perfil actualizado exitosamente.', 'success');
        // Limpiar campos de contraseña después de una actualización exitosa
        oldContrasenaInput.value = '';
        contrasenaInput.value = '';
        repetirContrasenaInput.value = '';
        passwordStrengthFeedback.textContent = ''; // Limpiar feedback de fortaleza
        limpiarError(contrasenaInput);
        limpiarError(repetirContrasenaInput);


        await fetchUserProfile(); // Recargar los datos para la vista de perfil
        profileEdit.style.display = 'none';
        profileView.style.display = 'block';
        document.querySelector('.profile-header-card .welcome-search-data__title').textContent = 'Mi perfil'; // Restore title
      } catch (error) {
        console.error('Error al actualizar perfil:', error);
        showAlert(error.message || 'Ocurrió un error al actualizar el perfil.', 'danger');
      }
    });

    fetchUserProfile();
  });
</script>
