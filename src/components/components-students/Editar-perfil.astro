---
// src/pages/admin/perfil.astro
import "../../style/style-admin/perfil.css";
---

<section class="profile-content-section">
  <div class="profile-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Mi perfil</h2>
    </div>
  </div>

  <section class="content-info-data">
    <section class="data-general-control">
      <!-- Vista del perfil (initial display) -->
      <div class="profile-card" id="profileView">
        <div class="profile-main-info"> <!-- Contenedor para avatar y nombre/cédula -->
          <!-- Aquí se mostrará el icono de perfil guardado -->
          <i id="userProfileDisplayIcon" class="bx bx-user-circle profile-avatar-icon"></i>
          <div class="profile-text-header">
            <h3 class="profile-name" id="userName">Cargando Nombre...</h3>
            <p class="profile-cedula-display">Cédula: <span id="userCedula">Cargando...</span></p>
          </div>
        </div>
        <div class="profile-details">
          <p><strong>Estado:</strong> <span id="userEstado">Cargando...</span></p>
          <p><strong>Ciudad:</strong> <span id="userCiudad">Cargando...</span></p>
          <p><strong>Dirección:</strong> <span id="userDireccion">Cargando...</span></p>
          <p><strong>Correo electrónico:</strong> <span id="userEmail">Cargando...</span></p>
        </div>
        <div class="profile-actions">
          <a href="#" class="btn btn-primary-custom" id="editProfileBtn" >Editar</a>
        </div>
      </div>

      <!-- Formulario de edición del perfil (hidden by default) -->
      <div class="profile-edit-form" id="profileEdit" style="display: none;">
        <div class="profile-header-edit">
          <!-- Icono de perfil actual en la vista de edición -->
          <div class="current-profile-icon-wrapper">
            <i id="currentEditProfileIcon" class="bx bx-user-circle profile-display-icon"></i>
          </div>
          <!-- Botón para abrir la selección de iconos -->
          <button class="btn btn-secondary-custom" id="openIconSelectionBtn">Cambiar Icono de perfil</button>
        </div>
        
        <h3 class="edit-title">Editar Datos</h3>
        <form id="profileEditForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="primerNombre" class="form-label">Primer Nombre</label>
              <input type="text" class="form-control" id="primerNombre" autocomplete="given-name">
            </div>
            <div class="col-md-6 mb-3">
              <label for="segundoNombre" class="form-label">Segundo Nombre</labe         l>
              <input type="text" class="form-control" id="segundoNombre" autocomplete="additional-name">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="primerApellido" class="form-label">Primer Apellido</label>
              <input type="text" class="form-control" id="primerApellido" autocomplete="family-name">
            </div>
            <div class="col-md-6 mb-3">
              <label for="segundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="segundoApellido" autocomplete="off">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="correoElectronico" class="form-label">Correo Electrónico</label>
              <input type="email" class="form-control" id="correoElectronico" autocomplete="off">
            </div>
            <div class="col-md-6 mb-3">
              <label for="direccion" class="form-label">Dirección</label>
              <input type="text" class="form-control" id="direccion" autocomplete="off">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="oldContrasena" class="form-label">Contraseña Actual</label>
              <input type="password" class="form-control" id="oldContrasena" placeholder="Tu contraseña actual" autocomplete="current-password">
              <small class="form-text text-muted">Necesaria para cambiar la contraseña.</small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="contrasena" class="form-label">Nueva Contraseña</label>
              <input type="password" class="form-control" id="contrasena" placeholder="Nueva contraseña" autocomplete="new-password">
              <div class="invalid-feedback" id="newPasswordFeedback"></div>
              <small id="passwordStrength" class="form-text text-muted"></small>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="repetirContrasena" class="form-label">Repetir Nueva Contraseña</label>
              <input type="password" class="form-control" id="repetirContrasena" placeholder="Repite la nueva contraseña" autocomplete="new-password">
              <div class="invalid-feedback" id="repeatPasswordFeedback"></div>
            </div>
          </div>
          <div class="d-flex justify-content-center mt-4">
            <button type="submit" class="btn btn-primary-custom">Guardar</button>
          </div>
        </form>
      </div>
    </section>
  </section>
</section>

<!-- Modal para Seleccionar Icono -->
<div class="modal fade" id="modalSelectIcon" tabindex="-1" aria-labelledby="modalSelectIconLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-icon-selection">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalSelectIconLabel">Seleccionar Icono de Perfil</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body" style="background-color: aliceblue;">
        <div class="icon-grid" id="modalIconGrid">
          <!-- Los iconos se cargarán aquí dinámicamente -->
          <p class="text-muted text-center">Cargando iconos...</p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary-custom" id="confirmIconSelectionBtn" style="border-radius: 25px;">Seleccionar</button>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<!-- Asegúrate de tener Boxicons CSS link en tu layout o head principal -->
<!-- <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'> -->

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001'; // Adjust this to your backend URL

  const availableIcons = [
    'bx bx-user-circle', 'bx bx-user', 'bx bx-group', 'bx bx-id-card', 'bx bx-badge',
    'bx bx-book-reader', 'bx bx-pen', 'bx bx-pencil', 'bx bx-bulb', 'bx bx-medal',
    'bx bx-briefcase', 'bx bx-award', 'bx bx-code-alt', 'bx bx-shield-alt-2', 'bx bx-globe',
    'bx bxs-face-mask', 'bx bxs-user-account', 'bx bxs-graduation', 'bx bxs-crown',
    'bx bx-male', 'bx bx-female', 'bx bx-happy', 'bx bx-happy-alt', 'bx bx-wink-smile',
    'bx bx-cool', 'bx bx-ghost', 'bx bx-bot', 'bx bx-code', 'bx bx-terminal',
    'bx bx-test-tube', 'bx bx-atom', 'bx bx-chart', 'bx bx-pie-chart-alt', 'bx bx-line-chart',
    // --- NEW ICONS ADDED FOR CHARACTERS/ROLES that should work ---
    'bx bxs-mask',          // Mask (filled)
    'bx bxs-hand',          // Hand (filled)
    'bx bxs-rocket',        // Rocket (filled)
    'bx bxs-shield',        // Shield (filled)
    'bx bxs-magic-wand',    // Magic wand (filled)
    'bx bxs-meteor',        // Meteor (filled)
    'bx bxs-game',          // Game controller (filled)
    'bx bxs-cat',           // Cat (filled)
    'bx bxs-dog',           // Dog (filled)      // Robot (filled)
    'bx bxs-castle',        // Castle (filled)        // Dragon (filled)
    'bx bxs-skull',         // Skull (filled)
    'bx bxs-zap',           // Lightning bolt (filled)
    'bx bxs-first-aid',     // First aid cross (filled)
    'bx bxs-star-half',     // Half star (filled)
    'bx bx-dizzy',          // Dizzy
    'bx bx-run',            // Run
    'bx bx-walk',           // Walk
    'bx bx-swim',           // Swim
    'bx bx-injection',      // Injection
    'bx bx-target-lock',    // Target lock
    'bx bx-mask',           // Mask (outline)
    'bx bx-crown',          // Crown (outline)
    'bx bx-shield-alt',     // Shield (outline)        // Skull (outline)
    'bx bx-crosshair',      // Crosshair
    'bx bx-cube',           // Cube
    'bx bx-cube-alt',       // Alternate cube
    'bx bx-planet',         // Planet
    'bx bx-joystick',       // Joystick
    'bx bx-fingerprint',    // Fingerprint
    'bx bx-dna',            // DNA
    'bx bx-brain',          // Brain
    'bx bx-bug',            // Bug
    'bx bx-user-pin',       // User pin
    'bx bx-user-voice',     // User voice
    'bx bx-user-x',         // User X
    'bx bxs-user-pin',      // User pin (filled)
    'bx bxs-user-voice',    // User voice (filled)
    'bx bxs-user-x'         // User X (filled)
  ];

  let currentUserId = null;
  let selectedIconClassForModal = ''; // For selection within the modal
  let currentSavedIconClass = 'bx bx-user-circle'; // Default icon on load (from DB)

  // Global element declarations to prevent ReferenceError
  let oldContrasenaInput;
  let contrasenaInput;
  let repetirContrasenaInput;
  let passwordStrengthFeedback;

  function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show fixed-top mx-auto mt-3 w-75`;
    alertDiv.role = 'alert';
    alertDiv.style.maxWidth = '400px';
    document.body.appendChild(alertDiv);
    alertDiv.textContent = message;
    setTimeout(() => alertDiv.remove(), 5000);
  }

  // Auxiliary functions for inline validation errors
  function mostrarError(elemento, mensaje) {
      elemento.classList.add('is-invalid');
      let feedbackElement = elemento.nextElementSibling;
      if (!feedbackElement || !feedbackElement.classList.contains('invalid-feedback')) {
          feedbackElement = elemento.closest('.mb-3')?.querySelector('.invalid-feedback');
      }
      if (feedbackElement) {
          feedbackElement.textContent = mensaje;
          feedbackElement.style.display = 'block';
      }
  }

  function limpiarError(elemento) {
      elemento.classList.remove('is-invalid');
      let feedbackElement = elemento.nextElementSibling;
      if (!feedbackElement || !feedbackElement.classList.contains('invalid-feedback')) {
          feedbackElement = elemento.closest('.mb-3')?.querySelector('.invalid-feedback');
      }
      if (feedbackElement) {
          feedbackElement.textContent = '';
          feedbackElement.style.display = 'none';
      }
  }

  async function fetchUserProfile() {
    try {
      const sessionResponse = await fetch(`${API_BASE_URL}/me`, {
        credentials: 'include'
      });
      const sessionData = await sessionResponse.json();

      if (!sessionData.id_usuario) {
        console.warn("No user ID obtained from session. Using ID 1 as fallback.");
        currentUserId = '1';
      } else {
        currentUserId = sessionData.id_usuario;
      }
      
      console.log("Fetching user profile for ID:", currentUserId);

      const response = await fetch(`${API_BASE_URL}/usuarios/${currentUserId}`, {
        credentials: 'include'
      });

      if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Could not load profile information.');
      }

      const user = await response.json();
      console.log("User data received:", user);

      // Display data in view mode
      document.getElementById('userName').textContent = `${user.primer_nombre || ''} ${user.segundo_nombre || ''} ${user.primer_apellido || ''} ${user.segundo_apellido || ''}`.trim();
      document.getElementById('userCedula').textContent = user.cedula || 'N/A';
      document.getElementById('userEstado').textContent = user.estado_residencia || 'N/A';
      document.getElementById('userCiudad').textContent = user.ciudad || 'N/A';
      document.getElementById('userDireccion').textContent = user.direccion || 'N/A';
      document.getElementById('userEmail').textContent = user.correo_electronico || 'N/A';

      // **UPDATED**: Update profile display icon
      const userProfileDisplayIcon = document.getElementById('userProfileDisplayIcon');
      if (userProfileDisplayIcon && user.profile_icon_class) {
        userProfileDisplayIcon.className = user.profile_icon_class + ' profile-avatar-icon';
        currentSavedIconClass = user.profile_icon_class; // Save current icon from DB
      } else if (userProfileDisplayIcon) {
        userProfileDisplayIcon.className = 'bx bx-user-circle profile-avatar-icon'; // Default icon
        currentSavedIconClass = 'bx bx-user-circle';
      }

      // Fill edit form with a small delay to try to avoid browser autocomplete
      document.getElementById('primerNombre').value = user.primer_nombre || '';
      document.getElementById('segundoNombre').value = user.segundo_nombre || '';
      document.getElementById('primerApellido').value = user.primer_apellido || '';
      document.getElementById('segundoApellido').value = user.segundo_apellido || '';
      
      setTimeout(() => {
          document.getElementById('correoElectronico').value = user.correo_electronico || '';
          document.getElementById('direccion').value = user.direccion || '';
      }, 100); 

      // Update icon in the form's edit view
      const currentEditProfileIcon = document.getElementById('currentEditProfileIcon');
      if (currentEditProfileIcon) {
        currentEditProfileIcon.className = currentSavedIconClass + ' profile-display-icon'; 
      }

      // Passwords are always cleared on load and when opening the edit form
      // Ensure elements exist before attempting to access .value or .textContent
      if (oldContrasenaInput) oldContrasenaInput.value = ''; 
      if (contrasenaInput) contrasenaInput.value = '';
      if (repetirContrasenaInput) repetirContrasenaInput.value = '';
      if (passwordStrengthFeedback) passwordStrengthFeedback.textContent = ''; 
      if (contrasenaInput) limpiarError(contrasenaInput);
      if (repetirContrasenaInput) limpiarError(repetirContrasenaInput);


    } catch (error) {
      console.error('Error loading profile:', error);
      showAlert('Error loading your profile.', 'danger');
    }
  }

  // Function to render the icon grid in the modal
  function renderIconGrid(targetElementId, initialSelectedIcon) {
    const iconGrid = document.getElementById(targetElementId);
    if (!iconGrid) return;

    iconGrid.innerHTML = ''; // Clear any existing content

    availableIcons.forEach(iconClass => {
      const iconWrapper = document.createElement('div');
      iconWrapper.className = 'icon-item';
      if (iconClass === initialSelectedIcon) {
        iconWrapper.classList.add('selected');
      }
      iconWrapper.innerHTML = `<i class="${iconClass}"></i>`;
      iconWrapper.addEventListener('click', () => {
        const previouslySelected = iconGrid.querySelector('.icon-item.selected');
        if (previouslySelected) {
          previouslySelected.classList.remove('selected');
        }
        iconWrapper.classList.add('selected');
        selectedIconClassForModal = iconClass; // Update modal selection
      });
      iconGrid.appendChild(iconWrapper);
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const profileView = document.getElementById('profileView');
    const profileEdit = document.getElementById('profileEdit');
    const editProfileBtn = document.getElementById('editProfileBtn');
    const profileEditForm = document.getElementById('profileEditForm');
    const openIconSelectionBtn = document.getElementById('openIconSelectionBtn');
    const modalSelectIcon = new bootstrap.Modal(document.getElementById('modalSelectIcon'));
    const confirmIconSelectionBtn = document.getElementById('confirmIconSelectionBtn');

    // Assign elements to global variables within DOMContentLoaded
    oldContrasenaInput = document.getElementById('oldContrasena');
    contrasenaInput = document.getElementById('contrasena');
    repetirContrasenaInput = document.getElementById('repetirContrasena');
    passwordStrengthFeedback = document.getElementById('passwordStrength');
    const correoElectronicoInput = document.getElementById('correoElectronico');
    const direccionInput = document.getElementById('direccion');


    await fetchUserProfile(); // Initial profile load

    editProfileBtn.addEventListener('click', (e) => {
      e.preventDefault();
      profileView.style.display = 'none';
      profileEdit.style.display = 'block';
      document.querySelector('.profile-header-card .welcome-search-data__title').textContent = 'Editar Perfil';

      // **IMPORTANT**: Do not call fetchUserProfile() here.
      // Fields are already loaded from the initial DOMContentLoaded.
      // Force clear passwords immediately
      if (oldContrasenaInput) oldContrasenaInput.value = '';
      if (contrasenaInput) contrasenaInput.value = '';
      if (repetirContrasenaInput) repetirContrasenaInput.value = '';
      if (passwordStrengthFeedback) passwordStrengthFeedback.textContent = '';
      if (contrasenaInput) limpiarError(contrasenaInput);
      if (repetirContrasenaInput) limpiarError(repetirContrasenaInput);
    });

    // Event listener for "Change Profile Icon" button
    if (openIconSelectionBtn) {
      openIconSelectionBtn.addEventListener('click', () => {
        // Initialize modal selection with the currently saved icon from DB
        selectedIconClassForModal = currentSavedIconClass; 
        renderIconGrid('modalIconGrid', selectedIconClassForModal);
        modalSelectIcon.show();
      });
    }

    // Event listener to confirm icon selection in the modal
    if (confirmIconSelectionBtn) {
      confirmIconSelectionBtn.addEventListener('click', async () => {
        // When selection is confirmed in the modal, only the visible icon in the edit view is updated
        // and the class is saved for the final form submission.
        const currentEditProfileIcon = document.getElementById('currentEditProfileIcon');
        if (currentEditProfileIcon && selectedIconClassForModal) {
          currentEditProfileIcon.className = selectedIconClassForModal + ' profile-display-icon';
          currentSavedIconClass = selectedIconClassForModal; // Update the variable that will be sent
        }
        modalSelectIcon.hide();
      });
    }
     document.querySelectorAll(".modal-backdrop").forEach((backdropEl) => {
          backdropEl.remove();
        });

    // Password strength validation logic for New Password
    if (contrasenaInput) { // Ensure element exists before adding listener
        contrasenaInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;
            let feedback = [];

            if (password.length >= 8) {
                strength += 1;
            } else {
                feedback.push('At least 8 characters');
            }
            if (/[A-Z]/.test(password)) {
                strength += 1;
            } else {
                feedback.push('One uppercase letter');
            }
            if (/[a-z]/.test(password)) {
                strength += 1;
            } else {
                feedback.push('One lowercase letter');
            }
            if (/[0-9]/.test(password)) {
                strength += 1;
            } else {
                feedback.push('One number');
            }
            if (/[^A-Za-z0-9]/.test(password)) {
                strength += 1;
            } else {
                feedback.push('One special character');
            }

            if (password.length === 0) {
                if (passwordStrengthFeedback) passwordStrengthFeedback.textContent = '';
                limpiarError(contrasenaInput);
                return;
            }

            let strengthText = '';
            let color = '';

            if (strength === 5) {
                strengthText = 'Excellent!';
                color = 'green';
                limpiarError(contrasenaInput);
            } else if (strength >= 3) {
                strengthText = 'Good';
                color = 'orange';
                limpiarError(contrasenaInput);
            } else {
                strengthText = 'Weak';
                color = 'red';
                mostrarError(contrasenaInput, 'Weak password: ' + feedback.join(', '));
            }
            if (passwordStrengthFeedback) {
                passwordStrengthFeedback.textContent = `Strength: ${strengthText}`;
                passwordStrengthFeedback.style.color = color;
            }
        });
    }

    // Validate password match
    if (repetirContrasenaInput) { // Ensure element exists before adding listener
        repetirContrasenaInput.addEventListener('input', function() {
            if (contrasenaInput.value !== repetirContrasenaInput.value) {
                mostrarError(repetirContrasenaInput, 'Passwords do not match.');
            } else {
                limpiarError(repetirContrasenaInput);
            }
        });
    }

    // Revalidate password repeat if new password changes
    if (contrasenaInput) { // Ensure element exists before adding listener
        contrasenaInput.addEventListener('input', function() {
            if (repetirContrasenaInput && repetirContrasenaInput.value !== '') { // Only revalidate if something is already in confirm
                 if (contrasenaInput.value !== repetirContrasenaInput.value) {
                    mostrarError(repetirContrasenaInput, 'Passwords do not match.');
                } else {
                    limpiarError(repetirContrasenaInput);
                }
            }
        });
    }

    // Real-time validation to prevent numbers in names and surnames
    function soloLetrasInputHandler(e) {
      const valor = e.target.value;
      const soloLetras = valor.replace(/[^A-Za-zÁÉÍÓÚáéíóúÑñ\s]/g, '');
      if (valor !== soloLetras) {
        e.target.value = soloLetras;
      }
    }
    document.getElementById('primerNombre').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('segundoNombre').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('primerApellido').addEventListener('input', soloLetrasInputHandler);
    document.getElementById('segundoApellido').addEventListener('input', soloLetrasInputHandler);

    profileEditForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const primerNombreInput = document.getElementById('primerNombre');
      const segundoNombreInput = document.getElementById('segundoNombre');
      const primerApellidoInput = document.getElementById('primerApellido');
      const segundoApellidoInput = document.getElementById('segundoApellido');
      const correoElectronicoInput = document.getElementById('correoElectronico');
      const direccionInput = document.getElementById('direccion');

      const primerNombre = primerNombreInput.value.trim();
      const segundoNombre = segundoNombreInput.value.trim();
      const primerApellido = primerApellidoInput.value.trim();
      const segundoApellido = segundoApellidoInput.value.trim();
      const correoElectronico = correoElectronicoInput.value.trim();
      const direccion = direccionInput.value.trim();
      const oldContrasena = oldContrasenaInput ? oldContrasenaInput.value : '';
      const contrasena = contrasenaInput ? contrasenaInput.value : '';
      const repetirContrasena = repetirContrasenaInput ? repetirContrasenaInput.value : '';

      let valid = true;
      const soloLetrasRegex = /^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]+$/;
      function validarCampoTexto(input, nombreCampo) {
        if (!input.value.trim()) {
          mostrarError(input, `The ${nombreCampo} field is required.`);
          valid = false;
        } else if (!soloLetrasRegex.test(input.value.trim())) {
          mostrarError(input, `The ${nombreCampo} field must contain only letters.`);
          valid = false;
        } else {
          limpiarError(input);
        }
      }
      validarCampoTexto(primerNombreInput, 'First Name');
      validarCampoTexto(segundoNombreInput, 'Second Name');
      validarCampoTexto(primerApellidoInput, 'First Last Name');
      validarCampoTexto(segundoApellidoInput, 'Second Last Name');
      if (!correoElectronico) {
        mostrarError(correoElectronicoInput, 'The Email field is required.');
        valid = false;
      } else {
        limpiarError(correoElectronicoInput);
      }
      if (!direccion) {
        mostrarError(direccionInput, 'The Address field is required.');
        valid = false;
      } else {
        limpiarError(direccionInput);
      }
      if (!valid) {
        showAlert('No field can be empty, please fill all fields.', 'danger');
        return;
      }

      const updatedData = {
        primer_nombre: primerNombre,
        segundo_nombre: segundoNombre,
        primer_apellido: primerApellido,
        segundo_apellido: segundoApellido,
        correo_electronico: correoElectronico,
        direccion: direccion,
        profile_icon_class: currentSavedIconClass // NEW: Add the selected icon
      };

      // **IMPORTANT FOR DEBUGGING**: Log the data to be sent
      console.log('Profile data to be sent to backend:', updatedData);


      // Password validation and update logic
      if (oldContrasena || contrasena || repetirContrasena) { 
        if (!oldContrasena) {
          showAlert('You must enter your current password to change it.', 'danger');
          return;
        }
        if (contrasena !== repetirContrasena) {
          showAlert('New password and confirmation do not match.', 'danger');
          return;
        }
        if (!contrasena) {
             showAlert('You must enter the new password if you want to change it.', 'danger');
             return;
        }
        if (contrasenaInput && contrasenaInput.classList.contains('is-invalid')) {
            showAlert('The new password is too weak.', 'danger');
            return;
        }

        updatedData.old_contrasena = oldContrasena;
        updatedData.contrasena = contrasena; 
      }


      try {
        const response = await fetch(`${API_BASE_URL}/usuarios/${currentUserId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify(updatedData)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error updating profile.');
        }

        showAlert('Profile updated successfully.', 'success');
        // Clear password fields after successful update
        if (oldContrasenaInput) oldContrasenaInput.value = '';
        if (contrasenaInput) contrasenaInput.value = '';
        if (repetirContrasenaInput) repetirContrasenaInput.value = '';
        if (passwordStrengthFeedback) passwordStrengthFeedback.textContent = ''; 
        if (contrasenaInput) limpiarError(contrasenaInput);
        if (repetirContrasenaInput) limpiarError(repetirContrasenaInput);


        await fetchUserProfile(); // Reload profile data for view
        profileEdit.style.display = 'none';
        profileView.style.display = 'block';
        document.querySelector('.profile-header-card .welcome-search-data__title').textContent = 'My Profile'; 
      } catch (error) {
        console.error('Error updating profile:', error);
        showAlert(error.message || 'An error occurred while updating the profile.', 'danger');
      }
    });

    // fetchUserProfile(); // Already called at the beginning of DOMContentLoaded
  });
</script>
