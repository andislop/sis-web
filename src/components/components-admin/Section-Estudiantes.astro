---
import "../../style/style-admin/estudiantes.css"; /* Ahora solo importa est-c.txt */
---

<section class="data-content-section">
  <!-- Nueva sección del Título "Estudiantes" con el estilo de la tarjeta de bienvenida -->
  <section class="estudiantes-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Estudiantes</h2>
    </div>
  </section>

  <!-- Sección de Tarjeta Consolidada de Resumen de Estudiantes -->
  <section class="content-info-data">
    <section class="data-general-control">
      <!-- Tarjeta Consolidada de Estudiantes -->
      <div class="registro-control consolidated-students-card">
        <div class="card-icon-title">
          <i class="bx bxs-group"></i> <!-- Icono para grupo de estudiantes -->
          <h5 class="card-title">Resumen de Estudiantes</h5>
        </div>
        <div class="students-summary-grid">
          <div class="summary-item">
            <span class="summary-count" id="totalStudentsCount">0</span>
            <span class="summary-label">Total</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="activeStudentsCount">0</span>
            <span class="summary-label">Activos</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="inactiveStudentsCount">0</span>
            <span class="summary-label">Inactivos</span>
          </div>
          <div class="btn-accion-control">
          <button class="btn-card" data-bs-toggle="modal" data-bs-target="#modalAgregarEstudiante">
            <i class="bx bx-plus"></i> Agregar Estudiante
          </button>
        </div>
        </div>
      </div>
    </section>
  </section>

  <!-- La tabla de Estudiantes -->
  <div class="display-table" id="table1">
    <!-- Campo de búsqueda para estudiantes -->
    <div class="d-flex justify-content-end mb-3">
      <input type="text" id="searchStudentInput" class="form-control w-25" placeholder="Buscar estudiante por nombre...">
    </div>
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th>
            <th scope="col">Cédula</th>
            <th scope="col">Nombre</th>
            <th scope="col">Apellido</th>
            <th scope="col">Estado</th>
            <th scope="col">Última Conexión</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="studentsTableBody">
          <tr>
            <td colspan="8" class="text-center">Cargando estudiantes...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControls" class="pagination text-center mt-3"></div>
  </div>
</section>

<!-- Modal para Ver Más Información del Estudiante -->
<div class="modal fade" id="modalVerMasInformacionEstudiante" tabindex="-1" aria-labelledby="modalVerMasInformacionEstudianteLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-custom-width modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalVerMasInformacionEstudianteLabel">Detalles del Estudiante</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <h6 class="section-title">Información Personal</h6>
        <p><strong>Cédula:</strong> <span id="detalleCedula"></span></p>
        <p><strong>Nombre Completo:</strong> <span id="detalleNombreCompleto"></span></p>
        <p><strong>Correo:</strong> <span id="detalleCorreo"></span></p>
        <p><strong>Teléfono:</strong> <span id="detalleTelefono"></span></p>
        <p><strong>Dirección:</strong> <span id="detalleDireccion"></span></p>
        <p><strong>Estado del Estudiante:</strong> <span id="detalleEstadoEstudiante"></span></p>
        <p><strong>Última Conexión:</strong> <span id="detalleUltimaConexion"></span></p>

        <h6 class="section-title mt-4">Información Académica</h6>
        <div id="tablaAcademicaEstudiante"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Estudiantes -->
<div class="modal fade" id="modalEditarEstudiante" tabindex="-1" aria-labelledby="modalEditarEstudianteLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarEstudianteLabel">Editar Estudiante</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarEstudiante">
          <input type="hidden" id="editIdUsuario" />
          <h6 class="section-title">Información Personal</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editCedula" class="form-label">Cédula</label>
              <input type="text" class="form-control" id="editCedula" placeholder="Ingrese su cédula" readonly />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editCorreo" class="form-label">Correo</label>
              <input type="email" class="form-control" id="editCorreo" placeholder="Ingrese su correo electrónico" />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editPrimerNombre" class="form-label">Primer Nombre</label>
              <input type="text" class="form-control" id="editPrimerNombre" placeholder="Ingrese su primer nombre" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editSegundoNombre" class="form-label">Segundo Nombre</label>
              <input type="text" class="form-control" id="editSegundoNombre" placeholder="Ingrese su segundo nombre" />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editPrimerApellido" class="form-label">Primer Apellido</label>
              <input type="text" class="form-control" id="editPrimerApellido" placeholder="Ingrese su primer apellido" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editSegundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="editSegundoApellido" placeholder="Ingrese su segundo apellido" />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editTelefono" class="form-label">Teléfono</label>
              <div class="d-flex align-items-center gap-2">
                  <select class="form-select codigo-area-edit" style="width: 80px;">
                    <option value="0412">0412</option>
                    <option value="0422">0422</option>
                    <option value="0424">0424</option>
                    <option value="0414">0414</option>
                    <option value="0416">0416</option>
                    <option value="0426">0426</option>
                  </select>
                  <span class="separador-telefono">-</span>
                  <input
                    type="tel"
                    class="form-control numero-telefono-edit"
                    placeholder="1234567"
                    pattern="[0-9]{7}"
                    title="Debe contener 7 dígitos"
                  >
                  <div class="invalid-feedback"></div>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editPeriodoAcademico" class="form-label">Periodo Académico</label>
              <select class="form-select" id="editPeriodoAcademico">
                <option value="">Seleccione un periodo</option>
                <!-- Opciones se cargarán dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <h6 class="section-title mt-4">Ubicación</h6>
          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="editDireccion" class="form-label">Dirección</label>
              <input type="text" class="form-control" id="editDireccion" placeholder="Ingrese su dirección" />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          
          <div class="d-flex justify-content-end mt-4 gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary" id="btnGuardarEdicion">Guardar Cambios</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Agregar Estudiante (NUEVO) -->
<div class="modal fade" id="modalAgregarEstudiante" tabindex="-1" aria-labelledby="modalAgregarEstudianteLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAgregarEstudianteLabel">Agregar Nuevo Estudiante</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAgregarEstudiante">
          <!-- Información Personal -->
          <h6 class="section-title">Información Personal</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addCedula" class="form-label">Cédula <span class="campo-obligatorio">*</span></label>
              <input type="tel" class="form-control" id="addCedula" placeholder="Ejemplo: 123456789" pattern="[0-9]{6,15}" maxlength="15" required />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPrimerNombre" class="form-label">Primer Nombre <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addPrimerNombre" placeholder="Primer Nombre" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]+" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addSegundoNombre" class="form-label">Segundo Nombre</label>
              <input type="text" class="form-control" id="addSegundoNombre" placeholder="Segundo Nombre" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPrimerApellido" class="form-label">Primer Apellido <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addPrimerApellido" placeholder="Primer Apellido" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]+" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addSegundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="addSegundoApellido" placeholder="Segundo Apellido" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addTelefono" class="form-label">Teléfono <span class="campo-obligatorio">*</span></label>
              <div class="d-flex align-items-center gap-2">
                <select class="form-select codigo-area" id="addCodigoArea" style="width: 80px;" required>
                  <option value="0412">0412</option>
                  <option value="0422">0422</option>
                  <option value="0424">0424</option>
                  <option value="0414">0414</option>
                  <option value="0416">0416</option>
                  <option value="0426">0426</option>
                </select>
                <span class="separador-telefono">-</span>
                <input
                  type="tel"
                  class="form-control numero-telefono"
                  id="addNumeroTelefono"
                  placeholder="1234567"
                  pattern="[0-9]{7}"
                  title="Debe contener 7 dígitos"
                  required
                  style="flex-grow: 1;"
                />
              </div>
              <div class="invalid-feedback"></div>
            </div>
          </div>
          
          <!-- Ubicación -->
          <h6 class="section-title mt-4">Ubicación</h6>
          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="addDireccion" class="form-label">Dirección <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addDireccion" placeholder="Ingrese su dirección" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addEstado" class="form-label">Estado <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addEstado" required>
                <option value="" selected disabled>Seleccione un estado</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addCiudad" class="form-label">Ciudad <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addCiudad" required disabled>
                <option value="" selected disabled>Primero seleccione un estado</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <!-- Información Académica (NUEVO) -->
          <h6 class="section-title mt-4">Información Académica</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addPeriodoAcademico" class="form-label">Período Académico <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addPeriodoAcademico" required>
                <option value="" selected disabled>Selecciona un período</option>
                <!-- Opciones de período se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addCurso" class="form-label">Curso <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addCurso" required disabled>
                <option value="" selected disabled>Selecciona un curso</option>
                <!-- Opciones de curso se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addMateria" class="form-label">Materia <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addMateria" required disabled>
                <option value="" selected disabled>Selecciona una materia</option>
                <!-- Opciones de materia se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addSeccion" class="form-label">Sección <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addSeccion" required disabled>
                <option value="" selected disabled>Selecciona una sección</option>
                <!-- Opciones de sección se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>


          <!-- Credenciales del Usuario -->
          <h6 class="section-title mt-4">Credenciales del Usuario</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addEmail" class="form-label">Correo Electrónico <span class="campo-obligatorio">*</span></label>
              <input type="email" class="form-control" id="addEmail" placeholder="ejemplo.venezuela@gmail.com" required />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPassword" class="form-label">Contraseña <span class="campo-obligatorio">*</span></label>
              <div class="input-group">
                <input type="password" class="form-control" id="addPassword" placeholder="Tu Contraseña" required />
                <button class="btn btn-outline-secondary toggle-password" type="button" data-target="addPassword">
                  <i class="bx bx-hide"></i>
                </button>
              </div>
              <!-- CAMBIO CRÍTICO: invalid-feedback para la contraseña FUERA del input-group -->
              <div class="invalid-feedback"></div>
              <!-- small para la fortaleza de contraseña FUERA del input-group -->
              <small id="addPasswordStrength" class="form-text text-muted"></small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addConfirmPassword" class="form-label">Confirmar contraseña <span class="campo-obligatorio">*</span></label>
              <div class="input-group">
                <input type="password" class="form-control" id="addConfirmPassword" placeholder="Confirma tu Contraseña" required />
                <button class="btn btn-outline-secondary toggle-password" type="button" data-target="addConfirmPassword">
                  <i class="bx bx-hide"></i>
                </button>
              </div>
              <!-- CAMBIO CRÍTICO: invalid-feedback para confirmar contraseña FUERA del input-group -->
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="d-flex justify-content-end mt-4 gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary" id="btnGuardarNuevoEstudiante">Agregar Estudiante</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    const itemsPerPage = 5; 
    const studentsTableBody = document.getElementById('studentsTableBody');
    const paginationControls = document.getElementById('paginationControls');

    // Contadores de estudiantes
    const totalStudentsCount = document.getElementById('totalStudentsCount');
    const activeStudentsCount = document.getElementById('activeStudentsCount');
    const inactiveStudentsCount = document.getElementById('inactiveStudentsCount');

    // Elemento del campo de búsqueda
    const searchStudentInput = document.getElementById('searchStudentInput');


    // Elementos del modal "Ver Más Información"
    const modalVerMasInformacionEstudiante = new bootstrap.Modal(document.getElementById('modalVerMasInformacionEstudiante'));
    const detalleCedula = document.getElementById('detalleCedula');
    const detalleNombreCompleto = document.getElementById('detalleNombreCompleto');
    const detalleCorreo = document.getElementById('detalleCorreo');
    const detalleTelefono = document.getElementById('detalleTelefono');
    const detalleDireccion = document.getElementById('detalleDireccion');
    const detalleEstadoEstudiante = document.getElementById('detalleEstadoEstudiante');
    const detalleUltimaConexion = document.getElementById('detalleUltimaConexion');
    const detallePeriodoAcademico = document.getElementById('detallePeriodoAcademico');
    const detalleSeccion = document.getElementById('detalleSeccion');
    const detalleCursos = document.getElementById('detalleCursos');
    const detalleMaterias = document.getElementById('detalleMaterias');
    const detalleEstadoMateria = document.getElementById('detalleEstadoMateria');

    // Elementos del Modal Editar Estudiantes
    const modalEditarEstudiante = new bootstrap.Modal(document.getElementById('modalEditarEstudiante'));
    const formEditarEstudiante = document.getElementById('formEditarEstudiante');
    const editIdUsuario = document.getElementById('editIdUsuario');
    const editCedula = document.getElementById('editCedula');
    const editCorreo = document.getElementById('editCorreo');
    const editPrimerNombre = document.getElementById('editPrimerNombre');
    const editSegundoNombre = document.getElementById('editSegundoNombre');
    const editPrimerApellido = document.getElementById('editPrimerApellido');
    const editSegundoApellido = document.getElementById('editSegundoApellido');
    const editCodigoAreaSelect = document.querySelector('#modalEditarEstudiante .codigo-area-edit');
    const editNumeroTelefonoInput = document.querySelector('#modalEditarEstudiante .numero-telefono-edit');
    const editDireccion = document.getElementById('editDireccion');
    const editPeriodoAcademico = document.getElementById('editPeriodoAcademico'); 

    const btnGuardarEdicion = document.getElementById('btnGuardarEdicion');

    // Elementos del NUEVO Modal Agregar Estudiante
    const modalAgregarEstudiante = new bootstrap.Modal(document.getElementById('modalAgregarEstudiante'));
    const formAgregarEstudiante = document.getElementById('formAgregarEstudiante');
    const addCedula = document.getElementById('addCedula');
    const addPrimerNombre = document.getElementById('addPrimerNombre');
    const addSegundoNombre = document.getElementById('addSegundoNombre');
    const addPrimerApellido = document.getElementById('addPrimerApellido');
    const addSegundoApellido = document.getElementById('addSegundoApellido');
    const addCodigoArea = document.getElementById('addCodigoArea');
    const addNumeroTelefono = document.getElementById('addNumeroTelefono');
    const addDireccion = document.getElementById('addDireccion');
    const addEstado = document.getElementById('addEstado');
    const addCiudad = document.getElementById('addCiudad');
    const addPeriodoAcademico = document.getElementById('addPeriodoAcademico'); // Nuevo
    const addCurso = document.getElementById('addCurso'); // Nuevo
    const addMateria = document.getElementById('addMateria'); // Nuevo
    const addSeccion = document.getElementById('addSeccion'); // Nuevo
    const addEmail = document.getElementById('addEmail');
    const addPassword = document.getElementById('addPassword');
    const addConfirmPassword = document.getElementById('addConfirmPassword');
    const addPasswordStrength = document.getElementById('addPasswordStrength');
    const btnGuardarNuevoEstudiante = document.getElementById('btnGuardarNuevoEstudiante');


    // Cargar datos al abrir el modal de Editar Estudiantes
    modalEditarEstudiante._element.addEventListener('shown.bs.modal', async function() {
      await cargarPeriodos('edit'); 

    });

    // Cargar datos al abrir el NUEVO modal de Agregar Estudiante
    modalAgregarEstudiante._element.addEventListener('shown.bs.modal', async function() {
        formAgregarEstudiante.reset(); // Limpiar el formulario al abrir
        limpiarTodosLosErrores(formAgregarEstudiante);
        addCiudad.innerHTML = '<option value="" selected disabled>Primero seleccione un estado</option>';
        addCiudad.disabled = true;
        addCurso.innerHTML = '<option value="" selected disabled>Primero seleccione un periodo</option>';
        addCurso.disabled = true;
        addMateria.innerHTML = '<option value="" selected disabled>Primero seleccione un curso</option>';
        addMateria.disabled = true;
        addSeccion.innerHTML = '<option value="" selected disabled>Primero seleccione una materia</option>';
        addSeccion.disabled = true;
        addPasswordStrength.textContent = ''; // Limpiar mensaje de fortaleza de contraseña
        
        await loadAcademicPeriods(); // Cargar periodos para el modal de agregar (renombrado)
        await cargarEstados('add'); // Cargar estados para el modal de agregar
    });


    // Función para cargar periodos académicos (adaptada para ambos modales)
    async function cargarPeriodos(prefix = '') {
        const targetSelect = prefix === 'edit' ? editPeriodoAcademico : addPeriodoAcademico;
        if (!targetSelect) return;

        try {
            const response = await fetch('http://localhost:3001/api/periodos');
            if (!response.ok) throw new Error('Error al cargar períodos');
            const periodos = await response.json();

            // Guardar el valor actual antes de limpiar (solo relevante para edición)
            const currentValue = targetSelect.value;

            // Limpiar y reconstruir opciones
            targetSelect.innerHTML = '';
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = `Seleccione un periodo`;
            defaultOption.disabled = true;
            defaultOption.selected = true;
            targetSelect.appendChild(defaultOption);

            periodos.forEach(periodo => {
                const option = document.createElement('option');
                option.value = periodo.id_periodo;
                option.textContent = periodo.periodo; // Cambiado de 'periodo' a 'nombre_periodo'
                targetSelect.appendChild(option);
            });

            // Restaurar el valor si existe (solo relevante para edición)
            if (prefix === 'edit' && currentValue && periodos.some(p => p.id_periodo.toString() === currentValue)) {
                targetSelect.value = currentValue;
            }
        } catch (error) {
            console.error('Error:', error);
            targetSelect.innerHTML = '<option value="">Error cargando períodos</option>';
            // No lanzar el error, solo mostrarlo en consola y UI
            mostrarErrorAlUsuario("Error al cargar períodos. Intente recargar la página.");
        }
    }

    // Función para cargar estados (adaptada para ambos modales)
    async function cargarEstados(prefix = '') {
        const targetSelect = prefix === 'edit' ? null : addEstado; // Solo para el modal de agregar
        if (!targetSelect) return;

        targetSelect.disabled = true;
        targetSelect.innerHTML = '<option value="" selected disabled>Cargando estados...</option>';

        try {
            const response = await fetch("http://localhost:3001/api/estados");
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const estados = await response.json();

            targetSelect.innerHTML = '<option value="" selected disabled>Seleccione un estado</option>';
            estados.forEach((estado) => {
                const option = document.createElement("option");
                option.value = estado.id_estado;
                option.textContent = estado.estados;
                targetSelect.appendChild(option);
            });

            targetSelect.disabled = false;
        } catch (error) {
            console.error("Error cargando estados:", error);
            targetSelect.innerHTML = '<option value="" selected disabled>Error al cargar estados</option>';
            mostrarErrorAlUsuario("Error al cargar estados. Intente recargar la página.");
        }
    }

    // Event listener para el select de Estado en el modal de agregar
    addEstado.addEventListener("change", async function () {
        const estadoId = this.value;
        addCiudad.innerHTML = '<option value="" selected disabled>Cargando ciudades...</option>';
        addCiudad.disabled = true;

        if (!estadoId) return;

        try {
            const response = await fetch(`http://localhost:3001/api/estados/${estadoId}/ciudades`);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const ciudades = await response.json();

            addCiudad.innerHTML = '<option value="" selected disabled>Seleccione una ciudad</option>';
            ciudades.forEach((ciudad) => {
                const option = document.createElement("option");
                option.value = ciudad.id_ciudad;
                option.textContent = ciudad.ciudad;
                addCiudad.appendChild(option);
            });

            addCiudad.disabled = false;
        } catch (error) {
            console.error("Error cargando ciudades:", error);
            addCiudad.innerHTML = '<option value="" selected disabled>Error al cargar ciudades</option>';
            mostrarErrorAlUsuario("Error al cargar ciudades. Intente nuevamente.");
        }
    });

    // --- Funciones para cargar Períodos, Cursos, Materias y Secciones (Lógica en cascada) ---
    const API_BASE_URL = 'http://localhost:3001/api';

    let selectedPeriodId = null;
    let selectedCourseId = null;
    let selectedMateriaPeriodoId = null; // Este será el ID que necesitas para usuario_materias
    let selectedSectionId = null;

    // Función para limpiar y deshabilitar un select
    function clearAndDisableSelect(selectElement, defaultOptionText) {
      selectElement.innerHTML = `<option value="">${defaultOptionText}</option>`;
      selectElement.disabled = true;
    }

    // --- 1. Cargar Períodos Académicos al inicio (ya existente, renombrado para claridad) ---
    async function loadAcademicPeriods() {
      try {
        const response = await fetch(`${API_BASE_URL}/periodos`);
        if (!response.ok) throw new Error('Error al cargar períodos.');
        const periods = await response.json();

        clearAndDisableSelect(addPeriodoAcademico, 'Selecciona un período');
        periods.forEach(period => {
          const option = document.createElement('option');
          option.value = period.id_periodo;
          option.textContent = period.periodo; // Asumo 'nombre_periodo' es el campo a mostrar
          addPeriodoAcademico.appendChild(option);
        });
        addPeriodoAcademico.disabled = false;
      } catch (error) {
        console.error('Error al cargar períodos académicos:', error);
        mostrarErrorAlUsuario("Error al cargar períodos académicos. Intente recargar la página.");
      }
    }

    // --- 2. Cargar Cursos basados en el Período seleccionado ---
    async function loadCoursesByPeriod(periodId) {
      clearAndDisableSelect(addCurso, 'Selecciona un curso');
      clearAndDisableSelect(addMateria, 'Selecciona una materia');
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!periodId) return;

      try {
        const response = await fetch(`${API_BASE_URL}/periodos/${periodId}/cursos`); // API: /api/cursos/filter?periodoId=...
        if (!response.ok) throw new Error('Error al cargar cursos.');
        const courses = await response.json();

        courses.forEach(course => {
          const option = document.createElement('option');
          option.value = course.id_curso;
          option.textContent = course.nombre_curso; // Asumo 'nombre_curso' es el campo a mostrar
          addCurso.appendChild(option);
        });
        addCurso.disabled = false;
      } catch (error) {
        console.error('Error al cargar cursos:', error);
        mostrarErrorAlUsuario("Error al cargar cursos. Intente nuevamente.");
      }
    }

    // --- 3. Cargar Materias basadas en el Período y Curso seleccionados ---
    async function loadSubjectsByPeriodAndCourse(periodId, courseId) {
      clearAndDisableSelect(addMateria, 'Selecciona una materia');
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!periodId || !courseId) return;

      try {
        // API: /api/materias/filter?periodoId=...&cursoId=...
        const response = await fetch(`${API_BASE_URL}/materias/filter?periodoId=${periodId}&cursoId=${courseId}`);
        if (!response.ok) throw new Error('Error al cargar materias.');
        const subjects = await response.json();

        subjects.forEach(subject => {
          const option = document.createElement('option');
          // Usamos id_materia_periodo como valor, ya que es lo que necesitas para usuario_materias
          option.value = subject.id_materia_periodo; 
          option.textContent = subject.nombre_materia; // Muestra el nombre de la materia
          addMateria.appendChild(option);
        });
        addMateria.disabled = false;
      }
      catch (error) {
        console.error('Error al cargar materias:', error);
        mostrarErrorAlUsuario("Error al cargar materias. Intente nuevamente.");
      }
    }

    // --- 4. Cargar Secciones basadas en la Materia seleccionada ---
    async function loadSectionsBySubject(materiaId) {
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!materiaId) return;

      try {
        // API: /api/materias/:id_materia/secciones (asumo que esta API existe y filtra por id_materia)
        const response = await fetch(`${API_BASE_URL}/materias/${materiaId}/secciones`);
        if (!response.ok) throw new Error('Error al cargar secciones.');
        const sections = await response.json();

        sections.forEach(section => {
          const option = document.createElement('option');
          option.value = section.id_seccion;
          option.textContent = section.nombre_seccion; // Asumo 'nombre_seccion' es el campo a mostrar
          addSeccion.appendChild(option);
        });
        addSeccion.disabled = false;
      } catch (error) {
        console.error('Error al cargar secciones:', error);
        mostrarErrorAlUsuario("Error al cargar secciones. Intente nuevamente.");
      }
    }


    // Event listener para el select de Periodo Académico en el modal de agregar
    addPeriodoAcademico.addEventListener("change", () => {
        selectedPeriodId = addPeriodoAcademico.value;
        selectedCourseId = null;
        selectedMateriaPeriodoId = null;
        selectedSectionId = null;
        loadCoursesByPeriod(selectedPeriodId);
    });

    // Event listener para el select de Curso en el modal de agregar
    addCurso.addEventListener("change", () => {
        selectedCourseId = addCurso.value;
        selectedMateriaPeriodoId = null;
        selectedSectionId = null;
        loadSubjectsByPeriodAndCourse(selectedPeriodId, selectedCourseId);
    });

    // Event listener para el select de Materia en el modal de agregar
    addMateria.addEventListener("change", () => {
        selectedMateriaPeriodoId = addMateria.value; // Este es el ID_MATERIA_PERIODO
        selectedSectionId = null;
        // Para cargar secciones, necesitamos el ID de la materia, no el id_materia_periodo directamente.
        // Asumo que tu API de materias/filter devuelve también el id_materia.
        // Necesitarías almacenar el id_materia junto con id_materia_periodo en el option value o data-attribute.
        // Si no, necesitarías una API que devuelva id_materia dado un id_materia_periodo.
        // Por ahora, usaré selectedMateriaPeriodoId como si fuera el id_materia para la llamada a secciones.
        loadSectionsBySubject(selectedMateriaPeriodoId); // <<-- REVISAR ESTO SEGÚN TU BACKEND DE SECCIONES
    });

    // Event listener para el select de Sección en el modal de agregar
    addSeccion.addEventListener("change", () => {
        selectedSectionId = addSeccion.value;
        console.log('ID de Sección seleccionado:', selectedSectionId);
    });


    // Validar número de teléfono para edición
    editNumeroTelefonoInput.addEventListener('input', function() {
      this.value = this.value.replace(/\D/g, '').slice(0, 7);
      if (this.value.length !== 7) {
        mostrarError(this, 'Debe contener 7 dígitos');
      } else {
        limpiarError(this);
      }
    });

    // Validar número de teléfono para agregar
    addNumeroTelefono.addEventListener('input', function() {
        this.value = this.value.replace(/\D/g, '').slice(0, 7);
        if (this.value.length !== 7) {
            mostrarError(this, 'Debe contener 7 dígitos.');
        } else {
            limpiarError(this);
        }
    });


    // Validación de nombres y apellidos: no aceptar números y no permitir campos vacíos
    function validateTextOnly(inputElement, fieldName) {
        const value = inputElement.value;
        const regex = /^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/;
        
        if (!regex.test(value)) {
            inputElement.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, "");
            mostrarError(inputElement, `El campo ${fieldName} solo permite letras y espacios.`);
            return false;
        } else if (inputElement.hasAttribute("required") && value.trim() === "") {
            mostrarError(inputElement, `El campo ${fieldName} es obligatorio.`);
            return false;
        } else {
            limpiarError(inputElement);
            return true;
        }
    }

    // Aplicar validación de solo letras a los campos de nombres y apellidos en ambos modales
    [editPrimerNombre, editSegundoNombre, editPrimerApellido, editSegundoApellido,
     addPrimerNombre, addSegundoNombre, addPrimerApellido, addSegundoApellido].forEach(input => {
      if (input) {
        input.addEventListener('input', function() {
          validateTextOnly(this, this.placeholder || this.labels[0].textContent.replace('*', '').trim());
        });
      }
    });

    // Toggle Password Visibility (para ambos modales)
    // CAMBIO: Selector ajustado a '.toggle-password' como en el HTML
    document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", function () {
            const targetId = this.dataset.target;
            const passwordInput = document.getElementById(targetId);
            const icon = this.querySelector("i");

            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                icon.classList.remove("bx-hide");
                icon.classList.add("bx-show");
            } else {
                passwordInput.type = "password";
                icon.classList.remove("bx-show");
                icon.classList.add("bx-hide");
            }
        });
    });

    // Password Strength Validation (para el modal de agregar)
    if (addPassword) { // Asegurarse de que el elemento exista
      addPassword.addEventListener("input", function () {
          const password = this.value;
          let strength = 0;
          let feedback = [];

          const { feedback: passwordErrorElement, strength: strengthFeedbackElement } = getFeedbackElements(this);

          if (password.length >= 8) { strength += 1; } else { feedback.push("Al menos 8 caracteres."); }
          if (/[A-Z]/.test(password)) { strength += 1; } else { feedback.push("Una letra mayúscula."); }
          if (/[a-z]/.test(password)) { strength += 1; } else { feedback.push("Una letra minúscula."); }
          if (/[0-9]/.test(password)) { strength += 1; } else { feedback.push("Un número."); }
          if (/[^A-Za-z0-9]/.test(password)) { strength += 1; } else { feedback.push("Un caracter especial."); }

          if (password.length === 0) {
              if (strengthFeedbackElement) strengthFeedbackElement.textContent = "";
              limpiarError(this); // Limpiar error del input si está vacío
              return;
          }

          let strengthText = "";
          let color = "";

          if (strength === 5) {
              strengthText = "¡Excelente!";
              color = "green";
              limpiarError(this); // Limpiar error del input si es excelente
          } else if (strength >= 3) {
              strengthText = "Buena";
              color = "orange";
              limpiarError(this); // Limpiar error del input si es buena
          } else {
              strengthText = "Débil";
              color = "red";
              // CAMBIO: El mensaje detallado de debilidad se muestra en el invalid-feedback
              mostrarError(
                  this,
                  "Contraseña débil: " + feedback.join(", ")
              );
          }
          // CAMBIO: El mensaje de "Fortaleza: X" se muestra en el small#addPasswordStrength
          if (strengthFeedbackElement) {
            strengthFeedbackElement.textContent = `Fortaleza: ${strengthText}`;
            strengthFeedbackElement.style.color = color;
          }
      });
    }


    // Validar coincidencia de contraseñas (para el modal de agregar)
    if (addConfirmPassword && addPassword) { // Asegurarse de que los elementos existan
      addConfirmPassword.addEventListener("input", function () {
          if (addPassword.value !== addConfirmPassword.value) {
              mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
          } else {
              limpiarError(addConfirmPassword);
          }
      });
      addPassword.addEventListener("input", function () {
          if (addConfirmPassword.value !== "") { // Solo revalida si ya hay algo en confirmar
              if (addPassword.value !== addConfirmPassword.value) {
                  mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
              } else {
                  limpiarError(addConfirmPassword);
              }
          }
      });
    }

    // Validación de unicidad de correo electrónico (Frontend con llamada a la API del Backend) para agregar
    addEmail.addEventListener("blur", async function () {
        const email = this.value.trim();
        if (!email) {
            mostrarError(addEmail, "El correo electrónico es obligatorio.");
            return;
        }

        try {
            const response = await fetch(`http://localhost:3001/api/verificar-correo?email=${encodeURIComponent(email)}`);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const data = await response.json();

            if (data.existe) {
                mostrarError(addEmail, "Este correo electrónico ya está registrado.");
            } else {
                limpiarError(addEmail);
            }
        } catch (error) {
            console.error("Error al verificar el correo electrónico:", error);
            mostrarError(addEmail, "Error al verificar el correo electrónico. Intente de nuevo.");
        }
    });

    // Validación de unicidad de cédula (Frontend con llamada a la API del Backend) para agregar
    addCedula.addEventListener("input", function () {
        this.value = this.value.replace(/\D/g, "").slice(0, 15);
        const cedula = this.value.trim();
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(cedula)) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
        } else {
            limpiarError(addCedula);
        }
    });

    addCedula.addEventListener("blur", async function () {
        const cedula = this.value.trim();
        if (!cedula) {
            mostrarError(addCedula, "La cédula es obligatoria.");
            return;
        }
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(cedula)) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
            return;
        }

        try {
            const response = await fetch(`http://localhost:3001/api/verificar-cedula?cedula=${encodeURIComponent(cedula)}`);
            if (!response.ok) {
                const errorData = await response.json();
                if (response.status === 409 && errorData.existe) {
                    mostrarError(addCedula, "Esta cédula ya está registrada en el sistema.");
                    return;
                }
                throw new Error(`Error HTTP: ${response.status} - ${errorData.message || "Error desconocido"}`);
            }

            const data = await response.json();
            if (data.existe) {
                mostrarError(addCedula, "Esta cédula ya está registrada en el sistema.");
            } else {
                limpiarError(addCedula);
            }
        } catch (error) {
            console.error("Error verificando cédula:", error);
            mostrarError(addCedula, error.message || "Error al verificar la cédula.");
        }
    });


    // Manejar envío del formulario de Edición de Estudiante
    formEditarEstudiante.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Validar que los campos no estén vacíos y no contengan números
      const campos = [editPrimerNombre, editSegundoNombre, editPrimerApellido, editSegundoApellido];
      let hayError = false;
      campos.forEach(input => {
        if (!validateTextOnly(input, input.labels[0].textContent.replace('*', '').trim())) {
            hayError = true;
        }
      });
      if (hayError) {
        mostrarErrorAlUsuario('Los nombres y apellidos no pueden estar vacíos ni contener números.');
        return;
      }

      const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de guardar los cambios para este estudiante?`
        );
      if (!confirmResult) return;

      const id_usuario = editIdUsuario.value;
      const telefonoCompleto = `${editCodigoAreaSelect.value}-${editNumeroTelefonoInput.value}`;
      if (editNumeroTelefonoInput.value.trim() !== '' && !/^\d{7}$/.test(editNumeroTelefonoInput.value)) {
        mostrarError(editNumeroTelefonoInput, 'El teléfono debe tener 7 dígitos');
        return;
      }
      
      btnGuardarEdicion.disabled = true;
      btnGuardarEdicion.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Guardando...
      `;

      try {
        const formData = {
          cedula: editCedula.value.trim(), 
          correo: editCorreo.value.trim(),
          primerNombre: document.getElementById('editPrimerNombre').value.trim(),
          segundoNombre: document.getElementById('editSegundoNombre').value.trim(),
          primerApellido: document.getElementById('editPrimerApellido').value.trim(),
          segundoApellido: document.getElementById('editSegundoApellido').value.trim(),
          telefono: telefonoCompleto,
          direccion: editDireccion.value.trim(), 
          periodoAcademico: editPeriodoAcademico.value && editPeriodoAcademico.value !== '' ? editPeriodoAcademico.value : undefined,

        };


        const response = await fetch(`http://localhost:3001/api/estudiantes/${id_usuario}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (!response.ok) {
          // Si la respuesta tiene el mensaje de éxito, igual muestra éxito
          if (data && data.message && data.message.includes('actualizado')) {
            mostrarMensajeExito(data.message);
            setTimeout(() => {
              modalEditarEstudiante.hide();
              loadStudents(currentPage);
            }, 1500);
            return;
          }
          throw new Error(data.detalle || data.error || 'Error al actualizar el estudiante');
        }

        mostrarMensajeExito('Estudiante actualizado exitosamente.');
        
        // Retraso para asegurar que el modal se oculte antes de recargar, y que el usuario vea el mensaje.
        setTimeout(() => {
          modalEditarEstudiante.hide();
          loadStudents(currentPage); // Recarga la tabla para reflejar los cambios
        }, 1500);

      } catch (error) {
        console.error('Error en la actualización del estudiante:', error);
        mostrarErrorAlUsuario(error.message);
      } finally {
        btnGuardarEdicion.disabled = false;
        btnGuardarEdicion.textContent = 'Guardar Cambios';
      }
    });

    // Manejar envío del formulario de AGREGAR Nuevo Estudiante (NUEVO)
    formAgregarEstudiante.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validar campos obligatorios y reglas de contraseña
        const camposRequeridos = [
            { input: addCedula, nombre: "Cédula" },
            { input: addPrimerNombre, nombre: "Primer Nombre" },
            { input: addPrimerApellido, nombre: "Primer Apellido" },
            { input: addEmail, nombre: "Correo Electrónico" },
            { input: addDireccion, nombre: "Dirección" },
            { input: addPassword, nombre: "Contraseña" },
            { input: addConfirmPassword, nombre: "Confirmar contraseña" },
            { input: addNumeroTelefono, nombre: "Teléfono" },
            { input: addEstado, nombre: "Estado" },
            { input: addCiudad, nombre: "Ciudad" },
            { input: addPeriodoAcademico, nombre: "Periodo Académico" },
            { input: addCurso, nombre: "Curso" },
            { input: addMateria, nombre: "Materia" },
            { input: addSeccion, nombre: "Sección" },
        ];

        let formularioValido = true;

        camposRequeridos.forEach((campo) => {
            // Para selects, verificar que el valor no sea vacío y no sea el disabled por defecto
            if (campo.input.tagName === "SELECT") {
                if (!campo.input.value || campo.input.value === "") {
                    mostrarError(campo.input, `El campo ${campo.nombre} es obligatorio.`);
                    formularioValido = false;
                } else {
                    limpiarError(campo.input);
                }
            } else { // Para inputs de texto, etc.
                if (!campo.input.value.trim()) {
                    mostrarError(campo.input, `El campo ${campo.nombre} es obligatorio.`);
                    formularioValido = false;
                } else {
                    limpiarError(campo.input);
                }
            }
        });

        // Revalidaciones adicionales
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(addCedula.value.trim())) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
            formularioValido = false;
        }

        if (addPassword.value !== addConfirmPassword.value) {
            mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
            formularioValido = false;
        }
        // CAMBIO: Asegurarse de que la validación de fortaleza de contraseña se ejecute y afecte formularioValido
        addPassword.dispatchEvent(new Event("input")); // Dispara el evento input para revalidar
        const { feedback: passwordErrorFeedback } = getFeedbackElements(addPassword);
        if (passwordErrorFeedback && passwordErrorFeedback.style.display !== 'none' && passwordErrorFeedback.textContent.trim() !== '') {
            formularioValido = false;
        }


        if (addNumeroTelefono.value.length !== 7) {
            mostrarError(addNumeroTelefono, "El teléfono debe contener 7 dígitos.");
            formularioValido = false;
        }
        
        // Revalidar campos de nombre/apellido
        if (!validateTextOnly(addPrimerNombre, "Primer Nombre")) formularioValido = false;
        if (!validateTextOnly(addSegundoNombre, "Segundo Nombre")) formularioValido = false;
        if (!validateTextOnly(addPrimerApellido, "Primer Apellido")) formularioValido = false;
        if (!validateTextOnly(addSegundoApellido, "Segundo Apellido")) formularioValido = false;

        // Forzar revalidación de email y cédula
        addEmail.dispatchEvent(new Event("blur"));
        addCedula.dispatchEvent(new Event("blur"));

        // Si hay algún error visible, el formulario no es válido
        if (formAgregarEstudiante.querySelector(".is-invalid")) {
            formularioValido = false;
        }

        if (!formularioValido) {
            mostrarErrorAlUsuario("Por favor, complete todos los campos obligatorios y corrija los errores.");
            return;
        }

        // Mostrar loading en el botón
        btnGuardarNuevoEstudiante.disabled = true;
        btnGuardarNuevoEstudiante.innerHTML = `
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Agregando...
        `;

        try {
            const formData = {
                cedula: addCedula.value.trim(),
                primerNombre: addPrimerNombre.value.trim(),
                segundoNombre: addSegundoNombre.value.trim(),
                primerApellido: addPrimerApellido.value.trim(),
                segundoApellido: addSegundoApellido.value.trim(),
                correo: addEmail.value.trim(),
                telefono: `${addCodigoArea.value}-${addNumeroTelefono.value}`,
                direccion: addDireccion.value.trim(),
                id_estado: addEstado.value,
                id_ciudad: addCiudad.value,
                contraseña: addPassword.value.trim(),
                // CAMBIO: Usar los IDs de los selects para enviar al backend
                periodos: [addPeriodoAcademico.value], // Asumo que se envía un array de un solo periodo
                cursos: [addCurso.value], // Asumo que se envía un array de un solo curso
                materias: [addMateria.value], // Aquí se envía el id_materia_periodo
                secciones: [addSeccion.value], // Asumo que se envía un array de una sola seccion
            };

            const response = await fetch(`http://localhost:3001/api/estudiantes/register`, { // Endpoint para agregar estudiantes
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al agregar el estudiante.');
            }

            mostrarMensajeExito('Estudiante agregado exitosamente.');
            
            // --- INICIO DE LA CORRECCIÓN PARA EL CIERRE DEL MODAL Y ELIMINACIÓN DEL BACKDROP ---
            // Oculta el modal inmediatamente
            modalAgregarEstudiante.hide();

            // Usar un setTimeout para dar tiempo a Bootstrap para que inicie su animación de cierre
            // y luego forzar la eliminación del backdrop y la clase modal-open
            setTimeout(() => {
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) {
                    modalBackdrop.remove();
                    console.log('Forced removal of modal-backdrop.');
                }
                if (document.body.classList.contains('modal-open')) {
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = ''; // Restaura el scroll del body
                    console.log('Forced removal of modal-open class and overflow reset.');
                }
                // Recargar la página después de que el modal esté completamente cerrado
                window.location.reload(); // Agregado para recargar la página
            }, 500); // Un pequeño retraso (e.g., 500ms) para que la animación de cierre termine

            // Opcional: Mantener el listener 'hidden.bs.modal' como redundancia,
            // aunque el setTimeout debería ser más efectivo si hay problemas de timing.
            // Asegurarse de que no se añadan múltiples listeners.
            const modalElement = modalAgregarEstudiante._element;
            const existingHandler = modalElement.__backdrop_cleanup_handler;
            if (existingHandler) {
                modalElement.removeEventListener('hidden.bs.modal', existingHandler);
            }
            const newHandler = function() {
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) {
                    modalBackdrop.remove();
                    console.log('Fallback: Removed modal-backdrop via hidden.bs.modal event.');
                }
                if (document.body.classList.contains('modal-open')) {
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    console.log('Fallback: Removed modal-open via hidden.bs.modal event.');
                }
                modalElement.removeEventListener('hidden.bs.modal', newHandler); // Remove self
                modalElement.__backdrop_cleanup_handler = null; // Clear reference
            };
            modalElement.addEventListener('hidden.bs.modal', newHandler);
            modalElement.__backdrop_cleanup_handler = newHandler; // Store reference
            // --- FIN DE LA CORRECCIÓN ---

        } catch (error) {
            console.error('Error al agregar estudiante:', error);
            mostrarErrorAlUsuario(error.message);
        } finally {
            btnGuardarNuevoEstudiante.disabled = false;
            btnGuardarNuevoEstudiante.textContent = 'Agregar Estudiante';
        }
    });


    // Función para inicializar los dropdowns de Bootstrap después de cargar la tabla
    function initializeDropdowns() {
      console.log('window.bootstrap:', typeof window.bootstrap, window.bootstrap);
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = studentsTableBody.querySelectorAll('.dropdown-toggle');
        console.log('Attempting to initialize', dropdownToggles.length, 'Bootstrap Dropdowns...');
        dropdownToggles.forEach(button => {
          // Destruir instancias existentes para evitar duplicados si la tabla se recarga
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`Disposed existing dropdown for #${button.id}`);
          }
          // Crear nueva instancia de Dropdown con popperConfig para evitar ser cortado
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: {
                      offset: [0, 8] 
                    }
                  },
                ],
              };
            }
          });
          console.log(`Initialized new dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('No dropdown toggles found to initialize.');
        } else {
            console.log(`✅ Finished initializing ${dropdownToggles.length} Bootstrap Dropdowns.`);
        }
      } else {
        console.warn('⚠️ bootstrap.Dropdown no está disponible. Esto es crucial para que los dropdowns funcionen. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función principal para cargar estudiantes en la tabla y actualizar contadores
    async function loadStudents(page, searchTerm = '') { // Añadir searchTerm como parámetro
      studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center">Cargando estudiantes...</td></tr>`;
      paginationControls.innerHTML = ''; 
      totalStudentsCount.textContent = '...';
      activeStudentsCount.textContent = '...';
      inactiveStudentsCount.textContent = '...';

      try {
        let url = `http://localhost:3001/api/estudiantes?page=${page}&limit=${itemsPerPage}`;
        if (searchTerm) { // Añadir término de búsqueda a la URL si existe
          url += `&search=${encodeURIComponent(searchTerm)}`;
        }

        const response = await fetch(url);
        if (!response.ok) {
          if (response.status === 404) {
            studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron estudiantes.</td></tr>`;
            totalStudentsCount.textContent = '0';
            activeStudentsCount.textContent = '0';
            inactiveStudentsCount.textContent = '0';
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const estudiantes = data.estudiantes;
        const totalPages = data.totalPages;
        currentPage = data.currentPage;


        // Actualizar contadores
        totalStudentsCount.textContent = data.totalCount || '0';
        activeStudentsCount.textContent = data.activeCount || '0';
        inactiveStudentsCount.textContent = data.inactiveCount || '0';

        studentsTableBody.innerHTML = ''; 

        if (estudiantes.length === 0) {
          studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron estudiantes que coincidan con "${searchTerm}".</td></tr>`;
          return;
        }

        // Procesar los resultados para asegurar que los arrays de IDs y nombres sean vacíos si no hay datos
        const processedEstudiantes = estudiantes.map(estudiante => ({
          ...estudiante,
          // Aseguramos que `periodoAcademicoNames` sea un array, incluso si viene vacío de la DB
          // Si el backend envía "N/A", lo convertimos en un array que contiene "N/A"
          periodoAcademicoNames: (typeof estudiante.periodoAcademicoNames === 'string' && estudiante.periodoAcademicoNames && estudiante.periodoAcademicoNames !== 'N/A') 
                                ? estudiante.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                : ['N/A'], // Si es N/A o vacío, lo dejamos como un array con 'N/A'
          periodoAcademicoIds: (typeof estudiante.periodoAcademicoIds === 'string' && estudiante.periodoAcademicoIds) ? estudiante.periodoAcademicoIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          cursosNames: (typeof estudiante.cursosNames === 'string' && estudiante.cursosNames) ? estudiante.cursosNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          cursosIds: (typeof estudiante.cursosIds === 'string' && estudiante.cursosIds) ? estudiante.cursosIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          materiasNames: (typeof estudiante.materiasNames === 'string' && estudiante.materiasNames) ? estudiante.materiasNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          materiasIds: (typeof estudiante.materiasIds === 'string' && estudiante.materiasIds) ? estudiante.materiasIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          seccionNames: (typeof estudiante.seccionNames === 'string' && estudiante.seccionNames) ? estudiante.seccionNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          seccionIds: (typeof estudiante.seccionIds === 'string' && estudiante.seccionIds) ? estudiante.seccionIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          direccion: estudiante.direccion || 'N/A' 
        }));


        processedEstudiantes.forEach((estudiante, index) => {
          const studentDataAttribute = JSON.stringify(estudiante);

          const studentStatus = estudiante.estado === 1 ? 'Activo' : (estudiante.estado === 0 ? 'Inactivo' : 'Desconocido'); 
          const lastConnectionText = estudiante.ultima_conexion ? new Date(estudiante.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';

          const row = document.createElement('tr');
          row.dataset.id = estudiante.id_usuario;
          row.dataset.studentData = studentDataAttribute; 


          row.innerHTML = `
            <td>${(currentPage - 1) * itemsPerPage + index + 1}</td>
            <td>${estudiante.periodoAcademicoNames.join(', ')}</td> 
            <td>${estudiante.cedula || ''}</td>
            <td>${estudiante.primer_nombre || ''}</td>
            <td>${estudiante.primer_apellido || ''}</td>
            <td>${studentStatus}</td>
            <td>${lastConnectionText}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton${estudiante.id_usuario}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton${estudiante.id_usuario}">
                  <li><a class="dropdown-item" href="#" data-action="ver-mas" data-id="${estudiante.id_usuario}"><i class='bx bx-info-circle me-2'></i>Ver más información</a></li>
                  <li><a class="dropdown-item" href="#" data-action="editar" data-id="${estudiante.id_usuario}"><i class='bx bxs-edit-alt me-2'></i>Editar</a></li>
                  <li><a class="dropdown-item" href="#" data-action="eliminar" data-id="${estudiante.id_usuario}"><i class='bx bx-trash me-2'></i>Desactivar Estudiante</a></li>
                </ul>
              </div>
            </td>
          `;
          studentsTableBody.appendChild(row);
        });

        console.log('window.bootstrap:', typeof window.bootstrap, window.bootstrap);
        if (typeof window.bootstrap !== 'undefined') {
          console.log('window.bootstrap.Dropdown:', typeof window.bootstrap.Dropdown, window.bootstrap.Dropdown);
        } else {
          console.error('Bootstrap global object (window.bootstrap) is not found. Ensure Bootstrap JS is loaded before this script.');
        }

        initializeDropdowns();

        setupPagination(totalPages, currentPage, searchTerm); // Pasar searchTerm a la paginación
        setupActionListeners(processedEstudiantes); 
      } catch (error) {
        console.error('Error al cargar estudiantes:', error);
        studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error al cargar estudiantes. Intente nuevamente.</td></tr>`;
        totalStudentsCount.textContent = '0';
        activeStudentsCount.textContent = '0';
        inactiveStudentsCount.textContent = '0';
      }
    }

    // Configurar listeners para los botones de acción en cada fila
    function setupActionListeners(estudiantesData) {
        studentsTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleActionClick); 
            item.addEventListener('click', handleActionClick);

            function handleActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const userId = e.currentTarget.dataset.id;
                const student = estudiantesData.find(s => s.id_usuario.toString() === userId);

                if (!student) {
                    console.error('Estudiante no encontrado para ID:', userId);
                    return;
                }

                switch (action) {
                    case 'ver-mas':
                        mostrarDetallesEstudiante(student);
                        break;
                    case 'editar':
                        editarEstudiante(student);
                        break;
                    case 'eliminar': 
                        desactivarEstudiante(student);
                        break;
                    default:
                        console.warn('Acción desconocida:', action);
                }
            }
        });
    }

    // Mostrar los detalles del estudiante en el modal
    async function mostrarDetallesEstudiante(estudiante) {
        // Robustez: solo asigno si el elemento existe
        if (detalleCedula) detalleCedula.textContent = estudiante.cedula || 'N/A';
        if (detalleNombreCompleto) detalleNombreCompleto.textContent = `${estudiante.primer_nombre || ''} ${estudiante.segundo_nombre || ''} ${estudiante.primer_apellido || ''} ${estudiante.segundo_apellido || ''}`.trim() || 'N/A';
        if (detalleCorreo) detalleCorreo.textContent = estudiante.correo || 'N/A';
        if (detalleTelefono) detalleTelefono.textContent = estudiante.telefono || 'N/A';
        if (detalleDireccion) detalleDireccion.textContent = estudiante.direccion || 'N/A';
        if (detalleEstadoEstudiante) detalleEstadoEstudiante.textContent = estudiante.estado === 1 ? 'Activo' : (estudiante.estado === 0 ? 'Inactivo' : 'N/A');
        if (detalleUltimaConexion) detalleUltimaConexion.textContent = estudiante.ultima_conexion ? new Date(estudiante.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';
        if (detallePeriodoAcademico) detallePeriodoAcademico.textContent = (estudiante.periodoAcademicoNames && estudiante.periodoAcademicoNames.length > 0) ? estudiante.periodoAcademicoNames.join(', ') : 'N/A';
        if (detalleSeccion) detalleSeccion.textContent = (estudiante.seccionNames && estudiante.seccionNames.length > 0) ? estudiante.seccionNames.join(', ') : 'N/A';
        if (detalleCursos) detalleCursos.textContent = (estudiante.cursosNames && estudiante.cursosNames.length > 0) ? estudiante.cursosNames.join(', ') : 'Ninguno';
        if (detalleMaterias) detalleMaterias.textContent = (estudiante.materiasNames && estudiante.materiasNames.length > 0) ? estudiante.materiasNames.join(', ') : 'Ninguna';
        if (detalleEstadoMateria) detalleEstadoMateria.textContent = (estudiante.estado_materia === 'Aprobado' ? 'Aprobado' : (estudiante.estado_materia === 'Reprobado' ? 'Reprobado' : 'N/A'));
        // Tabla académica cruzada
        let tablaAcademica = document.getElementById('tablaAcademicaEstudiante');
        if (tablaAcademica) {
          tablaAcademica.innerHTML = '<div class="text-center text-muted">Cargando información académica detallada...</div>';
          try {
            const resp = await fetch(`http://localhost:3001/api/estudiantes/${estudiante.id_usuario}/academico`);
            if (!resp.ok) throw new Error('Error al obtener información académica cruzada');
            const data = await resp.json();
            if (Array.isArray(data.academico) && data.academico.length > 0) {
              // Ajuste aquí para el encabezado y las celdas
              let tabla = `<div class=\"mt-3\"><strong>Detalle Académico:</strong><div class=\"table-responsive\"><table class=\"table table-bordered table-sm table-dark\"><thead><tr><th>Curso</th><th>Período-Materia</th><th>Materia</th><th>Sección</th><th>Estado</th></tr></thead><tbody>`;
              data.academico.forEach(row => {
                tabla += `<tr><td>${row.nombre_curso || 'N/A'}</td><td>${row.nombre_periodo || 'N/A'}</td><td>${row.nombre_materia || 'N/A'}</td><td>${row.nombre_seccion || 'N/A'}</td><td class="${row.estado_materia === 'Aprobado' ? 'text-success' : 'text-danger'}"> ${row.estado_materia || 'N/A'}</td></tr>`;
              });
              tabla += '</tbody></table></div></div>';
              tablaAcademica.innerHTML = tabla;
            } else {
              tablaAcademica.innerHTML = '<div class="text-center text-muted">No hay información académica cruzada registrada.</div>';
            }
          } catch (err) {
            tablaAcademica.innerHTML = '<div class="text-center text-danger">Error al cargar información académica cruzada.</div>';
          }
        }
        modalVerMasInformacionEstudiante.show();
    }


    // Función para Editar Estudiante
    async function editarEstudiante(estudiante) {
        if (editIdUsuario) editIdUsuario.value = estudiante.id_usuario;
        if (editCedula) editCedula.value = estudiante.cedula || '';
        if (editCorreo) editCorreo.value = estudiante.correo || '';
        if (editPrimerNombre) editPrimerNombre.value = estudiante.primer_nombre || '';
        if (editSegundoNombre) editSegundoNombre.value = estudiante.segundo_nombre || '';
        if (editPrimerApellido) editPrimerApellido.value = estudiante.primer_apellido || '';
        if (editSegundoApellido) editSegundoApellido.value = estudiante.segundo_apellido || '';
        if (editDireccion) editDireccion.value = estudiante.direccion || '';
        if (editCodigoAreaSelect && editNumeroTelefonoInput) {
        if (estudiante.telefono) {
            const [codigo, numero] = estudiante.telefono.split('-');
            editCodigoAreaSelect.value = codigo || '';
            editNumeroTelefonoInput.value = numero || '';
        } else {
            editCodigoAreaSelect.value = '';
            editNumeroTelefonoInput.value = '';
        }
        }
        // Asignar el periodo académico seleccionado si existe
        if (editPeriodoAcademico) {
        // Bloquear el select mientras cargamos
        editPeriodoAcademico.disabled = true;
        editPeriodoAcademico.innerHTML = '<option value="">Cargando períodos...</option>';

        try {
            // Cargar períodos ANTES de mostrar el modal
            await cargarPeriodos('edit');
            
            // Extraer el ID del período como string
            const periodoId = estudiante.periodoAcademicoIds?.[0]?.toString() || '';
            
            // Esperar un ciclo de evento para asegurar que el DOM está actualizado
            await new Promise(resolve => requestAnimationFrame(resolve));
            
            // Establecer el valor SI existe
            if (periodoId && Array.from(editPeriodoAcademico.options).some(o => o.value === periodoId)) {
                editPeriodoAcademico.value = periodoId;
            } else {
                editPeriodoAcademico.value = '';
            }
            
            // Disparar evento change para cualquier listener
            editPeriodoAcademico.dispatchEvent(new Event('change'));
        } catch (error) {
            console.error('Error cargando períodos:', error);
            editPeriodoAcademico.innerHTML = '<option value="">Error cargando períodos</option>';
        } finally {
            editPeriodoAcademico.disabled = false;
        }
    }

        modalEditarEstudiante.show();
    }

    // Función para Desactivar Estudiante (Eliminación Lógica)
    async function desactivarEstudiante(estudiante) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres desactivar al estudiante ${estudiante.primer_nombre} ${estudiante.primer_apellido}? Esto cambiará su estado a "Inactivo".`
        );

        if (!confirmResult) return;

        try {
            const response = await fetch(`http://localhost:3001/api/estudiantes/${estudiante.id_usuario}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 0 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al desactivar el estudiante');
            }

            mostrarMensajeExito(`Estudiante ${estudiante.primer_nombre} ${estudiante.primer_apellido} ha sido desactivado exitosamente.`);
            loadStudents(currentPage, searchStudentInput.value.trim()); // Recargar con el término de búsqueda actual
        } catch (error) {
            console.error('Error al desactivar estudiante:', error);
            mostrarErrorAlUsuario(`Error al desactivar al estudiante: ${error.message}`);
        }
    }


    // Función de paginación (generalizada)
    function setupPagination(totalPages, currentPage, searchTerm = '') { // Añadir searchTerm
      paginationControls.innerHTML = '';
      if (totalPages <= 1) return;

      const ul = document.createElement('ul');
      ul.className = 'pagination-list flex justify-center items-center gap-2';

      const prevLi = document.createElement('li');
      prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      const prevLink = document.createElement('a');
      prevLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      prevLink.href = '#';
      prevLink.textContent = 'Anterior';
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage > 1) {
          loadStudents(currentPage - 1, searchTerm); // Pasar searchTerm
        }
      });
      prevLi.appendChild(prevLink);
      ul.appendChild(prevLi);

      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, currentPage + 2);

      if (startPage > 1) {
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = '1';
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadStudents(1, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
        if (startPage > 2) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement('li');
        li.className = `page-item ${i === currentPage ? 'active' : ''}`;
        const link = document.createElement('a');
        link.className = `page-link rounded-lg px-3 py-1 ${i === currentPage ? 'bg-purple-800' : 'bg-gray-700'} text-white hover:bg-purple-600`;
        link.href = '#';
        link.textContent = i;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadStudents(i, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = totalPages;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadStudents(totalPages, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      const nextLi = document.createElement('li');
      nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
      const nextLink = document.createElement('a');
      nextLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      nextLink.href = '#';
      nextLink.textContent = 'Siguiente';
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage < totalPages) {
          loadStudents(currentPage + 1, searchTerm); // Pasar searchTerm
        }
      });
      nextLi.appendChild(nextLink);
      ul.appendChild(nextLi);

      paginationControls.appendChild(ul);
    }

    loadStudents(1); 

    // Event listener para el campo de búsqueda de estudiantes
    if (searchStudentInput) {
        searchStudentInput.addEventListener('input', () => {
            currentPage = 1; // Reiniciar a la primera página en cada búsqueda
            loadStudents(currentPage, searchStudentInput.value.trim());
        });
    }


    // Funciones auxiliares para mostrar/limpiar errores
    // `elemento`: el input que tiene el error o que se va a limpiar.
    // `mensaje`: el mensaje de error a mostrar.
    // `errorElementOverride`: (Opcional) Un elemento de feedback específico si no es el siguiente hermano directo.
    function mostrarError(elemento, mensaje) { // Simplificado: eliminamos errorElementOverride
        elemento.classList.add('is-invalid');
        const { feedback } = getFeedbackElements(elemento); // Usar la función getFeedbackElements
        if (feedback) {
            feedback.textContent = mensaje;
            feedback.style.display = 'block';
        } else {
            console.warn('No se encontró un elemento de feedback para:', elemento);
        }
    }

    function limpiarError(elemento) { // Simplificado: eliminamos errorElementOverride
        elemento.classList.remove('is-invalid');
        const { feedback } = getFeedbackElements(elemento); // Usar la función getFeedbackElements
        if (feedback) {
            feedback.style.display = 'none';
            feedback.textContent = ''; // Limpiar el texto también
        }
    }

    // Función para obtener los elementos de feedback (invalid-feedback y small)
    function getFeedbackElements(inputElement) {
      // Encuentra el contenedor padre (col-md-6 mb-3) del input o del input-group
      const parentCol = inputElement.closest('.col-md-6.mb-3');
      if (!parentCol) return { feedback: null, strength: null };

      // Busca el .invalid-feedback y el small.form-text dentro de ese contenedor padre
      const invalidFeedback = parentCol.querySelector('.invalid-feedback');
      const strengthFeedback = parentCol.querySelector('small.form-text');
      
      return { feedback: invalidFeedback, strength: strengthFeedback };
    }


    function limpiarTodosLosErrores(form) {
        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        form.querySelectorAll('.invalid-feedback').forEach(el => {
            el.textContent = '';
            el.style.display = 'none';
        });
        // También limpiar el feedback de fortaleza de contraseña si existe
        const passwordStrengthEl = form.querySelector('[id$="PasswordStrength"]');
        if (passwordStrengthEl) {
            passwordStrengthEl.textContent = '';
            passwordStrengthEl.style.color = ''; // Reset color
        }
    }


    function mostrarMensajeExito(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-success position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      
      setTimeout(() => {
        alerta.remove();
      }, 3000);
    }

    function mostrarErrorAlUsuario(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-danger position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      
      setTimeout(() => {
        alerta.remove();
      }, 5000);
    }

    // Función para mostrar un modal de confirmación personalizado
    function mostrarConfirmacion(mensaje) {
      return new Promise((resolve) => {
        const confirmModalHtml = `
          <div class="modal fade" id="customConfirmModal" tabindex="-1" aria-labelledby="customConfirmModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="customConfirmModalLabel">Confirmación</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                  ${mensaje}
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                  <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirmar</button>
                </div>
              </div>
            </div>
          </div>
        `;
        document.body.insertAdjacentHTML('beforeend', confirmModalHtml);
        const confirmModalElement = document.getElementById('customConfirmModal');
        const customConfirmModal = new bootstrap.Modal(confirmModalElement);

        const confirmActionBtn = document.getElementById('confirmActionBtn');
        confirmActionBtn.addEventListener('click', () => {
          customConfirmModal.hide();
          resolve(true);
        });

        confirmModalElement.addEventListener('hidden.bs.modal', () => {
          confirmModalElement.remove();
          resolve(false); 
        }, { once: true }); 

        customConfirmModal.show();
      });
    }
  });
</script>
