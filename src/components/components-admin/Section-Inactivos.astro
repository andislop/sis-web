---
import "../../style/style-admin/estudiantes.css"; /* Ahora solo importa est-c.txt */
---

<section class="data-content-section">
  <!-- Nueva sección del Título "Inactivos" -->
  <section class="estudiantes-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Inactivos</h2>
    </div>
  </section>

  <!-- Tabla de Estudiantes Inactivos -->
  <div class="display-table" id="table1">
    <h1>Estudiantes</h1> <!-- Título para la tabla de estudiantes -->
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th>
            <th scope="col">Cédula</th>
            <th scope="col">Nombre</th>
            <th scope="col">Apellido</th>
            <th scope="col">Estado</th>
            <th scope="col">Última Conexión</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="studentsTableBody">
          <tr>
            <td colspan="8" class="text-center">Cargando estudiantes...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControlsStudents" class="pagination text-center mt-3"></div>
  </div>

  <br><br> <!-- Separador entre tablas -->

  <!-- Tabla de Profesores Inactivos -->
  <div class="display-table" id="table2">
    <h1>Profesores</h1> <!-- Título para la tabla de profesores -->
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th>
            <th scope="col">Cédula</th>
            <th scope="col">Nombre</th>
            <th scope="col">Apellido</th>
            <th scope="col">Estado</th>
            <th scope="col">Última Conexión</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="profesoresTableBody">
          <tr>
            <td colspan="8" class="text-center">Cargando profesores...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControlsProfesores" class="pagination text-center mt-3"></div>
  </div>

  <br><br> <!-- Separador entre tablas -->

  <!-- Tabla de Cursos Inactivos -->
  <div class="display-table" id="table3">
    <h1>Cursos</h1> <!-- Título para la tabla de cursos -->
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th>
            <th scope="col">Nombre Curso</th>
            <th scope="col">Estado</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="cursosTableBody">
          <tr>
            <td colspan="5" class="text-center">Cargando cursos...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControlsCursos" class="pagination text-center mt-3"></div>
  </div>

  <br><br> <!-- Separador entre tablas -->

  <!-- Tabla de Materias Inactivas -->
  <div class="display-table" id="table4">
    <h1>Materias</h1> <!-- Título para la tabla de materias -->
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th> <!-- Agregado el Periodo Académico para materias -->
            <th scope="col">Nombre Materia</th>
            <th scope="col">Estado</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="materiasTableBody">
          <tr>
            <td colspan="5" class="text-center">Cargando materias...</td> <!-- Colspan ajustado a 5 -->
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControlsMaterias" class="pagination text-center mt-3"></div>
  </div>

  <br><br> <!-- Separador entre tablas -->

  <!-- Tabla de Secciones Inactivas (NUEVA) -->
  <div class="display-table" id="table5">
    <h1>Secciones</h1> <!-- Título para la tabla de secciones -->
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Sección</th>
            <th scope="col">Estado</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="seccionesTableBody">
          <tr>
            <td colspan="4" class="text-center">Cargando secciones...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControlsSecciones" class="pagination text-center mt-3"></div>
  </div>

</section>

<!-- Script de Bootstrap y funciones JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script is:inline>
  const API_BASE_URL = 'http://localhost:3001/api'; // Asegúrate de que esta URL sea correcta

  document.addEventListener('DOMContentLoaded', function() {
    let currentPageStudents = 1;
    let currentPageProfesores = 1;
    let currentPageCursos = 1; 
    let currentPageMaterias = 1; 
    let currentPageSecciones = 1; // Nueva variable para paginación de secciones
    const itemsPerPage = 5; 

    const studentsTableBody = document.getElementById('studentsTableBody');
    const profesoresTableBody = document.getElementById('profesoresTableBody');
    const cursosTableBody = document.getElementById('cursosTableBody'); 
    const materiasTableBody = document.getElementById('materiasTableBody'); 
    const seccionesTableBody = document.getElementById('seccionesTableBody'); // Nueva referencia al tbody de secciones

    const paginationControlsStudents = document.getElementById('paginationControlsStudents');
    const paginationControlsProfesores = document.getElementById('paginationControlsProfesores');
    const paginationControlsCursos = document.getElementById('paginationControlsCursos'); 
    const paginationControlsMaterias = document.getElementById('paginationControlsMaterias'); 
    const paginationControlsSecciones = document.getElementById('paginationControlsSecciones'); // Nueva referencia a la paginación de secciones

    // Función para inicializar los dropdowns de Bootstrap para la tabla de estudiantes
    function initializeStudentDropdowns() {
      console.log('DEBUG: initializeStudentDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = studentsTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Student Dropdowns...');
        dropdownToggles.forEach(button => {
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing student dropdown for #${button.id}`);
          }
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: { offset: [0, 8] }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new student dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No student dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Student Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible para estudiantes. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función para inicializar los dropdowns de Bootstrap para la tabla de profesores
    function initializeProfessorDropdowns() {
      console.log('DEBUG: initializeProfessorDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = profesoresTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Professor Dropdowns...');
        dropdownToggles.forEach(button => {
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing professor dropdown for #${button.id}`);
          }
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: { offset: [0, 8] }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new professor dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No professor dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Professor Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible para profesores. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función para inicializar los dropdowns de Bootstrap para la tabla de cursos
    function initializeCourseDropdowns() {
      console.log('DEBUG: initializeCourseDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = cursosTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Course Dropdowns...');
        dropdownToggles.forEach(button => {
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing course dropdown for #${button.id}`);
          }
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: { offset: [0, 8] }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new course dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No course dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Course Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible para cursos. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función para inicializar los dropdowns de Bootstrap para la tabla de materias
    function initializeSubjectDropdowns() {
      console.log('DEBUG: initializeSubjectDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = materiasTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Subject Dropdowns...');
        dropdownToggles.forEach(button => {
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing subject dropdown for #${button.id}`);
          }
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: { offset: [0, 8] }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new subject dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No subject dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Subject Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible para materias. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función para inicializar los dropdowns de Bootstrap para la tabla de secciones (NUEVA)
    function initializeSectionDropdowns() {
      console.log('DEBUG: initializeSectionDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = seccionesTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Section Dropdowns...');
        dropdownToggles.forEach(button => {
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing section dropdown for #${button.id}`);
          }
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: { offset: [0, 8] }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new section dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No section dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Section Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible para secciones. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }


    // Función principal para cargar estudiantes inactivos en la tabla
    async function loadInactiveStudents(page) {
      console.log(`DEBUG: loadInactiveStudents called for page ${page}.`);
      studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center">Cargando estudiantes...</td></tr>`;
      paginationControlsStudents.innerHTML = ''; 
      
      try {
        console.log(`DEBUG: Solicitando estudiantes inactivos para la página ${page} a ${API_BASE_URL}/estudiantes/papelera?page=${page}&limit=${itemsPerPage}`);
        const response = await fetch(`${API_BASE_URL}/estudiantes/papelera?page=${page}&limit=${itemsPerPage}`);
        
        if (!response.ok) {
          if (response.status === 404) {
            studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron estudiantes inactivos.</td></tr>`;
            console.log("DEBUG: 404 - No se encontraron estudiantes inactivos.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const estudiantes = data.estudiantes;
        const totalPages = data.totalPages;
        currentPageStudents = data.currentPage;

        console.log("DEBUG: Datos de estudiantes inactivos recibidos del backend:", data);

        studentsTableBody.innerHTML = ''; 

        if (!estudiantes || estudiantes.length === 0) {
          studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron estudiantes inactivos.</td></tr>`;
          console.log("DEBUG: Array de estudiantes inactivos vacío después de fetch.");
          return;
        }

        const processedEstudiantes = Array.isArray(estudiantes) ? estudiantes.map(estudiante => ({
          ...estudiante,
          periodoAcademicoNames: (typeof estudiante.periodoAcademicoNames === 'string' && estudiante.periodoAcademicoNames && estudiante.periodoAcademicoNames !== 'N/A') 
                                 ? estudiante.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                 : ['N/A'], 
          ultima_conexion: estudiante.ultima_conexion 
        })) : [];

        processedEstudiantes.forEach((estudiante, index) => {
          const studentStatus = estudiante.estado === 1 ? 'Activo' : (estudiante.estado === 0 ? 'Inactivo' : 'Desconocido'); 
          const lastConnectionText = estudiante.ultima_conexion ? new Date(estudiante.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';

          const row = document.createElement('tr');
          row.dataset.id = estudiante.id_usuario;

          row.innerHTML = `
            <td>${(currentPageStudents - 1) * itemsPerPage + index + 1}</td>
            <td>${estudiante.periodoAcademicoNames.join(', ') || 'N/A'}</td>
            <td>${estudiante.cedula || ''}</td>
            <td>${estudiante.primer_nombre || ''}</td>
            <td>${estudiante.primer_apellido || ''}</td>
            <td>${studentStatus}</td>
            <td>${lastConnectionText}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButtonStudent${estudiante.id_usuario}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButtonStudent${estudiante.id_usuario}">       
                  <li><a class="dropdown-item" href="#" data-action="activar-estudiante" data-id="${estudiante.id_usuario}"><i class='bx bx-undo me-2'></i>Activar Estudiante</a></li>
                </ul>
              </div>
            </td>
          `;
          studentsTableBody.appendChild(row);
        });

        initializeStudentDropdowns();
        setupStudentActionListeners(processedEstudiantes); 
        setupPagination(totalPages, currentPageStudents, paginationControlsStudents, 'student');
        console.log("DEBUG: Renderizado de estudiantes inactivos completado.");
      } catch (error) {
        console.error('Error al cargar estudiantes inactivos:', error);
        studentsTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error al cargar estudiantes inactivos. Intente nuevamente.</td></tr>`;
      }
    }

    // Función principal para cargar profesores inactivos en la tabla
    async function loadInactiveProfesores(page) {
      console.log(`DEBUG: loadInactiveProfesores called for page ${page}.`);
      profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center">Cargando profesores...</td></tr>`;
      paginationControlsProfesores.innerHTML = ''; 

      try {
        // Intentar primero con /papelera, si falla, intentar con ?estado=0
        let response = await fetch(`${API_BASE_URL}/profesores/papelera?page=${page}&limit=${itemsPerPage}`);
        if (!response.ok && response.status === 404) {
          console.log("DEBUG: Endpoint /profesores/papelera no encontrado, intentando con /profesores?estado=0.");
          response = await fetch(`${API_BASE_URL}/profesores?estado=0&page=${page}&limit=${itemsPerPage}`);
        }
        
        if (!response.ok) {
          if (response.status === 404) {
            profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron profesores inactivos.</td></tr>`;
            console.log("DEBUG: 404 - No se encontraron profesores inactivos.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        // Asumiendo que la API devuelve un campo 'profesores'
        const profesores = data.profesores; 
        const totalPages = data.totalPages;
        currentPageProfesores = data.currentPage;

        console.log("DEBUG: Datos de profesores inactivos recibidos del backend:", data);

        profesoresTableBody.innerHTML = ''; 

        if (!profesores || profesores.length === 0) {
          profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron profesores inactivos.</td></tr>`;
          console.log("DEBUG: Array de profesores inactivos vacío después de fetch.");
          return;
        }

        const processedProfesores = Array.isArray(profesores) ? profesores.map(profesor => ({
          ...profesor,
          // Aseguramos que `periodoAcademicoNames` sea un array
          periodoAcademicoNames: (typeof profesor.periodoAcademicoNames === 'string' && profesor.periodoAcademicoNames && profesor.periodoAcademicoNames !== 'N/A') 
                                 ? profesor.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                 : ['N/A'], 
          ultima_conexion: profesor.ultima_conexion 
        })) : [];

        processedProfesores.forEach((profesor, index) => {
          const profesorStatus = profesor.estado === 1 ? 'Activo' : (profesor.estado === 0 ? 'Inactivo' : 'Desconocido'); 
          const lastConnectionText = profesor.ultima_conexion ? new Date(profesor.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';

          const row = document.createElement('tr');
          row.dataset.id = profesor.id_usuario;

          row.innerHTML = `
            <td>${(currentPageProfesores - 1) * itemsPerPage + index + 1}</td>
            <td>${profesor.periodoAcademicoNames.join(', ') || 'N/A'}</td>
            <td>${profesor.cedula || ''}</td>
            <td>${profesor.primer_nombre || ''}</td>
            <td>${profesor.primer_apellido || ''}</td>
            <td>${profesorStatus}</td>
            <td>${lastConnectionText}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButtonProfessor${profesor.id_usuario}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButtonProfessor${profesor.id_usuario}">
                  <li><a class="dropdown-item" href="#" data-action="activar-profesor" data-id="${profesor.id_usuario}"><i class='bx bx-undo me-2'></i>Activar Profesor</a></li>
                </ul>
              </div>
            </td>
          `;
          profesoresTableBody.appendChild(row);
        });

        initializeProfessorDropdowns();
        setupProfessorActionListeners(processedProfesores);
        setupPagination(totalPages, currentPageProfesores, paginationControlsProfesores, 'profesor');
        console.log("DEBUG: Renderizado de profesores inactivos completado.");
      } catch (error) {
        console.error('❌ Error al cargar profesores inactivos:', error);
        profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error al cargar profesores inactivos. Intente nuevamente.</td></tr>`;
      }
    }

    // Función principal para cargar cursos inactivos en la tabla
    async function loadInactiveCursos(page) {
      console.log(`DEBUG: loadInactiveCursos called for page ${page}.`);
      cursosTableBody.innerHTML = `<tr><td colspan="5" class="text-center">Cargando cursos...</td></tr>`;
      paginationControlsCursos.innerHTML = ''; 

      try {
        let response = await fetch(`${API_BASE_URL}/cursos/papelera?page=${page}&limit=${itemsPerPage}`);
        if (!response.ok && response.status === 404) {
          console.log("DEBUG: Endpoint /cursos/papelera no encontrado, intentando con /cursos?estado=0.");
          response = await fetch(`${API_BASE_URL}/cursos?estado=0&page=${page}&limit=${itemsPerPage}`);
        }
        
        if (!response.ok) {
          if (response.status === 404) {
            cursosTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">No se encontraron cursos inactivos.</td></tr>`;
            console.log("DEBUG: 404 - No se encontraron cursos inactivos.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const cursos = data.cursos; 
        const totalPages = data.totalPages;
        currentPageCursos = data.currentPage;

        console.log("DEBUG: Datos de cursos inactivos recibidos del backend:", data);

        cursosTableBody.innerHTML = ''; 

        if (!cursos || cursos.length === 0) {
          cursosTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">No se encontraron cursos inactivos.</td></tr>`;
          console.log("DEBUG: Array de cursos inactivos vacío después de fetch.");
          return;
        }

        const processedCursos = Array.isArray(cursos) ? cursos.map(curso => ({
          ...curso,
          periodoAcademicoNames: (typeof curso.periodoAcademicoNames === 'string' && curso.periodoAcademicoNames && curso.periodoAcademicoNames !== 'N/A') 
                                 ? curso.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                 : ['N/A'],
          nombre_curso: curso.nombre_curso || 'N/A'
        })) : [];

        processedCursos.forEach((curso, index) => {
          const cursoStatus = curso.activo === 1 ? 'Activo' : (curso.activo === 0 ? 'Inactivo' : 'Desconocido'); 
          const row = document.createElement('tr');
          row.dataset.id = curso.id_curso;

          row.innerHTML = `
            <td>${(currentPageCursos - 1) * itemsPerPage + index + 1}</td>
            <td>${curso.periodoAcademicoNames.join(', ') || 'N/A'}</td>
            <td>${curso.nombre_curso}</td>
            <td>${cursoStatus}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButtonCourse${curso.id_curso}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButtonCourse${curso.id_curso}">
                  <li><a class="dropdown-item" href="#" data-action="activar-curso" data-id="${curso.id_curso}"><i class='bx bx-undo me-2'></i>Activar Curso</a></li>
                </ul>
              </div>
            </td>
          `;
          cursosTableBody.appendChild(row);
        });

        initializeCourseDropdowns();
        setupCourseActionListeners(processedCursos);
        setupPagination(totalPages, currentPageCursos, paginationControlsCursos, 'curso');
        console.log("DEBUG: Renderizado de cursos inactivos completado.");
      } catch (error) {
        console.error('❌ Error al cargar cursos inactivos:', error);
        cursosTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">Error al cargar cursos inactivos. Intente nuevamente.</td></tr>`;
      }
    }

    // Función principal para cargar materias inactivos en la tabla
    async function loadInactiveMaterias(page) {
      console.log(`DEBUG: loadInactiveMaterias called for page ${page}.`);
      materiasTableBody.innerHTML = `<tr><td colspan="5" class="text-center">Cargando materias...</td></tr>`; // Colspan ajustado a 5
      paginationControlsMaterias.innerHTML = ''; 

      try {
        let response = await fetch(`${API_BASE_URL}/materias/papelera?page=${page}&limit=${itemsPerPage}`);
        if (!response.ok && response.status === 404) {
          console.log("DEBUG: Endpoint /materias/papelera no encontrado, intentando con /materias?estado=0.");
          response = await fetch(`${API_BASE_URL}/materias?estado=0&page=${page}&limit=${itemsPerPage}`);
        }
        
        if (!response.ok) {
          if (response.status === 404) {
            materiasTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">No se encontraron materias inactivas.</td></tr>`; // Colspan ajustado a 5
            console.log("DEBUG: 404 - No se encontraron materias inactivas.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const materias = data.materias; 
        const totalPages = data.totalPages;
        currentPageMaterias = data.currentPage;

        console.log("DEBUG: Datos de materias inactivos recibidos del backend:", data);

        materiasTableBody.innerHTML = ''; 

        if (!materias || materias.length === 0) {
          materiasTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-muted">No se encontraron materias inactivas.</td></tr>`; // Colspan ajustado a 5
          console.log("DEBUG: Array de materias inactivos vacío después de fetch.");
          return;
        }

        const processedMaterias = Array.isArray(materias) ? materias.map(materia => ({
          ...materia,
          nombre_materia: materia.nombre_materia || 'N/A',
          periodoAcademicoNames: (typeof materia.periodoAcademicoNames === 'string' && materia.periodoAcademicoNames && materia.periodoAcademicoNames !== 'N/A') 
                                 ? materia.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                 : ['N/A'],
        })) : [];

        processedMaterias.forEach((materia, index) => {
          const materiaStatus = materia.activo === 1 ? 'Activo' : (materia.activo === 0 ? 'Inactivo' : 'Desconocido'); 
          const row = document.createElement('tr');
          row.dataset.id = materia.id_materia;

          row.innerHTML = `
            <td>${(currentPageMaterias - 1) * itemsPerPage + index + 1}</td>
            <td>${materia.periodoAcademicoNames.join(', ') || 'N/A'}</td> <!-- Aquí se muestra el Periodo Académico -->
            <td>${materia.nombre_materia}</td>
            <td>${materiaStatus}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButtonSubject${materia.id_materia}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButtonSubject${materia.id_materia}">
                  <li><a class="dropdown-item" href="#" data-action="activar-materia" data-id="${materia.id_materia}"><i class='bx bx-undo me-2'></i>Activar Materia</a></li>
                </ul>
              </div>
            </td>
          `;
          materiasTableBody.appendChild(row);
        });

        initializeSubjectDropdowns();
        setupSubjectActionListeners(processedMaterias);
        setupPagination(totalPages, currentPageMaterias, paginationControlsMaterias, 'materia');
        console.log("DEBUG: Renderizado de materias inactivos completado.");
      } catch (error) {
        console.error('❌ Error al cargar materias inactivos:', error);
        materiasTableBody.innerHTML = `<tr><td colspan="5" class="text-center text-danger">Error al cargar materias inactivos. Intente nuevamente.</td></tr>`; // Colspan ajustado a 5
      }
    }

    // Función principal para cargar secciones inactivos en la tabla (NUEVA)
    async function loadInactiveSecciones(page) {
      console.log(`DEBUG: loadInactiveSecciones called for page ${page}.`);
      seccionesTableBody.innerHTML = `<tr><td colspan="4" class="text-center">Cargando secciones...</td></tr>`; 
      paginationControlsSecciones.innerHTML = ''; 

      try {
        let response = await fetch(`${API_BASE_URL}/secciones-academicas/papelera?page=${page}&limit=${itemsPerPage}`);
        if (!response.ok && response.status === 404) {
          console.log("DEBUG: Endpoint /secciones-academicas/papelera no encontrado, intentando con /secciones-academicas?estado=0.");
          response = await fetch(`${API_BASE_URL}/secciones-academicas?estado=0&page=${page}&limit=${itemsPerPage}`);
        }
        
        if (!response.ok) {
          if (response.status === 404) {
            seccionesTableBody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No se encontraron secciones inactivas.</td></tr>`;
            console.log("DEBUG: 404 - No se encontraron secciones inactivas.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const secciones = data.secciones; 
        const totalPages = data.totalPages;
        currentPageSecciones = data.currentPage;

        console.log("DEBUG: Datos de secciones inactivos recibidos del backend:", data);

        seccionesTableBody.innerHTML = ''; 

        if (!secciones || secciones.length === 0) {
          seccionesTableBody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No se encontraron secciones inactivas.</td></tr>`;
          console.log("DEBUG: Array de secciones inactivos vacío después de fetch.");
          return;
        }

        secciones.forEach((seccion, index) => {
          const seccionStatus = seccion.estado === 1 ? 'Activo' : (seccion.estado === 0 ? 'Inactivo' : 'Desconocido'); 
          const row = document.createElement('tr');
          row.dataset.id = seccion.id_seccion;

          row.innerHTML = `
            <td>${(currentPageSecciones - 1) * itemsPerPage + index + 1}</td>
            <td>${seccion.seccion || 'N/A'}</td>
            <td>${seccionStatus}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButtonSection${seccion.id_seccion}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButtonSection${seccion.id_seccion}">
                  <li><a class="dropdown-item" href="#" data-action="activar-seccion" data-id="${seccion.id_seccion}"><i class='bx bx-undo me-2'></i>Activar Sección</a></li>
                </ul>
              </div>
            </td>
          `;
          seccionesTableBody.appendChild(row);
        });

        initializeSectionDropdowns();
        setupSectionActionListeners(secciones);
        setupPagination(totalPages, currentPageSecciones, paginationControlsSecciones, 'seccion');
        console.log("DEBUG: Renderizado de secciones inactivos completado.");
      } catch (error) {
        console.error('❌ Error al cargar secciones inactivas:', error);
        seccionesTableBody.innerHTML = `<tr><td colspan="4" class="text-center text-danger">Error al cargar secciones inactivas. Intente nuevamente.</td></tr>`;
      }
    }


    // Configurar listeners para los botones de acción en la tabla de estudiantes
    function setupStudentActionListeners(estudiantesData) {
        studentsTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleStudentActionClick); 
            item.addEventListener('click', handleStudentActionClick);

            function handleStudentActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const userId = e.currentTarget.dataset.id;
                const student = estudiantesData.find(s => s.id_usuario.toString() === userId);

                if (!student) {
                    console.error('Estudiante no encontrado para ID:', userId);
                    return;
                }

                switch (action) {
                    case 'activar-estudiante': 
                        activarEstudiante(student);
                        break;
                    default:
                        console.warn('Acción desconocida para estudiante:', action);
                }
            }
        });
    }

    // Configurar listeners para los botones de acción en la tabla de profesores
    function setupProfessorActionListeners(profesoresData) {
        profesoresTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleProfessorActionClick); 
            item.addEventListener('click', handleProfessorActionClick);

            function handleProfessorActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const userId = e.currentTarget.dataset.id;
                const professor = profesoresData.find(p => p.id_usuario.toString() === userId);

                if (!professor) {
                    console.error('Profesor no encontrado para ID:', userId);
                    return;
                }

                switch (action) {
                    case 'activar-profesor': 
                        activarProfesor(professor);
                        break;
                    default:
                        console.warn('Acción desconocida para profesor:', action);
                }
            }
        });
    }

    // Configurar listeners para los botones de acción en la tabla de cursos
    function setupCourseActionListeners(cursosData) {
        cursosTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleCourseActionClick); 
            item.addEventListener('click', handleCourseActionClick);

            function handleCourseActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const courseId = e.currentTarget.dataset.id;
                const course = cursosData.find(c => c.id_curso.toString() === courseId);

                if (!course) {
                    console.error('Curso no encontrado para ID:', courseId);
                    return;
                }

                switch (action) {
                    case 'activar-curso': 
                        activarCurso(course);
                        break;
                    default:
                        console.warn('Acción desconocida para curso:', action);
                }
            }
        });
    }

    // Configurar listeners para los botones de acción en la tabla de materias
    function setupSubjectActionListeners(materiasData) {
        materiasTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleSubjectActionClick); 
            item.addEventListener('click', handleSubjectActionClick);

            function handleSubjectActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const subjectId = e.currentTarget.dataset.id;
                const subject = materiasData.find(m => m.id_materia.toString() === subjectId);

                if (!subject) {
                    console.error('Materia no encontrada para ID:', subjectId);
                    return;
                }

                switch (action) {
                    case 'activar-materia': 
                        activarMateria(subject);
                        break;
                    default:
                        console.warn('Acción desconocida para materia:', action);
                }
            }
        });
    }

    // Configurar listeners para los botones de acción en la tabla de secciones (NUEVA)
    function setupSectionActionListeners(seccionesData) {
        seccionesTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleSectionActionClick); 
            item.addEventListener('click', handleSectionActionClick);

            function handleSectionActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const sectionId = e.currentTarget.dataset.id;
                const section = seccionesData.find(s => s.id_seccion.toString() === sectionId);

                if (!section) {
                    console.error('Sección no encontrada para ID:', sectionId);
                    return;
                }

                switch (action) {
                    case 'activar-seccion': 
                        activarSeccion(section);
                        break;
                    default:
                        console.warn('Acción desconocida para sección:', action);
                }
            }
        });
    }


    // Función para Activar Estudiante
    async function activarEstudiante(estudiante) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres activar al estudiante ${estudiante.primer_nombre} ${estudiante.primer_apellido}? Esto cambiará su estado a "Activo".`
        );

        if (!confirmResult) return;

        try {
            const response = await fetch(`${API_BASE_URL}/estudiantes/${estudiante.id_usuario}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 1 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al activar el estudiante');
            }

            mostrarMensajeExito(`Estudiante ${estudiante.primer_nombre} ${estudiante.primer_apellido} ha sido activado exitosamente.`);
            loadInactiveStudents(currentPageStudents); // Recargar la tabla de estudiantes
        } catch (error) {
            console.error('Error al activar estudiante:', error);
            mostrarErrorAlUsuario(`Error al activar al estudiante: ${error.message}`);
        }
    }

    // Función para Activar Profesor
    async function activarProfesor(profesor) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres activar al profesor ${profesor.primer_nombre} ${profesor.primer_apellido}? Esto cambiará su estado a "Activo".`
        );

        if (!confirmResult) return;

        try {
            const response = await fetch(`${API_BASE_URL}/profesores/${profesor.id_usuario}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 1 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al activar el profesor');
            }

            mostrarMensajeExito(`Profesor ${profesor.primer_nombre} ${profesor.primer_apellido} ha sido activado exitosamente.`);
            loadInactiveProfesores(currentPageProfesores); // Recargar la tabla de profesores
        } catch (error) {
            console.error('Error al activar profesor:', error);
            mostrarErrorAlUsuario(`Error al activar al profesor: ${error.message}`);
        }
    }

    // Función para Activar Curso
    async function activarCurso(curso) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres activar el curso ${curso.nombre_curso}? Esto cambiará su estado a "Activo".`
        );

        if (!confirmResult) return;

        try {
            // Se actualiza la ruta para que coincida con el backend
            const response = await fetch(`${API_BASE_URL}/cursos/${curso.id_curso}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 1 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al activar el curso');
            }

            mostrarMensajeExito(`Curso ${curso.nombre_curso} ha sido activado exitosamente.`);
            loadInactiveCursos(currentPageCursos); // Recargar la tabla de cursos
        } catch (error) {
            console.error('Error al activar curso:', error);
            mostrarErrorAlUsuario(`Error al activar el curso: ${error.message}`);
        }
    }

    // Función para Activar Materia
    async function activarMateria(materia) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres activar la materia ${materia.nombre_materia}? Esto cambiará su estado a "Activo".`
        );

        if (!confirmResult) return;

        try {
            // Se actualiza la ruta para que coincida con el backend
            const response = await fetch(`${API_BASE_URL}/materias/${materia.id_materia}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 1 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al activar la materia');
            }

            mostrarMensajeExito(`Materia ${materia.nombre_materia} ha sido activada exitosamente.`);
            loadInactiveMaterias(currentPageMaterias); // Recargar la tabla de materias
        } catch (error) {
            console.error('Error al activar materia:', error);
            mostrarErrorAlUsuario(`Error al activar la materia: ${error.message}`);
        }
    }

    // Función para Activar Sección (NUEVA)
    async function activarSeccion(seccion) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres activar la sección ${seccion.seccion}? Esto cambiará su estado a "Activo".`
        );

        if (!confirmResult) return;

        try {
            const response = await fetch(`${API_BASE_URL}/secciones-academicas/${seccion.id_seccion}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 1 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al activar la sección');
            }

            mostrarMensajeExito(`Sección ${seccion.seccion} ha sido activada exitosamente.`);
            loadInactiveSecciones(currentPageSecciones); // Recargar la tabla de secciones
        } catch (error) {
            console.error('Error al activar sección:', error);
            mostrarErrorAlUsuario(`Error al activar la sección: ${error.message}`);
        }
    }


    // Función de paginación (generalizada para estudiantes, profesores, cursos, materias y secciones)
    function setupPagination(totalPages, currentPage, paginationContainer, type) {
      paginationContainer.innerHTML = '';
      if (totalPages <= 1) return;

      const ul = document.createElement('ul');
      ul.className = 'pagination-list flex justify-center items-center gap-2';

      const prevLi = document.createElement('li');
      prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      const prevLink = document.createElement('a');
      prevLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      prevLink.href = '#';
      prevLink.textContent = 'Anterior';
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage > 1) {
          if (type === 'student') loadInactiveStudents(currentPage - 1);
          else if (type === 'profesor') loadInactiveProfesores(currentPage - 1);
          else if (type === 'curso') loadInactiveCursos(currentPage - 1); 
          else if (type === 'materia') loadInactiveMaterias(currentPage - 1); 
          else if (type === 'seccion') loadInactiveSecciones(currentPage - 1); // Paginación de secciones
        }
      });
      prevLi.appendChild(prevLink);
      ul.appendChild(prevLi);

      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, currentPage + 2);

      if (startPage > 1) {
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = '1';
        link.addEventListener('click', (e) => {
          e.preventDefault();
          if (type === 'student') loadInactiveStudents(1);
          else if (type === 'profesor') loadInactiveProfesores(1);
          else if (type === 'curso') loadInactiveCursos(1); 
          else if (type === 'materia') loadInactiveMaterias(1); 
          else if (type === 'seccion') loadInactiveSecciones(1); // Paginación de secciones
        });
        li.appendChild(link);
        ul.appendChild(li);
        if (startPage > 2) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement('li');
        li.className = `page-item ${i === currentPage ? 'active' : ''}`;
        const link = document.createElement('a');
        link.className = `page-link rounded-lg px-3 py-1 ${i === currentPage ? 'bg-purple-800' : 'bg-gray-700'} text-white hover:bg-purple-600`;
        link.href = '#';
        link.textContent = i;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          if (type === 'student') loadInactiveStudents(i);
          else if (type === 'profesor') loadInactiveProfesores(i);
          else if (type === 'curso') loadInactiveCursos(i); 
          else if (type === 'materia') loadInactiveMaterias(i); 
          else if (type === 'seccion') loadInactiveSecciones(i); // Paginación de secciones
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = totalPages;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          if (type === 'student') loadInactiveStudents(totalPages);
          else if (type === 'profesor') loadInactiveProfesores(totalPages);
          else if (type === 'curso') loadInactiveCursos(totalPages); 
          else if (type === 'materia') loadInactiveMaterias(totalPages); 
          else if (type === 'seccion') loadInactiveSecciones(totalPages); // Paginación de secciones
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      const nextLi = document.createElement('li');
      nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
      const nextLink = document.createElement('a');
      nextLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      nextLink.href = '#';
      nextLink.textContent = 'Siguiente';
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage < totalPages) {
          if (type === 'student') loadInactiveStudents(currentPage + 1);
          else if (type === 'profesor') loadInactiveProfesores(currentPage + 1);
          else if (type === 'curso') loadInactiveCursos(currentPage + 1); 
          else if (type === 'materia') loadInactiveMaterias(currentPage + 1); 
          else if (type === 'seccion') loadInactiveSecciones(currentPage + 1); // Paginación de secciones
        }
      });
      nextLi.appendChild(nextLink);
      ul.appendChild(nextLi);

      paginationContainer.appendChild(ul);
    }

    // Cargar todas las tablas al inicio
    loadInactiveStudents(1); 
    loadInactiveProfesores(1);
    loadInactiveCursos(1); 
    loadInactiveMaterias(1); 
    loadInactiveSecciones(1); // Cargar secciones inactivas (NUEVA)

    // Funciones auxiliares (manteniendo las tuyas si las usas en otras partes de tu app)
    function mostrarError(elemento, mensaje) {
      elemento.classList.add('is-invalid');
      const errorElement = elemento.nextElementSibling || elemento.parentNode.querySelector('.invalid-feedback');
      if (errorElement) {
        errorElement.textContent = mensaje;
        errorElement.style.display = 'block';
      }
    }

    function limpiarError(elemento) {
      elemento.classList.remove('is-invalid');
      const errorElement = elemento.nextElementSibling || elemento.parentNode.querySelector('.invalid-feedback');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }

    function mostrarMensajeExito(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-success position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      
      setTimeout(() => {
        alerta.remove();
      }, 3000);
    }

    function mostrarErrorAlUsuario(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-danger position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      
      setTimeout(() => {
        alerta.remove();
      }, 5000);
    }

    // Función para mostrar un modal de confirmación personalizado (reutilizada)
    function mostrarConfirmacion(mensaje) {
      return new Promise((resolve) => {
        const confirmModalHtml = `
          <div class="modal fade" id="customConfirmModal" tabindex="-1" aria-labelledby="customConfirmModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="customConfirmModalLabel">Confirmación</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                  ${mensaje}
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                  <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirmar</button>
                </div>
              </div>
            </div>
          </div>
        `;
        document.body.insertAdjacentHTML('beforeend', confirmModalHtml);
        const confirmModalElement = document.getElementById('customConfirmModal');
        const customConfirmModal = new bootstrap.Modal(confirmModalElement);

        const confirmActionBtn = document.getElementById('confirmActionBtn');
        confirmActionBtn.addEventListener('click', () => {
          customConfirmModal.hide();
          resolve(true);
        });

        confirmModalElement.addEventListener('hidden.bs.modal', () => {
          confirmModalElement.remove();
          resolve(false); 
        }, { once: true }); 

        customConfirmModal.show();
      });
    }
  });
</script>
