---
// src/pages/admin/materias.astro
import "../../style/style-admin/materias.css";
---

<section class="data-content-section">
  <!-- Nueva sección del Título "Materias Académicas" -->
  <section class="materias-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Materias Académicas</h2>
    </div>
  </section>

  <!-- Sección de Tarjeta Consolidada de Resumen de Materias -->
  <section class="content-info-data">
    <section class="data-general-control">
      <!-- Tarjeta Consolidada de Materias -->
      <div class="registro-control consolidated-materias-card">
        <div class="card-icon-title">
          <i class='bx bxs-book-bookmark'></i> <!-- Icono para materias -->
          <h5 class="card-title">Resumen de Materias Académicas</h5>
        </div>
        <div class="materias-summary-grid">
          <div class="summary-item">
            <span class="summary-count" id="totalMateriasCount">0</span>
            <span class="summary-label">Total</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="activeMateriasCount">0</span>
            <span class="summary-label">Activas</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="totalEstudiantesEnMateriasCount">0</span>
            <span class="summary-label">Estudiantes Inscritos</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="totalProfesoresAsignadosMateriasCount">0</span>
            <span class="summary-label">Profesores Asignados</span>
          </div>
        </div>
        <!-- Botón para añadir materia, dentro de la tarjeta de resumen -->
        <div class="mt-3 text-center">
          <div class="btn-accion-control">
            <button class="btn btn-card" id="btnAnadirMateria" data-bs-toggle="modal" data-bs-target="#modalAnadirMateria">
              <i class='bx bx-plus me-2'></i>Añadir Materia
            </button>
          </div>
        </div>
      </div>
    </section>
  </section>

  <!-- La tabla de Materias -->
  <div class="display-table" id="tableMaterias">
    <div class="d-flex justify-content-end mb-3">
      <input type="text" id="searchInput" class="form-control w-25" placeholder="Buscar materia...">
    </div>
    <div class="tabla-info-person">
      <table class="table table-dark table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Nombre de la Materia</th>
            <th scope="col">Curso Asociado</th>
            <th scope="col">Período</th>
            <th scope="col">Sección</th>
            <th scope="col">Profesores Asignados</th>
            <th scope="col">Estudiantes Inscritos</th>
            <th scope="col">Estado</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="materiasTableBody">
          <!-- Contenido de la tabla de materias se carga aquí dinámicamente -->
          <tr>
            <td colspan="9" class="text-center">Cargando materias...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Paginación -->
    <nav aria-label="Page navigation" class="pagination-container">
      <ul class="pagination-list" id="paginationMaterias">
        <!-- Los botones de paginación se insertarán aquí -->
      </ul>
    </nav>
  </div>
</section>

<!-- Modales -->

<!-- Modal para Añadir Materia -->
<div class="modal fade" id="modalAnadirMateria" tabindex="-1" aria-labelledby="modalAnadirMateriaLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAnadirMateriaLabel">Añadir Nueva Materia</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAnadirMateria">
          <div class="mb-3">
            <label for="nombreMateria" class="form-label">Nombre de la Materia <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="nombreMateria" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre de la materia.</div>
          </div>
          <div class="mb-3">
            <label for="idCurso" class="form-label">Curso Asociado <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="idCurso" required>
              <option value="">Selecciona un curso</option>
              <!-- Opciones de cursos se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona un curso.</div>
          </div>
          <div class="mb-3">
            <label for="idPeriodo" class="form-label">Período <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="idPeriodo" required>
              <option value="">Selecciona un período</option>
              <!-- Opciones de períodos se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona un período.</div>
          </div>
          <div class="mb-3">
            <label for="idSeccion" class="form-label">Sección <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="idSeccion" required>
              <option value="">Selecciona una sección</option>
              <!-- Opciones de secciones se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona una sección.</div>
          </div>
          <div class="d-flex justify-content-between mt-4">
            <button type="reset" class="btn btn-secondary">Limpiar</button>
            <button type="submit" class="btn btn-primary">Añadir Materia</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Materia -->
<div class="modal fade" id="modalEditarMateria" tabindex="-1" aria-labelledby="modalEditarMateriaLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarMateriaLabel">Editar Materia</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarMateria">
          <input type="hidden" id="editMateriaId">
          <div class="mb-3">
            <label for="editNombreMateria" class="form-label">Nombre de la Materia <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="editNombreMateria" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre de la materia.</div>
          </div>
          <div class="mb-3">
            <label for="editIdCurso" class="form-label">Curso Asociado <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="editIdCurso" required>
              <option value="">Selecciona un curso</option>
              <!-- Opciones de cursos se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona un curso.</div>
          </div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Asignar Estudiantes y Profesor -->
<div class="modal fade" id="modalAsignarUsuarios" tabindex="-1" aria-labelledby="modalAsignarUsuariosLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAsignarUsuariosLabel">Asignar Estudiantes y Profesor a la Materia</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <form id="formAsignarUsuarios">
      <div class="modal-body">
        <div class="row">
          <!-- Sección de estudiantes -->
          <div class="col-md-7 border-end">
            <h6>Estudiantes</h6>
            <input type="text" class="form-control mb-2" id="buscarEstudiante" placeholder="Buscar estudiante...">
            <div class="lista-usuarios" id="listaEstudiantes"></div>
          </div>
          <!-- Sección de profesores -->
          <div class="col-md-5">
            <h6>Profesor</h6>
            <input type="text" class="form-control mb-2" id="buscarProfesor" placeholder="Buscar profesor...">
            <div class="lista-usuarios" id="listaProfesores"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="submit" class="btn btn-primary" id="btnGuardarAsignacion">Guardar Asignación</button>
      </div>
      </form>
    </div>
  </div>
</div>



<!-- Scripts de Bootstrap y JavaScript personalizado -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001/api'; // Ajusta esto a la URL de tu backend

  // ==========================================================
  // FUNCIONES DE UTILIDAD PARA MODALES DE CONFIRMACIÓN Y ALERTA
  // Reutilizadas de tus implementaciones anteriores
  // ==========================================================

  /**
   * Muestra un modal de confirmación personalizado.
   * @param {string} mensaje El mensaje a mostrar en el modal.
   * @param {string} titulo El título del modal.
   * @returns {Promise<boolean>} Resuelve a true si se confirma, false si se cancela o se cierra.
   */
  async function mostrarConfirmacion(mensaje, titulo = "Confirmación") {
    return new Promise((resolve) => {
      const modalId = 'customConfirmModal';
      let confirmModalElement = document.getElementById(modalId);

      // Si el modal ya existe, lo eliminamos para evitar duplicados de listeners
      if (confirmModalElement) {
        confirmModalElement.remove();
      }

      const confirmModalHtml = `
        <div class="modal fade" id="${modalId}" tabindex="-1" aria-labelledby="customConfirmModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="customConfirmModalLabel">${titulo}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
                  <i class='bx bx-x'></i>
                </button>
              </div>
              <div class="modal-body">
                ${mensaje}
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtnModal">Confirmar</button>
              </div>
            </div>
          </div>
        </div>
      `;
      document.body.insertAdjacentHTML('beforeend', confirmModalHtml);

      confirmModalElement = document.getElementById(modalId);
      const customConfirmModal = new bootstrap.Modal(confirmModalElement);

      const confirmActionBtn = document.getElementById('confirmActionBtnModal');
      const cleanupAndResolve = (result) => {
        customConfirmModal.hide(); // Oculta el modal
        // Espera a que el modal esté completamente oculto antes de removerlo
        confirmModalElement.addEventListener('hidden.bs.modal', () => {
          confirmModalElement.remove(); // Elimina el elemento del DOM
          resolve(result);
        }, { once: true });
      };

      if (confirmActionBtn) {
        confirmActionBtn.addEventListener('click', () => {
          cleanupAndResolve(true);
        }, { once: true });
      } else {
        console.error("ERROR: [mostrarConfirmacion] Botón 'confirmActionBtnModal' no encontrado.");
        cleanupAndResolve(false);
      }

      // Añadir listener para el cierre del modal (ej. tecla ESC, clic fuera)
      confirmModalElement.addEventListener('hidden.bs.modal', () => {
        // Si ya se resolvió por un clic en los botones, no hacemos nada.
        // Si se cierra por otras vías, resolvemos a false.
        // Esto se maneja mejor con la bandera `once: true` y `cleanupAndResolve`
        // asegurando que solo se resuelva una vez.
      }, { once: true }); // Usar `once: true` para que el listener se remueva solo

      customConfirmModal.show();
    });
  }

  /**
   * Muestra un mensaje de alerta temporal en la parte superior de la pantalla.
   * @param {string} mensaje El mensaje a mostrar.
   * @param {string} tipo El tipo de alerta ('success' o 'danger').
   * @param {number} duracion La duración en milisegundos (por defecto 5000).
   */
  function mostrarAlerta(mensaje, tipo, duracion = 5000) {
    const alertContainer = document.getElementById('alertContainer') || (() => {
      const div = document.createElement('div');
      div.id = 'alertContainer';
      div.style.position = 'fixed';
      div.style.top = '20px';
      div.style.left = '50%';
      div.style.transform = 'translateX(-50%)';
      div.style.zIndex = '9999';
      div.style.width = 'auto';
      div.style.maxWidth = '90%';
      document.body.appendChild(div);
      return div;
    })();

    const alertElement = document.createElement('div');
    alertElement.className = `alert alert-${tipo} alert-dismissible fade show`;
    alertElement.role = 'alert';
    alertElement.textContent = mensaje;

    alertContainer.appendChild(alertElement);

    setTimeout(() => {
      // Usa Bootstrap's native dismiss method
      const bsAlert = new bootstrap.Alert(alertElement);
      bsAlert.dispose(); // Cierra el alerta y lo remueve del DOM
    }, duracion);
  }

  // ==========================================================
  // LÓGICA DE CARGA DE DATOS Y MANEJO DE LA TABLA
  // ==========================================================

  let currentPage = 1;
  const itemsPerPage = 10; // Ajusta según tu preferencia

  document.addEventListener('DOMContentLoaded', async () => {
    await fetchMateriasSummary();
    await fetchMaterias(currentPage); // Carga inicial sin término de búsqueda
    await loadSelectOptions();

    // Event listener para el formulario de añadir materia
    const formAnadirMateria = document.getElementById('formAnadirMateria');
    if (formAnadirMateria) {
      formAnadirMateria.addEventListener('submit', anadirMateria);
    }

    // Event listener para el formulario de editar materia
    const formEditarMateria = document.getElementById('formEditarMateria');
    if (formEditarMateria) {
      formEditarMateria.addEventListener('submit', editarMateria);
    }

    // Agregar lógica para guardar la asignación de estudiantes y profesor
    const modalAsignar = document.getElementById('modalAsignarUsuarios');
    if (modalAsignar) {
      const form = modalAsignar.querySelector('form');
      if (form) {
        form.addEventListener('submit', guardarAsignacionUsuarios);
      } else {
        const btnGuardar = modalAsignar.querySelector('button[type="submit"]');
        if (btnGuardar) {
          btnGuardar.addEventListener('click', guardarAsignacionUsuarios);
        }
      }
    }

    // Event listener para el campo de búsqueda
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', () => {
            currentPage = 1; // Reiniciar a la primera página en cada búsqueda
            fetchMaterias(currentPage, searchInput.value.trim());
        });
    }
  });

  let materiaIdAsignar = null;
  let idPeriodoAsignar = null; // NUEVO: Para almacenar el id_periodo para la asignación
  let estudiantesAsignadosPrevios = [];
  let profesorAsignadoPrevio = null;
  let nombreProfesorPrevio = '';

  async function handleAsignarUsuarios(event) {
    event.preventDefault();
    materiaIdAsignar = event.currentTarget.dataset.id;
    idPeriodoAsignar = event.currentTarget.dataset.periodoId; // OBTENER EL ID_PERIODO DEL BOTÓN

    if (!idPeriodoAsignar) {
        mostrarAlerta('No se pudo obtener el ID del período para la asignación.', 'danger');
        return;
    }

    // Obtener los datos actuales de la materia (estudiantes y profesor asignados)
    try {
      // Modificar la llamada para incluir id_periodo y obtener solo las asignaciones de ese periodo
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaIdAsignar}?id_periodo=${idPeriodoAsignar}`);
      if (!response.ok) throw new Error('No se pudo obtener la información de la materia.');
      const materia = await response.json();

      // Filtrar estudiantes y profesores por el id_periodo si la API devuelve todas las asignaciones
      // (asumo que la API ahora ya filtra por periodo en la ruta GET /materias-academicas/:id)
      estudiantesAsignadosPrevios = materia.estudiantes_info.map(e => String(e.id_usuario));
      // Solo permitimos un profesor (el primero si hay varios)
      profesorAsignadoPrevio = materia.profesores_info.length > 0 ? String(materia.profesores_info[0].id_usuario) : null;
      nombreProfesorPrevio = materia.profesores_info.length > 0 ? materia.profesores_info[0].nombre_completo : '';
      
      // Cargar estudiantes y profesores activos
      const estudiantes = await fetchEstudiantesActivos();
      const profesores = await fetchProfesoresActivos();
      renderListaEstudiantes(estudiantes, estudiantesAsignadosPrevios);
      renderListaProfesores(profesores, profesorAsignadoPrevio);
      // Mostrar el modal
      const modalElement = document.getElementById('modalAsignarUsuarios');
      const bootstrapModal = new bootstrap.Modal(modalElement);
      bootstrapModal.show();
    } catch (error) {
      mostrarAlerta('No se pudo cargar la información de la materia.', 'danger');
      return;
    }
  }

  function renderListaEstudiantes(estudiantes, seleccionados = []) {
    const cont = document.getElementById('listaEstudiantes');
    cont.innerHTML = '';
    estudiantes.forEach(est => {
      const div = document.createElement('div');
      div.className = 'usuario-item';
      div.dataset.id = est.id_usuario;
      div.innerHTML = `<span>${est.nombre_completo}</span><span class="check-icon" style="display:none;">✔️</span>`;
      if (seleccionados.includes(String(est.id_usuario))) {
        div.classList.add('selected');
        div.querySelector('.check-icon').style.display = 'inline';
      }
      div.addEventListener('click', function() {
        div.classList.toggle('selected');
        div.querySelector('.check-icon').style.display = div.classList.contains('selected') ? 'inline' : 'none';
      });
      cont.appendChild(div);
    });
  }

  function renderListaProfesores(profesores, seleccionado = null) {
    const cont = document.getElementById('listaProfesores');
    cont.innerHTML = '';
    profesores.forEach(prof => {
      const div = document.createElement('div');
      div.className = 'usuario-item';
      div.dataset.id = prof.id_usuario;
      div.innerHTML = `<input type="radio" name="profesorSeleccionado" value="${prof.id_usuario}" ${seleccionado === String(prof.id_usuario) ? 'checked' : ''}> <span>${prof.nombre_completo}</span>`;
      cont.appendChild(div);
    });
  }

  async function guardarAsignacionUsuarios(event) {
    try {
      event.preventDefault();
      console.log('[DEBUG] Se ejecuta guardarAsignacionUsuarios');
      if (!materiaIdAsignar || !idPeriodoAsignar) { // Verificar también idPeriodoAsignar
        mostrarAlerta('No se pudo identificar la materia o el período.', 'danger');
        return;
      }

      // Obtener estudiantes seleccionados
      const estudiantesSeleccionados = Array.from(document.querySelectorAll('#listaEstudiantes .usuario-item.selected')).map(div => div.dataset.id);
      // Obtener profesor seleccionado correctamente (radio button)
      const profesorRadio = document.querySelector('#listaProfesores input[type="radio"]:checked');
      const profesoresSeleccionados = profesorRadio ? [profesorRadio.value] : [];

      // Validación básica
      if (estudiantesSeleccionados.length === 0 && profesoresSeleccionados.length === 0) {
        mostrarAlerta('Selecciona al menos un estudiante o un profesor.', 'danger');
        return;
      }

      // Obtener nombre_materia e id_curso de la fila de la tabla (no es estrictamente necesario para la API de asignación,
      // pero se mantiene si se usa para registro de acciones u otra lógica frontend)
      const fila = document.querySelector(`tr[data-id="${materiaIdAsignar}"][data-periodo-id="${idPeriodoAsignar}"]`); // Buscar la fila con id_periodo
      let nombre_materia = '';
      let id_curso = '';
      if (fila) {
        nombre_materia = fila.querySelector('td:nth-child(2)')?.textContent?.trim() || '';
        id_curso = fila.dataset.cursoId || '';
      }

      if (!nombre_materia || !id_curso) {
        // Esto puede ocurrir si la fila no se encuentra porque la tabla se ha recargado.
        // Podríamos hacer una llamada extra a la API para obtener los detalles de la materia
        // si es crucial para esta función, pero para la asignación real no lo es.
        console.warn('No se pudo obtener la información completa de la materia desde la tabla. Continuando con asignación.');
      }

      // Confirmar si se va a cambiar el profesor asignado
      if (
        profesorAsignadoPrevio && 
        profesoresSeleccionados.length > 0 && 
        profesorAsignadoPrevio !== profesoresSeleccionados[0]
      ) {
        const confirmado = await mostrarConfirmacion(
          `¿Estás seguro? Actualmente esta materia tiene asignado al profesor: <b>${nombreProfesorPrevio}</b>. Si continúas, se actualizará el profesor asignado.`,
          'Confirmar cambio de profesor'
        );
        if (!confirmado) return;
      }

      // Log de depuración
      console.log('[DEBUG] Datos a enviar:', {
        estudiantes: estudiantesSeleccionados,
        profesores: profesoresSeleccionados,
        id_periodo: idPeriodoAsignar // ENVIAR id_periodo a la API
      });

      // Usar POST para agregar asignaciones
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaIdAsignar}/asignar`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          estudiantes: estudiantesSeleccionados.map(Number),
          profesores: profesoresSeleccionados.map(Number),
          id_periodo: Number(idPeriodoAsignar) // Asegurar que sea número
        })
      });

      // Log de depuración
      console.log('[DEBUG] Respuesta del backend:', response);

      let result = null;
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        result = await response.json();
      } else {
        const text = await response.text();
        throw new Error('Respuesta inesperada del servidor: ' + text);
      }

      if (!response.ok) {
        console.error('[DEBUG] Error del backend:', result);
        mostrarAlerta(result?.error || 'Error al asignar estudiantes/profesor.', 'danger');
        // No cerrar el modal
        return;
      }

      mostrarAlerta('¡Asignación guardada exitosamente!', 'success');
      // Cerrar el modal solo si todo salió bien
      const modalElement = document.getElementById('modalAsignarUsuarios');
      const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
      if (bootstrapModal) bootstrapModal.hide();
      // Actualizar la tabla
      await fetchMateriasSummary();
      await fetchMaterias(currentPage);
    } catch (error) {
      console.error('[DEBUG] Error inesperado en guardarAsignacionUsuarios:', error);
      mostrarAlerta(error.message || 'Ocurrió un error inesperado al asignar.', 'danger');
      // No cerrar el modal
    }
  }

  async function fetchMateriasSummary() {
    try {
      const response = await fetch(`${API_BASE_URL}/materias/resumen`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      document.getElementById('totalMateriasCount').textContent = data.totalMaterias;
      document.getElementById('activeMateriasCount').textContent = data.materiasActivas;
      document.getElementById('totalEstudiantesEnMateriasCount').textContent = data.totalEstudiantesEnMaterias;
      document.getElementById('totalProfesoresAsignadosMateriasCount').textContent = data.totalProfesoresAsignadosMaterias;
    } catch (error) {
      console.error('Error al obtener resumen de materias:', error);
      mostrarAlerta('No se pudo cargar el resumen de materias.', 'danger');
    }
  }

  async function fetchMaterias(page = 1, searchTerm = '') {
    try {
      let url = `${API_BASE_URL}/materias-academicas?page=${page}&limit=${itemsPerPage}`;
      if (searchTerm) {
        url += `&search=${encodeURIComponent(searchTerm)}`;
      }

      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      
      const tableBody = document.getElementById('materiasTableBody');
      tableBody.innerHTML = '';
      
      if (!data.materias || data.materias.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="9" class="text-center">No se encontraron materias que coincidan con "${searchTerm}".</td></tr>`;
        updatePagination(0, 1); // Reset pagination if no results
        return;
      }

      data.materias.forEach((materia, index) => {
        // Inicializar arrays si no existen
        if (!Array.isArray(materia.estudiantes_info)) materia.estudiantes_info = [];
        if (!Array.isArray(materia.profesores_info)) materia.profesores_info = [];
        
        // **MODIFICADO**: Filtrar profesores por el id_periodo específico de esta fila
        const profesoresParaEstaFila = materia.profesores_info.filter(p => p.id_periodo === materia.id_periodo);
        const nombreProfesor = profesoresParaEstaFila.length > 0
          ? (profesoresParaEstaFila.length === 1
              ? profesoresParaEstaFila[0].nombre_completo
              : `${profesoresParaEstaFila[0].nombre_completo} y ${profesoresParaEstaFila.length - 1} más...`)
          : 'Sin asignar';

        // **MODIFICADO**: Filtrar estudiantes por el id_periodo específico de esta fila
        const estudiantesParaEstaFila = materia.estudiantes_info.filter(e => e.id_periodo === materia.id_periodo);
        const estudiantesInscritos = estudiantesParaEstaFila.length > 0
          ? estudiantesParaEstaFila.length
          : (typeof materia.total_estudiantes_materia === 'number' && materia.total_estudiantes_materia > 0
              ? materia.total_estudiantes_materia
              : 'Sin estudiantes');
              
        const row = tableBody.insertRow();
        row.dataset.id = materia.id_materia;
        row.dataset.cursoId = materia.id_curso;
        row.dataset.periodoId = materia.id_periodo; // AGREGAR id_periodo al dataset de la fila
        row.innerHTML = `
          <td>${((page - 1) * itemsPerPage) + index + 1}</td>
          <td>${materia.nombre_materia}</td>
          <td>${materia.nombre_curso || 'N/A'}</td>
          <td>${materia.nombre_periodo || 'N/A'}</td>
          <td>${materia.nombre_seccion || 'N/A'}</td>
          <td>${nombreProfesor}</td>
          <td>${estudiantesInscritos}</td>
          <td>
            <span>${materia.estado === 1 ? 'Activo' : (materia.estado === 0 ? 'Inactivo' : 'Desconocido')}</span>
          </td>
          <td>
            <a href="/Admin-Control/actividades-notas?materiaId=${materia.id_materia}&periodoId=${materia.id_periodo}" class="btn btn-primary btn-sm">
              <i class='bx bx-list-check me-1'></i> Ver Actividades/Notas
            </a>
            ${materia.estado === 1 ? `
              <button type="button" class="btn btn-primary btn-sm desactivar-materia-btn" data-id="${materia.id_materia}">
                <i class='bx bx-pause me-1'></i> Desactivar Materia
              </button>
            ` : ''}
          </td>
        `;
      });
      // Actualizar paginación con el total de resultados de la búsqueda
      updatePagination(data.total, page);
      
      // Adjuntar event listeners
      attachTableEventListeners();
    } catch (error) {
      console.error('Error al obtener materias:', error);
      mostrarAlerta('No se pudieron cargar las materias.', 'danger');
    }
  }

  function updatePagination(totalItems, currentPage) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const paginationContainer = document.getElementById('paginationMaterias');
    paginationContainer.innerHTML = '';

    if (totalPages <= 1) return;

    const ul = document.createElement('ul');
    ul.className = 'pagination justify-content-center';

    // Botón Anterior
    const prevLi = document.createElement('li');
    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    prevLi.innerHTML = `
      <a class="page-link" href="#" aria-label="Anterior" data-page="${currentPage - 1}">
        <span aria-hidden="true">&laquo;</span>
      </a>
    `;
    ul.appendChild(prevLi);

    // Números de página
    for (let i = 1; i <= totalPages; i++) {
      if (
        i === 1 || // Primera página
        i === totalPages || // Última página
        (i >= currentPage - 2 && i <= currentPage + 2) // Páginas alrededor de la actual
      ) {
        const li = document.createElement('li');
        li.className = `page-item ${i === currentPage ? 'active' : ''}`;
        li.innerHTML = `
          <a class="page-link" href="#" data-page="${i}">${i}</a>
        `;
        ul.appendChild(li);
      } else if (
        i === currentPage - 3 || // Antes del rango
        i === currentPage + 3 // Después del rango
      ) {
        const li = document.createElement('li');
        li.className = 'page-item disabled';
        li.innerHTML = '<span class="page-link">...</span>';
        ul.appendChild(li);
      }
    }

    // Botón Siguiente
    const nextLi = document.createElement('li');
    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    nextLi.innerHTML = `
      <a class="page-link" href="#" aria-label="Siguiente" data-page="${currentPage + 1}">
        <span aria-hidden="true">&raquo;</span>
      </a>
    `;
    ul.appendChild(nextLi);

    paginationContainer.appendChild(ul);

    // Agregar event listeners a los botones de paginación
    paginationContainer.querySelectorAll('.page-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(e.target.closest('.page-link').dataset.page);
        if (!isNaN(page) && page !== currentPage) {
          currentPage = page;
          fetchMaterias(page, document.getElementById('searchInput').value.trim()); // Mantener el término de búsqueda al cambiar de página
        }
      });
    });
  }

  // Cargar opciones para los selects de cursos, estudiantes y profesores
  async function loadSelectOptions() {
    const idCursoSelect = document.getElementById('idCurso');
    const editIdCursoSelect = document.getElementById('editIdCurso');
    const idPeriodoSelect = document.getElementById('idPeriodo');
    const idSeccionSelect = document.getElementById('idSeccion');

    try {
      const cursos = await fetch(`${API_BASE_URL}/cursos`).then(r => r.json());
      idCursoSelect.innerHTML = '<option value="">Selecciona una opción</option>';
      cursos.forEach(curso => {
        idCursoSelect.innerHTML += `<option value="${curso.id_curso}">${curso.nombre_curso} - ${curso.nombre_periodo}</option>`;
      });

      // Obtener periodos (solo activos)
      const periodosResponse = await fetch(`${API_BASE_URL}/periodos`);
      const periodos = await periodosResponse.json();
      periodos.forEach(periodo => {
        idPeriodoSelect.innerHTML += `<option value="${periodo.id_periodo}">${periodo.periodo}</option>`;
      });

      // Obtener secciones
      const seccionesResponse = await fetch(`${API_BASE_URL}/secciones`);
      const secciones = await seccionesResponse.json();
      idSeccionSelect.innerHTML = '<option value="">Selecciona una sección</option>';
      secciones.forEach(seccion => {
        idSeccionSelect.innerHTML += `<option value="${seccion.id_seccion}">${seccion.seccion}</option>`;
      });

    } catch (error) {
      console.error('Error al cargar opciones de select:', error);
      mostrarAlerta('Error al cargar opciones de cursos, periodos o secciones.', 'danger');
    }
  }

  function populateSelect(selectElement, items, idKey, nameKey) {
    selectElement.innerHTML = '<option value="">Selecciona una opción</option>'; // Restablecer a la opción por defecto
    items.forEach(item => {
      const option = document.createElement('option');
      option.value = item[idKey];
      option.textContent = item[nameKey];
      selectElement.appendChild(option);
    });
  }

  function attachTableEventListeners() {
    // Event listeners para botones de editar
    document.querySelectorAll('.edit-materia-btn').forEach(button => {
      button.removeEventListener('click', handleEditMateria); // Evitar duplicados
      button.addEventListener('click', handleEditMateria);
    });

    // Event listeners para botones de cambiar estado
    document.querySelectorAll('.estado-materia-btn').forEach(button => {
      button.removeEventListener('click', handleChangeMateriaEstado); // Evitar duplicados
      button.addEventListener('click', handleChangeMateriaEstado);
    });

    // Event listeners para botones de eliminar
    document.querySelectorAll('.delete-materia-btn').forEach(button => {
      button.removeEventListener('click', handleDeleteMateria); // Evitar duplicados
      button.addEventListener('click', handleDeleteMateria);
    });

    // Event listeners para el nuevo botón de asignar usuarios
    // Asegurarse de que el dataset.periodoId se pasa a handleAsignarUsuarios
    document.querySelectorAll('.asignar-usuarios-btn, .editar-usuarios-btn').forEach(button => {
      button.removeEventListener('click', handleAsignarUsuarios); // Evitar duplicados
      button.addEventListener('click', handleAsignarUsuarios);
    });

    // Nuevo Event listener para el botón de desactivar materia
    document.querySelectorAll('.desactivar-materia-btn').forEach(button => {
        button.removeEventListener('click', desactivarMateria); // Evitar duplicados
        button.addEventListener('click', (event) => {
            const materiaId = event.currentTarget.dataset.id;
            desactivarMateria(materiaId);
        });
    });
  }

  // ==========================================================
  // MANEJO DE FORMULARIOS Y ACCIONES
  // ==========================================================

  async function anadirMateria(event) {
    event.preventDefault();

    const form = event.target;
    const nombreMateria = form.elements['nombreMateria'].value.trim();
    const idCurso = form.elements['idCurso'].value;
    const idPeriodo = form.elements['idPeriodo'].value;
    const idSeccion = form.elements['idSeccion'].value;

    // Validación básica
    if (!nombreMateria || !idCurso || !idPeriodo || !idSeccion) {
      form.classList.add('was-validated'); // Muestra feedback de Bootstrap
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      id_curso: parseInt(idCurso),
      nombreMateria,
      id_periodo: parseInt(idPeriodo),
      id_seccion: parseInt(idSeccion)
    };

    try {
      const response = await fetch(`${API_BASE_URL}/register-materia`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al añadir la materia.');
      }

      const result = await response.json();
      mostrarAlerta(result.message, 'success');
      // Cerrar el modal y limpiar backdrop tras 1.5 segundos
      setTimeout(() => {
        const modalElement = document.getElementById('modalAnadirMateria');
        const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
        if (bootstrapModal) bootstrapModal.hide();
        // Limpiar backdrop manualmente si persiste
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        document.body.classList.remove('modal-open');
        document.body.style = '';
        form.reset();
        form.classList.remove('was-validated');
        fetchMateriasSummary();
        fetchMaterias(currentPage);
      }, 1500);
    } catch (error) {
      console.error('Error al añadir materia:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al añadir la materia.', 'danger');
    }
  }

  async function handleEditMateria(event) {
    const materiaId = event.currentTarget.dataset.id;
    try {
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaId}`); // Obtener detalles de la materia
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const materia = await response.json();

      // Llenar el modal de edición con los datos de la materia
      document.getElementById('editMateriaId').value = materia.id_materia;
      document.getElementById('editNombreMateria').value = materia.nombre_materia || materia.materia || '';
      document.getElementById('editIdCurso').value = materia.id_curso;

      const modalElement = document.getElementById('modalEditarMateria');
      const bootstrapModal = new bootstrap.Modal(modalElement);
      bootstrapModal.show();

    } catch (error) {
      console.error('Error al cargar datos para editar materia:', error);
      mostrarAlerta('Error al cargar los datos de la materia para edición.', 'danger');
    }
  }

  async function editarMateria(event) {
    event.preventDefault();

    const form = event.target;
    const materiaId = form.elements['editMateriaId'].value;
    const nombreMateria = form.elements['editNombreMateria'].value.trim();
    const idCurso = form.elements['editIdCurso'].value;

    if (!nombreMateria || !idCurso) {
      form.classList.add('was-validated');
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      nombre_materia: nombreMateria,
      id_curso: parseInt(idCurso)
    };

    try {
      const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaId}`, { // Ruta PUT para actualizar
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al actualizar la materia.');
      }

      const result = await response.json();
      mostrarAlerta(result.message, 'success');

      const modalElement = document.getElementById('modalEditarMateria');
      const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
      if (bootstrapModal) bootstrapModal.hide();

      form.classList.remove('was-validated');
      await fetchMateriasSummary();
      await fetchMaterias(currentPage); // Recargar la tabla
    } catch (error) {
      console.error('Error al actualizar materia:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al actualizar la materia.', 'danger');
    }
  }

  async function handleChangeMateriaEstado(event) {
    const materiaId = event.currentTarget.dataset.id;
    const estadoActual = event.currentTarget.dataset.estado;
    const nuevoEstado = estadoActual === 'activo' ? 'inactivo' : 'activo';

    const confirmacion = await mostrarConfirmacion(
      `¿Estás seguro de que quieres ${nuevoEstado === 'activo' ? 'activar' : 'desactivar'} esta materia?`,
      `${nuevoEstado === 'activo' ? 'Activar' : 'Desactivar'} Materia`
    );

    if (confirmacion) {
      try {
        const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaId}/estado`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: nuevoEstado })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al cambiar el estado de la materia.');
        }

        const result = await response.json();
        mostrarAlerta(result.message, 'success');
        await fetchMateriasSummary();
        await fetchMaterias(currentPage); // Recargar la tabla
      } catch (error) {
        console.error('Error al cambiar estado de la materia:', error);
        mostrarAlerta(error.message || 'Ocurrió un error al cambiar el estado de la materia.', 'danger');
      }
    }
  }

  // Nueva función para desactivar materia (establecer estado a 0)
  async function desactivarMateria(materiaId) {
    const confirmacion = await mostrarConfirmacion(
      `¿Estás seguro de que quieres desactivar esta materia? La materia pasará a estado "Inactivo".`,
      `Desactivar Materia`
    );

    if (confirmacion) {
      try {
        const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaId}/estado`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: 'inactivo' }) // Cambiado de 0 a 'inactivo'
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al desactivar la materia.');
        }

        const result = await response.json();
        mostrarAlerta(result.message, 'success');
        await fetchMateriasSummary();
        await fetchMaterias(currentPage); // Recargar la tabla
      } catch (error) {
        console.error('Error al desactivar materia:', error);
        mostrarAlerta(error.message || 'Ocurrió un error al desactivar la materia.', 'danger');
      }
    }
  }


  async function handleDeleteMateria(event) {
    const materiaId = event.currentTarget.dataset.id;

    const confirmacion = await mostrarConfirmacion(
      `¿Estás seguro de que quieres eliminar esta materia? Esta acción es irreversible.`,
      `Eliminar Materia`
    );

    if (confirmacion) {
      try {
        const response = await fetch(`${API_BASE_URL}/materias-academicas/${materiaId}`, {
          method: 'DELETE'
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al eliminar la materia.');
        }

        const result = await response.json();
        mostrarAlerta(result.message, 'success');
        await fetchMateriasSummary();
        await fetchMaterias(currentPage); // Recargar la tabla
      } catch (error) {
        console.error('Error al eliminar materia:', error);
        mostrarAlerta(error.message || 'Ocurrió un error al eliminar la materia.', 'danger');
      }
    }
  }

  async function fetchEstudiantesActivos() {
    const response = await fetch(`${API_BASE_URL}/estudiantes?estado=activo&limit=9999`);
    const data = await response.json();
    return data.estudiantes.map(est => ({
      id_usuario: est.id_usuario,
      nombre_completo: `${est.primer_nombre} ${est.primer_apellido} (${est.cedula})`
    }));
  }

  async function fetchProfesoresActivos() {
    const response = await fetch(`${API_BASE_URL}/profesores?estado=activo&limit=9999`);
    const data = await response.json();
    return data.profesores.map(prof => ({
      id_usuario: prof.id_usuario,
      nombre_completo: `${prof.primer_nombre} ${prof.primer_apellido} (${prof.cedula})`
    }));
  }

</script>
