---
// src/pages/admin/cursos.astro
import "../../style/style-admin/cursos.css";
---

<section class="data-content-section">
  <!-- Nueva sección del Título "Cursos Académicos" - AHORA DENTRO DE data-content-section -->
  <section class="cursos-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Cursos Académicos</h2>
    </div>
  </section>

  <!-- Sección de Tarjeta Consolidada de Resumen de Cursos -->
  <section class="content-info-data">
    <section class="data-general-control">
      <!-- Tarjeta Consolidada de Cursos -->
      <div class="registro-control consolidated-cursos-card">
        <div class="card-icon-title">
          <i class='bx bxs-book-bookmark'></i> <!-- Icono para cursos -->
          <h5 class="card-title">Resumen de Cursos Académicos</h5>
        </div>
        <div class="cursos-summary-grid">
          <div class="summary-item">
            <span class="summary-count" id="totalCursosCount">0</span>
            <span class="summary-label">Cursos Totales</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="activeCursosCount">0</span>
            <span class="summary-label">Activos</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="totalEstudiantesInscritosCount">0</span>
            <span class="summary-label">Estudiantes Inscritos</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="totalProfesoresAsignadosCount">0</span>
            <span class="summary-label">Profesores Asignados</span>
          </div>
        </div>
        <!-- Botón para añadir curso, dentro de la tarjeta de resumen -->
        <div class="mt-3 text-center">
          <div class="btn-accion-control">
            <button class="btn btn-card" id="btnAnadirCurso" data-bs-toggle="modal" data-bs-target="#modalAnadirCurso">
              <i class='bx bx-plus me-2'></i>Añadir Curso
            </button>
          </div>
        </div>
      </div>
    </section>
  </section>

  <!-- La tabla de Cursos -->
  <div class="display-table" id="tableCursos">
    <div class="d-flex justify-content-end mb-3">
      <input type="text" id="searchInput" class="form-control w-25" placeholder="Buscar curso...">
    </div>
    <div class="tabla-info-person">
      <table class="table table-dark table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo</th>
            <th scope="col">Curso</th>
            <th scope="col">Sección</th>
            <th scope="col">Total Materias</th>
            <th scope="col">Estudiantes Asignados</th>
            <th scope="col">Profesores Asignados</th>
            <th scope="col">Estado</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="cursosTableBody">
          <!-- Contenido de la tabla de cursos se carga aquí dinámicamente -->
          <tr>
            <td colspan="9" class="text-center">Cargando cursos...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Paginación -->
    <nav aria-label="Page navigation" class="pagination-container">
      <ul class="pagination-list" id="paginationCursos">
        <!-- Los botones de paginación se insertarán aquí -->
      </ul>
    </nav>
  </div>
</section>

<!-- Modales -->

<!-- Modal para Añadir Curso -->
<div class="modal fade" id="modalAnadirCurso" tabindex="-1" aria-labelledby="modalAnadirCursoLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAnadirCursoLabel">Añadir Nuevo Curso</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAnadirCurso">
          <div class="mb-3">
            <label for="nombreCurso" class="form-label">Nombre del Curso <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="nombreCurso" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre del curso.</div>
          </div>
          <div class="mb-3">
            <label for="idPeriodo" class="form-label">Período Académico <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="idPeriodo" required>
              <option value="">Selecciona un período</option>
              <!-- Opciones de períodos se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona un período académico.</div>
          </div>
          <div class="mb-3">
            <label for="idSeccion" class="form-label">Sección <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="idSeccion" required>
              <option value="">Selecciona una sección</option>
              <!-- Opciones de secciones se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona una sección.</div>
          </div>
          <div class="mb-3">
            <label for="agregarMateriaSelect" class="form-label">¿Deseas añadir una materia a este curso?</label>
            <select class="form-select" id="agregarMateriaSelect">
              <option value="no">No</option>
              <option value="si">Sí</option>
            </select>
          </div>
          <div id="materiaFields" style="display: none;">
            <div class="mb-3">
              <label for="nombreMateria" class="form-label">Nombre de la Materia <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="nombreMateria">
              <div class="invalid-feedback">Por favor, ingresa el nombre de la materia.</div>
            </div>
          </div>
          <div class="d-flex justify-content-between mt-4">
            <button type="reset" class="btn btn-secondary">Limpiar</button>
            <button type="submit" class="btn btn-primary">Añadir Curso</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Curso -->
<div class="modal fade" id="modalEditarCurso" tabindex="-1" aria-labelledby="modalEditarCursoLabel" aria-hidden="true"  >
  <div class="modal-dialog modal-dialog-centered modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarCursoLabel">Editar Curso</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarCurso">
          <input type="hidden" id="editCursoId">
          <div class="mb-3">
            <label for="editNombreCurso" class="form-label">Nombre del Curso <span class="campo-obligatorio">*</span></label>
            <input type="text" class="form-control" id="editNombreCurso" required>
            <div class="invalid-feedback">Por favor, ingresa el nombre del curso.</div>
          </div>
          <div class="mb-3">
            <label for="editIdPeriodo" class="form-label">Período Académico <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="editIdPeriodo" required>
              <option value="">Selecciona un período</option>
              <!-- Opciones de períodos se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona un período académico.</div>
          </div>
          <div class="mb-3">
            <label for="editIdSeccion" class="form-label">Sección <span class="campo-obligatorio">*</span></label>
            <select class="form-select" id="editIdSeccion" required>
              <option value="">Selecciona una sección</option>
              <!-- Opciones de secciones se cargarán aquí -->
            </select>
            <div class="invalid-feedback">Por favor, selecciona una sección.</div>
          </div>
          <!-- Se ha eliminado la sección "Estudiantes Asignados al Curso" editable -->
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Ver Más Información del Curso -->
<div class="modal fade" id="modalVerMasInformacionCurso" tabindex="-1" aria-labelledby="modalVerMasInformacionCursoLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-custom-width modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalVerMasInformacionCursoLabel">Detalles del Curso</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <h6 class="section-title">Información del Curso</h6>
        <p><strong>Nombre del Curso:</strong> <span id="detalleCursoNombre"></span></p>
        <p><strong>Período Académico:</strong> <span id="detalleCursoPeriodo"></span></p>
        <p><strong>Sección:</strong> <span id="detalleCursoSeccion"></span></p>
        <p><strong>Estado del Curso:</strong> <span id="detalleCursoEstado"></span></p> <!-- Added this line -->
        <h6 class="section-title mt-4">Materias del Curso</h6>
        <div id="tablaMateriasCurso"></div>

        <h6 class="section-title mt-4">Estudiantes Asignados por Materia</h6>
        <div id="tablaEstudiantesCurso"></div>

        <h6 class="section-title mt-4">Profesores Asignados por Materia</h6>
        <div id="tablaProfesoresCurso"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>


<!-- Scripts de Bootstrap y JavaScript personalizado -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script is:inline>
  const API_BASE_URL = 'http://localhost:3001/api'; // Ajusta esto a la URL de tu backend

  // ==========================================================
  // FUNCIONES DE UTILIDAD PARA MODALES DE CONFIRMACIÓN Y ALERTA
  // Reutilizadas de tus implementaciones anteriores
  // ==========================================================

  /**
   * Muestra un modal de confirmación personalizado.
   * @param {string} mensaje El mensaje a mostrar en el modal.
   * @param {string} titulo El título del modal.
   * @returns {Promise<boolean>} Resuelve a true si se confirma, false si se cancela o se cierra.
   */
  async function mostrarConfirmacion(mensaje, titulo = "Confirmación") {
    return new Promise((resolve) => {
      const modalId = 'customConfirmModal';
      let confirmModalElement = document.getElementById(modalId);

      // Si el modal ya existe, lo eliminamos para evitar duplicados de listeners
      if (confirmModalElement) {
        confirmModalElement.remove();
      }

      const confirmModalHtml = `
        <div class="modal fade" id="${modalId}" tabindex="-1" aria-labelledby="customConfirmModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="customConfirmModalLabel">${titulo}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar">
                  <i class='bx bx-x'></i>
                </button>
              </div>
              <div class="modal-body">
                ${mensaje}
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtnModal">Confirmar</button>
              </div>
            </div>
          </div>
        </div>
      `;
      document.body.insertAdjacentHTML('beforeend', confirmModalHtml);

      confirmModalElement = document.getElementById(modalId);
      const customConfirmModal = new bootstrap.Modal(confirmModalElement);

      const confirmActionBtn = document.getElementById('confirmActionBtnModal');
      const cleanupAndResolve = (result) => {
        customConfirmModal.hide(); // Oculta el modal
        // Espera a que el modal esté completamente oculto antes de removerlo
        confirmModalElement.addEventListener('hidden.bs.modal', () => {
          confirmModalElement.remove(); // Elimina el elemento del DOM
          resolve(result);
        }, { once: true });
      };

      if (confirmActionBtn) {
        confirmActionBtn.addEventListener('click', () => {
          cleanupAndResolve(true);
        }, { once: true });
      } else {
        console.error("ERROR: [mostrarConfirmacion] Botón 'confirmActionBtnModal' no encontrado.");
        cleanupAndResolve(false);
      }

      // Añadir listener para el cierre del modal (ej. tecla ESC, clic fuera)
      confirmModalElement.addEventListener('hidden.bs.modal', () => {
        // Si ya se resolvió por un clic en los botones, no hacemos nada.
        // Si se cierra por otras vías, resolvemos a false.
        // Esto se maneja mejor con la bandera `once: true` y `cleanupAndResolve`
        // asegurando que solo se resuelva una vez.
      }, { once: true }); // Usar `once: true` para que el listener se remueva solo

      customConfirmModal.show();
    });
  }

  /**
   * Muestra un mensaje de alerta temporal en la parte superior de la pantalla.
   * @param {string} mensaje El mensaje a mostrar.
   * @param {string} tipo El tipo de alerta ('success' o 'danger').
   * @param {number} duracion La duración en milisegundos (por defecto 5000).
   */
  function mostrarAlerta(mensaje, tipo, duracion = 5000) {
    const alertContainer = document.getElementById('alertContainer') || (() => {
      const div = document.createElement('div');
      div.id = 'alertContainer';
      div.style.position = 'fixed';
      div.style.top = '20px';
      div.style.left = '50%';
      div.style.transform = 'translateX(-50%)';
      div.style.zIndex = '9999';
      div.style.width = 'auto';
      div.style.maxWidth = '90%';
      document.body.appendChild(div);
      return div;
    })();

    const alertElement = document.createElement('div');
    alertElement.className = `alert alert-${tipo} alert-dismissible fade show`;
    alertElement.role = 'alert';
    alertElement.textContent = mensaje;

    alertContainer.appendChild(alertElement);

    setTimeout(() => {
      alertElement.classList.remove('show');
      setTimeout(() => {
        alertElement.remove();
      }, 150);
    }, duracion);
  }

  // ==========================================================
  // LÓGICA DE CARGA DE DATOS Y MANEJO DE LA TABLA
  // ==========================================================

  let currentPage = 1;
  const itemsPerPage = 5; // Ajusta según tu preferencia

  document.addEventListener('DOMContentLoaded', async () => {
    await fetchCursosSummary();
    await fetchCursos(currentPage); // Carga inicial sin término de búsqueda
    await loadSelectOptions();

    // Lógica para mostrar/ocultar campos de materia según el select
    const agregarMateriaSelect = document.getElementById('agregarMateriaSelect');
    const materiaFields = document.getElementById('materiaFields');
    if (agregarMateriaSelect) {
      agregarMateriaSelect.addEventListener('change', function() {
        if (this.value === 'si') {
          materiaFields.style.display = '';
        } else {
          materiaFields.style.display = 'none';
        }
      });
      // Inicializar el estado
      materiaFields.style.display = agregarMateriaSelect.value === 'si' ? '' : 'none';
    }

    // Event listener para el formulario de añadir curso
    const formAnadirCurso = document.getElementById('formAnadirCurso');
    if (formAnadirCurso) {
      formAnadirCurso.addEventListener('submit', anadirCurso);
    }

    // Event listener para el formulario de editar curso
    const formEditarCurso = document.getElementById('formEditarCurso');
    if (formEditarCurso) {
      formEditarCurso.addEventListener('submit', editarCurso);
    }

    // Event listener para el campo de búsqueda
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', () => {
            currentPage = 1; // Reiniciar a la primera página en cada búsqueda
            fetchCursos(currentPage, searchInput.value.trim());
        });
    }
  });


  async function fetchCursosSummary() {
    try {
      const response = await fetch(`${API_BASE_URL}/cursos-academicos/resumen`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      document.getElementById('totalCursosCount').textContent = data.totalCursos;
      document.getElementById('activeCursosCount').textContent = data.cursosActivos;
      document.getElementById('totalEstudiantesInscritosCount').textContent = data.totalEstudiantesInscritos;
      document.getElementById('totalProfesoresAsignadosCount').textContent = data.totalProfesoresAsignados;
    } catch (error) {
      console.error('Error al obtener resumen de cursos:', error);
      mostrarAlerta('No se pudo cargar el resumen de cursos.', 'danger');
    }
  }

  async function fetchCursos(page, searchTerm = '') {
    const tableBody = document.getElementById('cursosTableBody');
    const paginationCursos = document.getElementById('paginationCursos');
    tableBody.innerHTML = '<tr><td colspan="9" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div> Cargando cursos...</td></tr>';
    paginationCursos.innerHTML = '';

    try {
      let url = `${API_BASE_URL}/cursos-academicos?page=${page}&limit=${itemsPerPage}`;
      if (searchTerm) {
        url += `&search=${encodeURIComponent(searchTerm)}`;
      }

      const response = await fetch(url);
      if (!response.ok) {
        if (response.status === 404) {
          tableBody.innerHTML = `<tr><td colspan="9" class="text-center text-muted">No se encontraron cursos.</td></tr>`;
          totalCursosCount.textContent = '0';
          activeCursosCount.textContent = '0';
          totalEstudiantesInscritosCount.textContent = '0';
          totalProfesoresAsignadosCount.textContent = '0';
          return;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const cursos = data.cursos;
      const totalPages = data.totalPages;
      currentPage = data.currentPage;


      // Actualizar contadores
      totalCursosCount.textContent = data.totalCount || '0';
      activeCursosCount.textContent = data.activeCount || '0';
      totalEstudiantesInscritosCount.textContent = data.totalEstudiantesInscritos || '0';
      totalProfesoresAsignadosCount.textContent = data.totalProfesoresAsignados || '0';

      tableBody.innerHTML = ''; 

      if (!cursos || cursos.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="9" class="text-center text-muted">No se encontraron cursos que coincidan con "${searchTerm}".</td></tr>`;
        setupPagination(0, 1, paginationCursos, 'curso'); // Reiniciar paginación si no hay resultados
        return;
      }

      cursos.forEach((curso, index) => {
        // Mostrar cantidad de estudiantes y profesores si existen los arrays
        const totalEstudiantes = Array.isArray(curso.estudiantes_info) ? curso.estudiantes_info.length : (curso.total_estudiantes_curso || 0);
        const totalProfesores = Array.isArray(curso.profesores_info) ? curso.profesores_info.length : (curso.total_profesores_curso || 0);
        const row = tableBody.insertRow();
        row.innerHTML = `
          <td>${((page - 1) * itemsPerPage) + index + 1}</td>
          <td>${curso.nombre_periodo}</td>
          <td>${curso.nombre_curso}</td>
          <td>${curso.nombre_seccion}</td>
          <td>${curso.total_materias_curso}</td>
          <td>${totalEstudiantes}</td>
          <td>${totalProfesores}</td>
          <td>
            <span ${curso.estado === 1 ? 'bg-success' : (curso.estado === 0 ? 'bg-danger' : 'bg-warning')}>
              ${curso.estado === 1 ? 'Activo' : (curso.estado === 0 ? 'Inactivo' : 'Desconocido')}
            </span>
          </td>
          <td>
            <div class="dropdown">
              <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton${curso.id_curso}" data-bs-toggle="dropdown" aria-expanded="false">
                <i class='bx bx-dots-vertical-rounded'></i>
              </button>
              <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton${curso.id_curso}">
                <li><a class="dropdown-item ver-mas-curso-btn" href="#" data-id="${curso.id_curso}"><i class='bx bx-info-circle me-2'></i>Ver más información</a></li>
                <li><a class="dropdown-item edit-curso-btn" href="#" data-id="${curso.id_curso}"><i class='bx bx-edit-alt'></i> Editar</a></li>
                ${curso.estado === 1 ? `
                    <li><a class="dropdown-item toggle-curso-estado-btn" href="#" data-id="${curso.id_curso}" data-new-estado="0"><i class='bx bx-pause'></i> Desactivar</a></li>
                ` : `
                    <li><a class="dropdown-item toggle-curso-estado-btn" href="#" data-id="${curso.id_curso}" data-new-estado="1"><i class='bx bx-show'></i> Activar</a></li>
                `}
              </ul>
            </div>
          </td>
        `;
      });

      setupPagination(totalPages, page, paginationCursos, 'curso', searchTerm); // Pasa searchTerm a setupPagination
      attachTableEventListeners(); // Attach event listeners after content is loaded

    } catch (error) {
      console.error('Error al cargar los cursos:', error);
      tableBody.innerHTML = '<tr><td colspan="9" class="text-center text-danger">Error al cargar los cursos.</td></tr>';
      mostrarAlerta('Error al cargar los cursos.', 'danger');
    }
  }

  function setupPagination(totalPages, currentPage, paginationContainer, type, searchTerm = '') {
    paginationContainer.innerHTML = ''; // Limpiar paginación existente

    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);

    if (currentPage <= 3) {
        endPage = Math.min(totalPages, 5);
    } else if (currentPage >= totalPages - 2) {
        startPage = Math.max(1, totalPages - 4);
    }

    if (startPage > 1) {
        paginationContainer.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
        if (startPage > 2) {
            paginationContainer.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
    }

    for (let i = startPage; i <= endPage; i++) {
      paginationContainer.innerHTML += `
        <li class="page-item ${i === currentPage ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>
      `;
    }

    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            paginationContainer.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        paginationContainer.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
    }

    // Attach event listeners to new pagination links
    paginationContainer.querySelectorAll('.page-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page);
        if (!isNaN(page) && page !== currentPage) {
          currentPage = page;
          if (type === 'curso') fetchCursos(currentPage, searchTerm); // Pasa searchTerm
        }
      });
    });
  }

  // Cargar opciones para los selects de periodos y secciones (ya no estudiantes)
  async function loadSelectOptions() {
    const idPeriodoSelect = document.getElementById('idPeriodo');
    const editIdPeriodoSelect = document.getElementById('editIdPeriodo');
    const idSeccionSelect = document.getElementById('idSeccion');
    const editIdSeccionSelect = document.getElementById('editIdSeccion');

    try {
      // Obtener periodos
      const periodosResponse = await fetch(`${API_BASE_URL}/periodos`);
      const periodos = await periodosResponse.json();
      populateSelect(idPeriodoSelect, periodos, 'id_periodo', 'periodo');
      populateSelect(editIdPeriodoSelect, periodos, 'id_periodo', 'periodo');

      // Obtener secciones
      const seccionesResponse = await fetch(`${API_BASE_URL}/secciones`);
      const secciones = await seccionesResponse.json();
      populateSelect(idSeccionSelect, secciones, 'id_seccion', 'seccion');
      populateSelect(editIdSeccionSelect, secciones, 'id_seccion', 'seccion');

    } catch (error) {
      console.error('Error al cargar opciones de select:', error);
      mostrarAlerta('Error al cargar opciones de periodos o secciones.', 'danger');
    }
  }

  function populateSelect(selectElement, items, idKey, nameKey) {
    selectElement.innerHTML = '<option value="">Selecciona una opción</option>'; // Restablecer a la opción por defecto
    items.forEach(item => {
      const option = document.createElement('option');
      option.value = item[idKey];
      option.textContent = item[nameKey];
      selectElement.appendChild(option);
    });
  }

  function attachTableEventListeners() {
    // Event listeners para botones de editar
    document.querySelectorAll('.edit-curso-btn').forEach(button => {
      button.removeEventListener('click', handleEditCurso); // Evitar duplicados
      button.addEventListener('click', handleEditCurso);
    });

    // Event listeners para botones de "Ver más información"
    document.querySelectorAll('.ver-mas-curso-btn').forEach(button => {
        button.removeEventListener('click', handleVerMasCurso); // Evitar duplicados
        button.addEventListener('click', handleVerMasCurso);
    });

    // Event listeners para los botones de cambiar/desactivar estado unificados
    document.querySelectorAll('.toggle-curso-estado-btn').forEach(button => {
      button.removeEventListener('click', toggleCursoEstado); // Evitar duplicados
      button.addEventListener('click', toggleCursoEstado);
    });
  }

  // ==========================================================
  // MANEJO DE FORMULARIOS Y ACCIONES
  // ==========================================================

  async function anadirCurso(event) {
    event.preventDefault();

    const form = event.target;
    const nombreCurso = form.elements['nombreCurso'].value.trim();
    const idPeriodo = form.elements['idPeriodo'].value;
    const idSeccion = form.elements['idSeccion'].value; // Asegúrate de obtener idSeccion
    const agregarMateria = form.elements['agregarMateriaSelect'].value === 'si';
    const nombreMateria = form.elements['nombreMateria'].value.trim();

    // Validación básica
    if (!nombreCurso || !idPeriodo || !idSeccion || (agregarMateria && !nombreMateria)) { // Incluido idSeccion en la validación
      form.classList.add('was-validated'); // Muestra feedback de Bootstrap
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      nombreCurso,
      id_periodo: parseInt(idPeriodo),
      id_seccion: parseInt(idSeccion), // Asegúrate de enviar id_seccion
      agregarMateria,
      nombreMateria: agregarMateria ? nombreMateria : null
    };

    try {
      const response = await fetch(`${API_BASE_URL}/register-curso`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al añadir el curso.');
      }

      const result = await response.json();
      mostrarAlerta(result.message, 'success');
      // Cerrar el modal y limpiar el formulario tras 1.5 segundos
      setTimeout(() => {
        const modalElement = document.getElementById('modalAnadirCurso');
        let bootstrapModal = bootstrap.Modal.getInstance(modalElement);
        if (!bootstrapModal) bootstrapModal = new bootstrap.Modal(modalElement);
        bootstrapModal.hide();

        // Limpiar backdrop manualmente si persiste
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        document.body.classList.remove('modal-open');
        document.body.style = '';

        form.reset();
        form.classList.remove('was-validated');
        // Ocultar alerta de éxito
        const alertDiv = document.querySelector('.alert-success');
        if (alertDiv) alertDiv.style.display = 'none';
      }, 1500);

      await fetchCursosSummary();
      await fetchCursos(currentPage); // Recargar la tabla
    } catch (error) {
      console.error('Error al añadir curso:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al añadir el curso.', 'danger');
    }
  }

  async function handleEditCurso(event) {
    const cursoId = event.currentTarget.dataset.id;
    try {
      const response = await fetch(`${API_BASE_URL}/cursos-academicos/${cursoId}`); // Obtener detalles del curso
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const curso = await response.json();

      document.getElementById('editCursoId').value = curso.id_curso;
      document.getElementById('editNombreCurso').value = curso.nombre_curso;
      document.getElementById('editIdPeriodo').value = curso.id_periodo;
      document.getElementById('editIdSeccion').value = curso.id_seccion;

      // Se elimina la lógica de mostrar estudiantes y profesores en el modal de edición,
      // ahora se hará en el modal "Ver más información".
      let infoAsignadosCursoDiv = document.getElementById('infoAsignadosCurso');
      if (infoAsignadosCursoDiv) {
        infoAsignadosCursoDiv.remove(); // Asegurarse de que no quede HTML de la versión anterior.
      }
      
      const modalElement = document.getElementById('modalEditarCurso');
      const bootstrapModal = new bootstrap.Modal(modalElement);
      bootstrapModal.show();

    } catch (error) {
      console.error('Error al cargar datos para editar curso:', error);
      mostrarAlerta('Error al cargar los datos del curso para edición.', 'danger');
    }
  }

  async function handleVerMasCurso(event) {
    const cursoId = event.currentTarget.dataset.id;
    try {
        const response = await fetch(`${API_BASE_URL}/cursos-academicos/${cursoId}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const curso = await response.json();

        // Populate basic course info
        document.getElementById('detalleCursoNombre').textContent = curso.nombre_curso || 'N/A';
        document.getElementById('detalleCursoPeriodo').textContent = curso.nombre_periodo || 'N/A';
        document.getElementById('detalleCursoSeccion').textContent = curso.nombre_seccion || 'N/A';
        // Populate course status
        const detalleCursoEstado = document.getElementById('detalleCursoEstado');
        if (detalleCursoEstado) {
            detalleCursoEstado.textContent = curso.estado === 1 ? 'Activo' : (curso.estado === 0 ? 'Inactivo' : 'Desconocido');
        }


        // Populate Materias table
        const tablaMateriasCurso = document.getElementById('tablaMateriasCurso');
        if (Array.isArray(curso.materias_info) && curso.materias_info.length > 0) {
            let materiasHtml = `<div class=\"table-responsive\"><table class=\"table table-bordered table-sm table-dark\"><thead><tr><th>Materia</th></tr></thead><tbody>`;
            curso.materias_info.forEach(materia => {
                materiasHtml += `<tr><td>${materia.nombre_materia || 'N/A'}</td></tr>`;
            });
            materiasHtml += `</tbody></table></div>`;
            tablaMateriasCurso.innerHTML = materiasHtml;
        } else {
            tablaMateriasCurso.innerHTML = '<div class="text-center text-muted">No hay materias asignadas a este curso.</div>';
        }

        // Populate Estudiantes table
        const tablaEstudiantesCurso = document.getElementById('tablaEstudiantesCurso');
        if (Array.isArray(curso.estudiantes_info) && curso.estudiantes_info.length > 0) {
            // MODIFICACIÓN: Añadir columna 'Estado' al encabezado
            let estudiantesHtml = `<div class=\"table-responsive\"><table class=\"table table-bordered table-sm table-dark\"><thead><tr><th>Período</th><th>Estudiante</th><th>Materia</th><th>Estado</th></tr></thead><tbody>`;
            curso.estudiantes_info.forEach(estudiante => {
                // MODIFICACIÓN: Añadir celda 'Estado' y aplicar estilo
                const estadoClase = estudiante.estado_materia === 'Aprobado' ? 'text-success' : 'text-danger';
                estudiantesHtml += `<tr>
                                        <td>${estudiante.nombre_periodo || 'N/A'}</td>
                                        <td>${estudiante.nombre_usuario || 'N/A'}</td>
                                        <td>${estudiante.nombre_materia || 'N/A'}</td>
                                        <td class="${estadoClase}">${estudiante.estado_materia || 'N/A'}</td>
                                    </tr>`;
            });
            estudiantesHtml += `</tbody></table></div>`;
            tablaEstudiantesCurso.innerHTML = estudiantesHtml;
        } else {
            tablaEstudiantesCurso.innerHTML = '<div class="text-center text-muted">No hay estudiantes asignados a este curso o a sus materias.</div>';
        }

        // Populate Profesores table
        const tablaProfesoresCurso = document.getElementById('tablaProfesoresCurso');
        if (Array.isArray(curso.profesores_info) && curso.profesores_info.length > 0) {
            let profesoresHtml = `<div class=\"table-responsive\"><table class=\"table table-bordered table-sm table-dark\"><thead><tr><th>Período</th><th>Profesor Asignado</th><th>Materia</th></tr></thead><tbody>`;
            curso.profesores_info.forEach(profesor => {
                profesoresHtml += `<tr><td>${profesor.nombre_periodo || 'N/A'}</td><td>${profesor.nombre_usuario || 'N/A'}</td><td>${profesor.nombre_materia || 'N/A'}</td></tr>`;
            });
            profesoresHtml += `</tbody></table></div>`;
            tablaProfesoresCurso.innerHTML = profesoresHtml;
        } else {
            tablaProfesoresCurso.innerHTML = '<div class="text-center text-muted">No hay profesores asignados a este curso o a sus materias.</div>';
        }

        const modalElement = document.getElementById('modalVerMasInformacionCurso');
        const bootstrapModal = new bootstrap.Modal(modalElement);
        bootstrapModal.show();

    } catch (error) {
        console.error('Error al cargar datos para "Ver más información" del curso:', error);
        mostrarAlerta('Error al cargar los datos del curso.', 'danger');
    }
  }


  async function editarCurso(event) {
    event.preventDefault();

    const form = event.target;
    const cursoId = form.elements['editCursoId'].value;
    const nombreCurso = form.elements['editNombreCurso'].value.trim();
    const idPeriodo = form.elements['editIdPeriodo'].value;
    const idSeccion = form.elements['editIdSeccion'].value;
    // Se elimina la línea de obtención de estudiantes del select, ya que el select ha sido removido.

    if (!nombreCurso || !idPeriodo || !idSeccion) {
      form.classList.add('was-validated');
      mostrarAlerta('Por favor, completa todos los campos obligatorios.', 'danger');
      return;
    }

    const data = {
      nombre_curso: nombreCurso,
      id_periodo: parseInt(idPeriodo),
      id_seccion: parseInt(idSeccion)
      // Se elimina el campo 'estudiantes' del objeto de datos a enviar.
    };

    try {
      const response = await fetch(`${API_BASE_URL}/cursos-academicos/${cursoId}`, { // Ruta PUT para actualizar
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al actualizar el curso.');
      }

      const result = await response.json();
      mostrarAlerta(result.message, 'success');

      const modalElement = document.getElementById('modalEditarCurso');
      const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
      if (bootstrapModal) bootstrapModal.hide();

      form.classList.remove('was-validated');
      await fetchCursosSummary();
      await fetchCursos(currentPage); // Recargar la tabla
    } catch (error) {
      console.error('Error al actualizar curso:', error);
      mostrarAlerta(error.message || 'Ocurrió un error al actualizar el curso.', 'danger');
    }
  }

  // Nueva función para togglear el estado del curso (activar/desactivar)
  async function toggleCursoEstado(event) {
    const cursoId = event.currentTarget.dataset.id;
    const nuevoEstado = parseInt(event.currentTarget.dataset.newEstado); // Obtener el estado deseado (0 o 1)

    const confirmacion = await mostrarConfirmacion(
      `¿Estás seguro de que quieres ${nuevoEstado === 1 ? 'activar' : 'desactivar'} este curso?`,
      `${nuevoEstado === 1 ? 'Activar' : 'Desactivar'} Curso`
    );

    if (confirmacion) {
      try {
        const response = await fetch(`${API_BASE_URL}/cursos-academicos/${cursoId}/estado`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ estado: nuevoEstado }) // Enviar el valor numérico
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Error al cambiar el estado del curso.');
        }

        const result = await response.json();
        mostrarAlerta(result.message, 'success');
        await fetchCursosSummary();
        await fetchCursos(currentPage); // Recargar la tabla
      } catch (error) {
        console.error('Error al cambiar estado del curso:', error);
        mostrarAlerta(error.message || 'Ocurrió un error al cambiar el estado del curso.', 'danger');
      }
    }
  }
</script>
