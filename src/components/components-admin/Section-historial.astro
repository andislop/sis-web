---
import "../../style/style-admin/estudiantes.css"; /* Ahora solo importa est-c.txt */
---
<section class="data-content-section">
  <section class="estudiantes-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Historial</h2>
    </div>
    <!-- Barra de búsqueda -->
    <form id="searchForm" class="row g-2 align-items-center mb-3" autocomplete="off">
      <div class="col-md-4">
        <input type="text" class="form-control" id="searchUsuario" placeholder="Buscar por usuario (nombre o apellido)">
      </div>
      <div class="col-md-4">
        <input type="text" class="form-control" id="searchAccion" placeholder="Buscar por acción">
      </div>
      <div class="col-md-3">
        <input type="date" class="form-control" id="searchFecha" placeholder="Buscar por fecha">
      </div>
      <div class="col-md-1 d-flex align-items-center">
        <button type="button" class="btn btn-secondary w-100" id="btnLimpiarFiltros">Limpiar</button>
      </div>
    </form>
  </section>

  <div class="display-table" id="table1">
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped historial-fixed-width table-sticky-header">
        <thead>
          <tr>
            <th>ID</th>
            <th>Usuario</th>
            <th>Acción</th>
            <th>Tabla afectada</th>
            <th class="descripcion-col">Descripción</th>
            <th>Fecha y hora</th>
          </tr>
        </thead>
        <tbody id="historialTableBody">
          <tr>
            <td colspan="6" class="text-center">Cargando Historial...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControls" class="pagination text-center mt-3"></div>
  </div>
</section>

<style>
  /* Estilos para la paginación responsive */
  .pagination-list {
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.25rem;
    max-width: 100%;
    overflow-x: auto;
  }
  
  .pagination-list .page-item {
    margin: 0;
  }
  
  .pagination-list .page-link {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 35px;
    height: 35px;
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    border-radius: 0.375rem;
    text-decoration: none;
    transition: all 0.2s ease;
  }
  
  .pagination-list .page-link:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
  
  .pagination-list .page-item.disabled .page-link {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  .pagination-list .page-item.active .page-link {
    background-color: #0d6efd;
    border-color: #0d6efd;
    font-weight: 600;
  }
  
  /* Responsive para pantallas pequeñas */
  @media (max-width: 768px) {
    .pagination-list {
      gap: 0.125rem;
    }
    
    .pagination-list .page-link {
      min-width: 30px;
      height: 30px;
      font-size: 0.75rem;
      padding: 0.125rem 0.25rem;
    }
  }
  
  /* Asegurar que la tabla mantenga su ancho */
  .display-table {
    width: 100%;
    overflow-x: auto;
  }
  
  .tabla-info-person {
    min-width: 100%;
  }

  /* Ancho fijo para la tabla del historial */
  /*.historial-fixed-width {
    min-width: 1100px;
    max-width: 1100px;
    width: 1100px;
    table-layout: fixed;
  }*/

  /* Ancho fijo para la columna Descripción */
  .historial-fixed-width .descripcion-col {
    width: 500px;
    min-width: 500x;
    max-width: 500px;
    white-space: nowrap;
    text-align: center;
  }

  /* Sticky header para todas las tablas del sistema */
  .table-sticky-header thead th {
    position: sticky;
    top: 0;
    z-index: 2;
    background: #a321bd; /* O el color de fondo de tu header */
    color: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.04);
  }

  /* Si usas .table-dark, puedes ajustar el color así: */
  .table-dark.table-sticky-header thead th {
    background: #a321bd;
    color: #fff;
  }

  /* Paginación rosa pálido para historial */
  .custom-pink-page {
    background: #f8d6f8;
    color: #a321bd;
    border: none;
    transition: background 0.2s, color 0.2s;
    font-weight: 500;
  }
  .custom-pink-page:hover {
    background: #f3b6f3;
    color: #7a168a;
  }
  .custom-pink-page.active-pink,
  .page-item.active .custom-pink-page {
    background: #a321bd;
    color: #fff;
    font-weight: 700;
  }
  .pagination-list .page-item.disabled .custom-pink-page {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    let currentPage = 1;
    const itemsPerPage = 10;
    const historialTableBody = document.getElementById('historialTableBody');
    const paginationControls = document.getElementById('paginationControls');
    // Nuevas referencias a los campos de búsqueda
    const searchUsuario = document.getElementById('searchUsuario');
    const searchAccion = document.getElementById('searchAccion');
    const searchFecha = document.getElementById('searchFecha');
    const btnLimpiarFiltros = document.getElementById('btnLimpiarFiltros');
    let historialCompleto = [];
    let historialFiltrado = [];

    function formatearJson(texto) {
      if (!texto) return 'N/A';
      try {
        const datos = JSON.parse(texto);

        function renderValor(valor) {
          if (typeof valor === 'object' && valor !== null) {
            return (
              '<ul style="margin-left:1em;">' +
              Object.entries(valor)
                .map(([k, v]) => `<li><b>${k}:</b> ${renderValor(v)}</li>`)
                .join('') +
              '</ul>'
            );
          }
          return valor;
        }

        return (
          '<div>' +
          Object.entries(datos)
            .map(([k, v]) => `<b>${k}:</b> ${renderValor(v)}`)
            .join('<br>') +
          '</div>'
        );
      } catch {
        return texto;
      }
    }

    async function loadHistorialCompleto() {
      historialTableBody.innerHTML = `<tr><td colspan="6" class="text-center">Cargando historial...</td></tr>`;
      paginationControls.innerHTML = '';
      try {
        // Obtener todos los registros (sin paginación)
        const response = await fetch(`http://localhost:3001/api/historial?pagina=1&porPagina=10000`, {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
          }
        });
        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/';
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }
        const data = await response.json();
        const historial = data.datos || data.historial || data;
        historialCompleto = historial;
        filtrarYRenderizar();
      } catch (error) {
        console.error('Error al cargar historial:', error);
        historialTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error al cargar historial. ${error.message}</td></tr>`;
      }
    }

    function filtrarYRenderizar() {
      const usuarioFiltro = (searchUsuario.value || '').toLowerCase();
      const accionFiltro = (searchAccion.value || '').toLowerCase();
      const fechaFiltro = searchFecha.value;
      historialFiltrado = historialCompleto.filter(registro => {
        // Filtrar por usuario (nombre o apellido)
        const nombreCompleto = `${registro.primer_nombre || ''} ${registro.primer_apellido || ''}`.toLowerCase();
        const coincideUsuario = usuarioFiltro === '' || nombreCompleto.includes(usuarioFiltro);
        // Filtrar por acción
        const coincideAccion = accionFiltro === '' || (registro.accion || '').toLowerCase().includes(accionFiltro);
        // Filtrar por fecha (solo fecha, no hora)
        let coincideFecha = true;
        if (fechaFiltro) {
          const fechaRegistro = new Date(registro.fecha_hora).toISOString().slice(0, 10);
          coincideFecha = fechaRegistro === fechaFiltro;
        }
        return coincideUsuario && coincideAccion && coincideFecha;
      });
      renderTablaPaginada();
    }

    function renderTablaPaginada() {
      historialTableBody.innerHTML = '';
      if (historialFiltrado.length === 0) {
        historialTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-muted">No se encontraron registros de historial.</td></tr>`;
        paginationControls.innerHTML = '';
        return;
      }
      const totalPages = Math.ceil(historialFiltrado.length / itemsPerPage) || 1;
      if (currentPage > totalPages) currentPage = 1;
      const startIdx = (currentPage - 1) * itemsPerPage;
      const endIdx = startIdx + itemsPerPage;
      const pageData = historialFiltrado.slice(startIdx, endIdx);
      pageData.forEach((registro) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${registro.id_historial}</td>
          <td>${registro.primer_nombre || 'Usuario'} ${registro.primer_apellido || ''}</td>
          <td>${registro.accion}</td>
          <td>${registro.tabla_afectada || 'N/A'}</td>
          <td>${formatearJson(registro.datos_nuevos)}</td>
          <td>${new Date(registro.fecha_hora).toLocaleString()}</td>
        `;
        historialTableBody.appendChild(row);
      });
      setupPagination(totalPages);
    }

    // Listeners para los campos de búsqueda
    [searchUsuario, searchAccion, searchFecha].forEach(input => {
      input.addEventListener('input', () => {
        currentPage = 1;
        filtrarYRenderizar();
      });
    });
    // Listener para el botón limpiar
    btnLimpiarFiltros.addEventListener('click', () => {
      searchUsuario.value = '';
      searchAccion.value = '';
      searchFecha.value = '';
      currentPage = 1;
      filtrarYRenderizar();
    });

    function setupPagination(totalPages) {
      paginationControls.innerHTML = '';
      if (totalPages <= 1) return;
      
      const ul = document.createElement('ul');
      ul.className = 'pagination-list d-flex justify-content-center align-items-center flex-wrap gap-1';
      ul.style.maxWidth = '100%';
      
      const crearLink = (text, page, disabled = false, active = false) => {
        const li = document.createElement('li');
        li.className = `page-item ${disabled ? 'disabled' : ''} ${active ? 'active' : ''}`;
        const a = document.createElement('a');
        a.className = `page-link custom-pink-page rounded px-2 py-1 ${active ? 'active-pink' : ''}`;
        a.style.minWidth = '35px';
        a.style.textAlign = 'center';
        a.style.fontSize = '0.875rem';
        a.href = '#';
        a.textContent = text;
        if (!disabled) {
          a.addEventListener('click', (e) => {
            e.preventDefault();
            if (page >= 1 && page <= totalPages) {
              currentPage = page;
              renderTablaPaginada();
            }
          });
        }
        li.appendChild(a);
        return li;
      };

      // Botón Anterior
      ul.appendChild(crearLink('anterior', currentPage - 1, currentPage === 1));
      
      // Lógica para mostrar páginas de forma inteligente
      const maxVisiblePages = 7; // Número máximo de páginas visibles
      let startPage = 1;
      let endPage = totalPages;
      
      if (totalPages > maxVisiblePages) {
        if (currentPage <= 4) {
          // Estamos cerca del inicio
          endPage = maxVisiblePages;
        } else if (currentPage >= totalPages - 3) {
          // Estamos cerca del final
          startPage = totalPages - maxVisiblePages + 1;
        } else {
          // Estamos en el medio
          startPage = currentPage - 3;
          endPage = currentPage + 3;
        }
      }
      
      // Mostrar primera página si no está visible
      if (startPage > 1) {
        ul.appendChild(crearLink('1', 1));
        if (startPage > 2) {
          ul.appendChild(crearLink('...', null, true));
        }
      }
      
      // Mostrar páginas del rango calculado
      for (let i = startPage; i <= endPage; i++) {
        ul.appendChild(crearLink(i, i, false, i === currentPage));
      }
      
      // Mostrar última página si no está visible
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          ul.appendChild(crearLink('...', null, true));
        }
        ul.appendChild(crearLink(totalPages, totalPages));
      }
      
      // Botón Siguiente
      ul.appendChild(crearLink('siguiente', currentPage + 1, currentPage === totalPages));
      
      paginationControls.appendChild(ul);
    }

    loadHistorialCompleto();
  });
</script>
