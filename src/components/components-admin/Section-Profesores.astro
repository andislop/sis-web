---
import "../../style/style-admin/profesores.css"; /* Asegúrate de que esta ruta sea correcta y el CSS exista */
---

<section class="data-content-section">
  <!-- Nueva sección del Título "Profesores" con el estilo de la tarjeta de bienvenida -->
  <section class="estudiantes-header-card">
    <div class="welcome-search-data">
      <h2 class="welcome-search-data__title">Profesores</h2>
    </div>
  </section>

  <!-- Sección de Tarjeta Consolidada de Resumen de Profesores -->
  <section class="content-info-data">
    <section class="data-general-control">
      <!-- Tarjeta Consolidada de Profesores -->
      <div class="registro-control consolidated-students-card">
        <div class="card-icon-title">
          <i class="bx bxs-group"></i> <!-- Icono para grupo de profesores -->
          <h5 class="card-title">Resumen de Profesores</h5>
        </div>
        <div class="students-summary-grid">
          <div class="summary-item">
            <span class="summary-count" id="totalProfesoresCount">0</span>
            <span class="summary-label">Total</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="activeProfesoresCount">0</span>
            <span class="summary-label">Activos</span>
          </div>
          <div class="summary-item">
            <span class="summary-count" id="inactiveProfesoresCount">0</span>
            <span class="summary-label">Inactivos</span>
          </div>
          <div class="btn-accion-control">
            <button class="btn-card" data-bs-toggle="modal" data-bs-target="#modalAgregarProfesor">
              <i class="bx bx-plus"></i> Agregar Profesor
            </button>
          </div>
        </div>
      </div>
    </section>
  </section>

  <!-- La tabla de Profesores -->
  <div class="display-table" id="table1">
    <!-- Campo de búsqueda para profesores -->
    <div class="d-flex justify-content-end mb-3">
      <input type="text" id="searchProfesorInput" class="form-control w-25" placeholder="Buscar profesor por nombre...">
    </div>
    <div class="tabla-info-person">
      <table class="table table-dark table-hover table-striped">
        <thead>
          <tr>
            <th scope="col">Nº</th>
            <th scope="col">Periodo Académico</th>
            <th scope="col">Cédula</th>
            <th scope="col">Nombre</th>
            <th scope="col">Apellido</th>
            <th scope="col">Estado</th>
            <th scope="col">Última Conexión</th>
            <th scope="col">Acciones</th>
          </tr>
        </thead>
        <tbody id="profesoresTableBody">
          <tr>
            <td colspan="8" class="text-center">Cargando profesores...</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="paginationControls" class="pagination text-center mt-3"></div>
  </div>
</section>

<!-- Modal para Ver Más Información del Profesor -->
<div class="modal fade" id="modalVerMasInformacionProfesor" tabindex="-1" aria-labelledby="modalVerMasInformacionProfesorLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-custom-width modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalVerMasInformacionProfesorLabel">Detalles del Profesor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <h6 class="section-title">Información Personal</h6>
        <p><strong>Cédula:</strong> <span id="detalleCedula"></span></p>
        <p><strong>Nombre Completo:</strong> <span id="detalleNombreCompleto"></span></p>
        <p><strong>Correo:</strong> <span id="detalleCorreo"></span></p>
        <p><strong>Teléfono:</strong> <span id="detalleTelefono"></span></p>
        <p><strong>Dirección:</strong> <span id="detalleDireccion"></span></p>
        <p><strong>Estado del Profesor:</strong> <span id="detalleEstadoProfesor"></span></p>
        <p><strong>Última Conexión:</strong> <span id="detalleUltimaConexion"></span></p>

        <h6 class="section-title mt-4">Información Académica</h6>
        <div id="tablaAcademicaProfesor"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Profesor -->
<div class="modal fade" id="modalEditarProfesor" tabindex="-1" aria-labelledby="modalEditarProfesorLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-custom-width">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarProfesorLabel">Editar Profesor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarProfesor">
          <input type="hidden" id="editIdUsuario" />
          <h6 class="section-title">Información Personal</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editCedula" class="form-label">Cédula</label>
              <input type="text" class="form-control" id="editCedula" placeholder="Ingrese su cédula" readonly />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editCorreo" class="form-label">Correo</label>
              <input type="email" class="form-control" id="editCorreo" placeholder="Ingrese su correo electrónico" />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editPrimerNombre" class="form-label">Primer Nombre</label>
              <input type="text" class="form-control" id="editPrimerNombre" placeholder="Ingrese su primer nombre" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editSegundoNombre" class="form-label">Segundo Nombre</label>
              <input type="text" class="form-control" id="editSegundoNombre" placeholder="Ingrese su segundo nombre" />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editPrimerApellido" class="form-label">Primer Apellido</label>
              <input type="text" class="form-control" id="editPrimerApellido" placeholder="Ingrese su primer apellido" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editSegundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="editSegundoApellido" placeholder="Ingrese su segundo apellido" />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editTelefono" class="form-label">Teléfono</label>
              <div class="d-flex align-items-center gap-2">
                  <select class="form-select codigo-area-edit" style="width: 80px;">
                    <option value="0412">0412</option>
                    <option value="0422">0422</option>
                    <option value="0424">0424</option>
                    <option value="0414">0414</option>
                    <option value="0416">0416</option>
                    <option value="0426">0426</option>
                  </select>
                  <span class="separador-telefono">-</span>
                  <input
                    type="tel"
                    class="form-control numero-telefono-edit"
                    placeholder="1234567"
                    pattern="[0-9]{7}"
                    title="Debe contener 7 dígitos"
                  >
                  <div class="invalid-feedback"></div>
              </div>
            </div>
          </div>

          <h6 class="section-title mt-4">Ubicación</h6>
          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="editDireccion" class="form-label">Dirección</label>
              <input type="text" class="form-control" id="editDireccion" placeholder="Ingrese su dirección" />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="d-flex justify-content-end mt-4 gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary" id="btnGuardarEdicion">Guardar Cambios</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Agregar Profesor (NUEVO) -->
<div class="modal fade" id="modalAgregarProfesor" tabindex="-1" aria-labelledby="modalAgregarProfesorLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAgregarProfesorLabel">Agregar Nuevo Profesor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal">
          <i class='bx bx-x'></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAgregarProfesor">
          <!-- Información Personal -->
          <h6 class="section-title">Información Personal</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addCedula" class="form-label">Cédula <span class="campo-obligatorio">*</span></label>
              <input type="tel" class="form-control" id="addCedula" placeholder="Ejemplo: 123456789" pattern="[0-9]{6,15}" maxlength="15" required />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPrimerNombre" class="form-label">Primer Nombre <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addPrimerNombre" placeholder="Primer Nombre" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]+" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addSegundoNombre" class="form-label">Segundo Nombre</label>
              <input type="text" class="form-control" id="addSegundoNombre" placeholder="Segundo Nombre" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPrimerApellido" class="form-label">Primer Apellido <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addPrimerApellido" placeholder="Primer Apellido" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]+" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addSegundoApellido" class="form-label">Segundo Apellido</label>
              <input type="text" class="form-control" id="addSegundoApellido" placeholder="Segundo Apellido" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*" />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addTelefono" class="form-label">Teléfono <span class="campo-obligatorio">*</span></label>
              <div class="d-flex align-items-center gap-2">
                <select class="form-select codigo-area" id="addCodigoArea" style="width: 80px;" required>
                  <option value="0412">0412</option>
                  <option value="0422">0422</option>
                  <option value="0424">0424</option>
                  <option value="0414">0414</option>
                  <option value="0416">0416</option>
                  <option value="0426">0426</option>
                </select>
                <span class="separador-telefono">-</span>
                <input
                  type="tel"
                  class="form-control numero-telefono"
                  id="addNumeroTelefono"
                  placeholder="1234567"
                  pattern="[0-9]{7}"
                  title="Debe contener 7 dígitos"
                  required
                  style="flex-grow: 1;"
                />
              </div>
              <div class="invalid-feedback"></div>
            </div>
          </div>
          
          <!-- Ubicación -->
          <h6 class="section-title mt-4">Ubicación</h6>
          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="addDireccion" class="form-label">Dirección <span class="campo-obligatorio">*</span></label>
              <input type="text" class="form-control" id="addDireccion" placeholder="Ingrese su dirección" required />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addEstado" class="form-label">Estado <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addEstado" required>
                <option value="" selected disabled>Seleccione un estado</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addCiudad" class="form-label">Ciudad <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addCiudad" required disabled>
                <option value="" selected disabled>Primero seleccione un estado</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <!-- Información Académica -->
          <h6 class="section-title mt-4">Información Académica</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addPeriodoAcademico" class="form-label">Período Académico <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addPeriodoAcademico" required>
                <option value="" selected disabled>Selecciona un período</option>
                <!-- Opciones de período se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addCurso" class="form-label">Curso <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addCurso" required disabled>
                <option value="" selected disabled>Selecciona un curso</option>
                <!-- Opciones de curso se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addMateria" class="form-label">Materia <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addMateria" required disabled>
                <option value="" selected disabled>Selecciona una materia</option>
                <!-- Opciones de materia se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addSeccion" class="form-label">Sección <span class="campo-obligatorio">*</span></label>
              <select class="form-select" id="addSeccion" required disabled>
                <option value="" selected disabled>Selecciona una sección</option>
                <!-- Opciones de sección se cargarán aquí dinámicamente -->
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>


          <!-- Credenciales del Usuario -->
          <h6 class="section-title mt-4">Credenciales del Usuario</h6>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addEmail" class="form-label">Correo Electrónico <span class="campo-obligatorio">*</span></label>
              <input type="email" class="form-control" id="addEmail" placeholder="ejemplo.venezuela@gmail.com" required />
              <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addPassword" class="form-label">Contraseña <span class="campo-obligatorio">*</span></label>
              <div class="input-group">
                <input type="password" class="form-control" id="addPassword" placeholder="Tu Contraseña" required />
                <button class="btn btn-outline-secondary toggle-password" type="button" data-target="addPassword">
                  <i class="bx bx-hide"></i>
                </button>
              </div>
              <!-- CAMBIO CRÍTICO: invalid-feedback para la contraseña FUERA del input-group -->
              <div class="invalid-feedback"></div>
              <!-- small para la fortaleza de contraseña FUERA del input-group -->
              <small id="addPasswordStrength" class="form-text text-muted"></small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addConfirmPassword" class="form-label">Confirmar contraseña <span class="campo-obligatorio">*</span></label>
              <div class="input-group">
                <input type="password" class="form-control" id="addConfirmPassword" placeholder="Confirma tu Contraseña" required />
                <button class="btn btn-outline-secondary toggle-password" type="button" data-target="addConfirmPassword">
                  <i class="bx bx-hide"></i>
                </button>
              </div>
              <!-- CAMBIO CRÍTICO: invalid-feedback para confirmar contraseña FUERA del input-group -->
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="d-flex justify-content-end mt-4 gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary" id="btnGuardarNuevoProfesor">Agregar Profesor</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DEBUG: DOMContentLoaded - Script principal de Profesores cargado.");
    console.log("DEBUG: window.bootstrap is", typeof window.bootstrap); // Verificación de Bootstrap

    let currentPage = 1;
    const itemsPerPage = 5; 
    const profesoresTableBody = document.getElementById('profesoresTableBody');
    const paginationControls = document.getElementById('paginationControls');

    // Contadores de profesores
    const TotalProfesores = document.getElementById('totalProfesoresCount');
    const ProfesoresActivos = document.getElementById('activeProfesoresCount');
    const ProfesoresInactivos = document.getElementById('inactiveProfesoresCount');

    // Elemento del campo de búsqueda
    const searchProfesorInput = document.getElementById('searchProfesorInput');


    // Elementos del modal "Ver Más Información"
    const modalVerMasInformacionProfesor = new bootstrap.Modal(document.getElementById('modalVerMasInformacionProfesor'));
    const detalleCedula = document.getElementById('detalleCedula');
    const detalleNombreCompleto = document.getElementById('detalleNombreCompleto');
    const detalleCorreo = document.getElementById('detalleCorreo');
    const detalleTelefono = document.getElementById('detalleTelefono');
    const detalleDireccion = document.getElementById('detalleDireccion');
    const detalleEstadoProfesor = document.getElementById('detalleEstadoProfesor'); // Renombrado de Estudiante a Profesor
    const detalleUltimaConexion = document.getElementById('detalleUltimaConexion');
    const detallePeriodoAcademico = document.getElementById('detallePeriodoAcademico');
    const detalleSeccion = document.getElementById('detalleSeccion');
    const detalleCursos = document.getElementById('detalleCursos');
    const detalleMaterias = document.getElementById('detalleMaterias');

    // Elementos del Modal Editar Profesores
    const modalEditarProfesor = new bootstrap.Modal(document.getElementById('modalEditarProfesor')); // Renombrado de Estudiante a Profesor
    const formEditarProfesor = document.getElementById('formEditarProfesor'); // Renombrado de Estudiante a Profesor
    const editIdUsuario = document.getElementById('editIdUsuario');
    const editCedula = document.getElementById('editCedula');
    const editCorreo = document.getElementById('editCorreo');
    const editPrimerNombre = document.getElementById('editPrimerNombre');
    const editSegundoNombre = document.getElementById('editSegundoNombre');
    const editPrimerApellido = document.getElementById('editPrimerApellido');
    const editSegundoApellido = document.getElementById('editSegundoApellido');
    const editCodigoAreaSelect = document.querySelector('#modalEditarProfesor .codigo-area-edit'); // Selector actualizado
    const editNumeroTelefonoInput = document.querySelector('#modalEditarProfesor .numero-telefono-edit'); // Selector actualizado
    const editDireccion = document.getElementById('editDireccion');
    const editPeriodoAcademico = document.getElementById('editPeriodoAcademico'); 
    const editCurso = document.getElementById('editCurso');
    const editMaterias = document.getElementById('editMaterias');
    const editSeccion = document.getElementById('editSeccion');
    const btnGuardarEdicion = document.getElementById('btnGuardarEdicion');

    // Elementos del NUEVO Modal Agregar Profesor
    const modalAgregarProfesor = new bootstrap.Modal(document.getElementById('modalAgregarProfesor'));
    const formAgregarProfesor = document.getElementById('formAgregarProfesor');
    const addCedula = document.getElementById('addCedula');
    const addPrimerNombre = document.getElementById('addPrimerNombre');
    const addSegundoNombre = document.getElementById('addSegundoNombre');
    const addPrimerApellido = document.getElementById('addPrimerApellido');
    const addSegundoApellido = document.getElementById('addSegundoApellido');
    const addCodigoArea = document.getElementById('addCodigoArea');
    const addNumeroTelefono = document.getElementById('addNumeroTelefono');
    const addDireccion = document.getElementById('addDireccion');
    const addEstado = document.getElementById('addEstado');
    const addCiudad = document.getElementById('addCiudad');
    const addPeriodoAcademico = document.getElementById('addPeriodoAcademico'); 
    const addCurso = document.getElementById('addCurso'); 
    const addMateria = document.getElementById('addMateria'); 
    const addSeccion = document.getElementById('addSeccion'); 
    const addEmail = document.getElementById('addEmail');
    const addPassword = document.getElementById('addPassword');
    const addConfirmPassword = document.getElementById('addConfirmPassword');
    const addPasswordStrength = document.getElementById('addPasswordStrength');
    const btnGuardarNuevoProfesor = document.getElementById('btnGuardarNuevoProfesor');


    // Cargar datos al abrir el modal de Editar Profesores
    modalEditarProfesor._element.addEventListener('shown.bs.modal', async function() {
      console.log("DEBUG: Modal de edición de profesor abierto. Cargando dropdowns...");
      // Estos dropdowns no son necesarios para editar profesor, solo se muestran los datos
      // y no se permite cambiar su asignación académica directamente desde aquí,
      // a menos que esa sea la intención y se añadan los campos al formulario.
      // Si se necesitan, se cargarían aquí:
      // await cargarPeriodos('edit'); 
      // await cargarCursos('edit'); 
      // await cargarSecciones('edit'); 
    });

    // Cargar datos al abrir el NUEVO modal de Agregar Profesor
    modalAgregarProfesor._element.addEventListener('shown.bs.modal', async function() {
        formAgregarProfesor.reset(); // Limpiar el formulario al abrir
        limpiarTodosLosErrores(formAgregarProfesor);
        addCiudad.innerHTML = '<option value="" selected disabled>Primero seleccione un estado</option>';
        addCiudad.disabled = true;
        addCurso.innerHTML = '<option value="" selected disabled>Primero seleccione un periodo</option>';
        addCurso.disabled = true;
        addMateria.innerHTML = '<option value="" selected disabled>Primero seleccione un curso</option>';
        addMateria.disabled = true;
        addSeccion.innerHTML = '<option value="" selected disabled>Primero seleccione una materia</option>';
        addSeccion.disabled = true;
        addPasswordStrength.textContent = ''; // Limpiar mensaje de fortaleza de contraseña
        
        await loadAcademicPeriods(); // Cargar periodos para el modal de agregar
        await cargarEstados('add'); // Cargar estados para el modal de agregar
    });


    // Función para cargar periodos académicos (adaptada para ambos modales)
    async function cargarPeriodos(prefix = '') {
        const targetSelect = prefix === 'edit' ? editPeriodoAcademico : addPeriodoAcademico;
        if (!targetSelect) return;

        try {
            const response = await fetch('http://localhost:3001/api/periodos');
            if (!response.ok) throw new Error('Error al cargar períodos');
            const periodos = await response.json();

            // Guardar el valor actual antes de limpiar (solo relevante para edición)
            const currentValue = targetSelect.value;

            // Limpiar y reconstruir opciones
            targetSelect.innerHTML = '';
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = `Seleccione un periodo`;
            defaultOption.disabled = true;
            defaultOption.selected = true;
            targetSelect.appendChild(defaultOption);

            periodos.forEach(periodo => {
                const option = document.createElement('option');
                option.value = periodo.id_periodo;
                option.textContent = periodo.nombre_periodo; 
                targetSelect.appendChild(option);
            });

            // Restaurar el valor si existe (solo relevante para edición)
            if (prefix === 'edit' && currentValue && periodos.some(p => p.id_periodo.toString() === currentValue)) {
                targetSelect.value = currentValue;
            }
        } catch (error) {
            console.error('Error:', error);
            targetSelect.innerHTML = '<option value="">Error cargando períodos</option>';
            mostrarErrorAlUsuario("Error al cargar períodos. Intente recargar la página.");
        }
    }

    // Función para cargar estados (adaptada para ambos modales)
    async function cargarEstados(prefix = '') {
        const targetSelect = prefix === 'edit' ? null : addEstado; // Solo para el modal de agregar
        if (!targetSelect) return;

        targetSelect.disabled = true;
        targetSelect.innerHTML = '<option value="" selected disabled>Cargando estados...</option>';

        try {
            const response = await fetch("http://localhost:3001/api/estados");
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const estados = await response.json();

            targetSelect.innerHTML = '<option value="" selected disabled>Seleccione un estado</option>';
            estados.forEach((estado) => {
                const option = document.createElement("option");
                option.value = estado.id_estado;
                option.textContent = estado.estados;
                targetSelect.appendChild(option);
            });

            targetSelect.disabled = false;
        } catch (error) {
            console.error("Error cargando estados:", error);
            targetSelect.innerHTML = '<option value="" selected disabled>Error al cargar estados</option>';
            mostrarErrorAlUsuario("Error al cargar estados. Intente recargar la página.");
        }
    }

    // Event listener para el select de Estado en el modal de agregar
    addEstado.addEventListener("change", async function () {
        const estadoId = this.value;
        addCiudad.innerHTML = '<option value="" selected disabled>Cargando ciudades...</option>';
        addCiudad.disabled = true;

        if (!estadoId) return;

        try {
            const response = await fetch(`http://localhost:3001/api/estados/${estadoId}/ciudades`);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const ciudades = await response.json();

            addCiudad.innerHTML = '<option value="" selected disabled>Seleccione una ciudad</option>';
            ciudades.forEach((ciudad) => {
                const option = document.createElement("option");
                option.value = ciudad.id_ciudad;
                option.textContent = ciudad.ciudad;
                addCiudad.appendChild(option);
            });

            addCiudad.disabled = false;
        } catch (error) {
            console.error("Error cargando ciudades:", error);
            addCiudad.innerHTML = '<option value="" selected disabled>Error al cargar ciudades</option>';
            mostrarErrorAlUsuario("Error al cargar ciudades. Intente nuevamente.");
        }
    });

    // --- Funciones para cargar Períodos, Cursos, Materias y Secciones (Lógica en cascada) ---
    const API_BASE_URL = 'http://localhost:3001/api';

    let selectedPeriodId = null;
    let selectedCourseId = null;
    let selectedMateriaPeriodoId = null; 
    let selectedSectionId = null;

    // Función para limpiar y deshabilitar un select
    function clearAndDisableSelect(selectElement, defaultOptionText) {
      selectElement.innerHTML = `<option value="">${defaultOptionText}</option>`;
      selectElement.disabled = true;
    }

    // --- 1. Cargar Períodos Académicos al inicio ---
    async function loadAcademicPeriods() {
      try {
        const response = await fetch(`${API_BASE_URL}/periodos`);
        if (!response.ok) throw new Error('Error al cargar períodos.');
        const periods = await response.json();

        clearAndDisableSelect(addPeriodoAcademico, 'Selecciona un período');
        periods.forEach(period => {
          const option = document.createElement('option');
          option.value = period.id_periodo;
          option.textContent = period.nombre_periodo; 
          addPeriodoAcademico.appendChild(option);
        });
        addPeriodoAcademico.disabled = false;
      } catch (error) {
        console.error('Error al cargar períodos académicos:', error);
        mostrarErrorAlUsuario("Error al cargar períodos académicos. Intente recargar la página.");
      }
    }

    // --- 2. Cargar Cursos basados en el Período seleccionado ---
    async function loadCoursesByPeriod(periodId) {
      clearAndDisableSelect(addCurso, 'Selecciona un curso');
      clearAndDisableSelect(addMateria, 'Selecciona una materia');
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!periodId) return;

      try {
        const response = await fetch(`${API_BASE_URL}/periodos/${periodId}/cursos`); 
        if (!response.ok) throw new Error('Error al cargar cursos.');
        const courses = await response.json();

        courses.forEach(course => {
          const option = document.createElement('option');
          option.value = course.id_curso;
          option.textContent = course.nombre_curso; 
          addCurso.appendChild(option);
        });
        addCurso.disabled = false;
      } catch (error) {
        console.error('Error al cargar cursos:', error);
        mostrarErrorAlUsuario("Error al cargar cursos. Intente nuevamente.");
      }
    }

    // --- 3. Cargar Materias basadas en el Período y Curso seleccionados ---
    async function loadSubjectsByPeriodAndCourse(periodId, courseId) {
      clearAndDisableSelect(addMateria, 'Selecciona una materia');
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!periodId || !courseId) return;

      try {
        const response = await fetch(`${API_BASE_URL}/materias/filter?periodoId=${periodId}&cursoId=${courseId}`);
        if (!response.ok) throw new Error('Error al cargar materias.');
        const subjects = await response.json();

        subjects.forEach(subject => {
          const option = document.createElement('option');
          option.value = subject.id_materia_periodo; 
          option.textContent = subject.nombre_materia; 
          addMateria.appendChild(option);
        });
        addMateria.disabled = false;
      }
      catch (error) {
        console.error('Error al cargar materias:', error);
        mostrarErrorAlUsuario("Error al cargar materias. Intente nuevamente.");
      }
    }

    // --- 4. Cargar Secciones basadas en la Materia seleccionada ---
    async function loadSectionsBySubject(materiaId) {
      clearAndDisableSelect(addSeccion, 'Selecciona una sección');

      if (!materiaId) return;

      try {
        const response = await fetch(`${API_BASE_URL}/materias/${materiaId}/secciones`);
        if (!response.ok) throw new Error('Error al cargar secciones.');
        const sections = await response.json();

        sections.forEach(section => {
          const option = document.createElement('option');
          option.value = section.id_seccion;
          option.textContent = section.nombre_seccion; 
          addSeccion.appendChild(option);
        });
        addSeccion.disabled = false;
      } catch (error) {
        console.error('Error al cargar secciones:', error);
        mostrarErrorAlUsuario("Error al cargar secciones. Intente nuevamente.");
      }
    }


    // Event listener para el select de Periodo Académico en el modal de agregar
    addPeriodoAcademico.addEventListener("change", () => {
        selectedPeriodId = addPeriodoAcademico.value;
        selectedCourseId = null;
        selectedMateriaPeriodoId = null;
        selectedSectionId = null;
        loadCoursesByPeriod(selectedPeriodId);
    });

    // Event listener para el select de Curso en el modal de agregar
    addCurso.addEventListener("change", () => {
        selectedCourseId = addCurso.value;
        selectedMateriaPeriodoId = null;
        selectedSectionId = null;
        loadSubjectsByPeriodAndCourse(selectedPeriodId, selectedCourseId);
    });

    // Event listener para el select de Materia en el modal de agregar
    addMateria.addEventListener("change", () => {
        selectedMateriaPeriodoId = addMateria.value; 
        selectedSectionId = null;
        loadSectionsBySubject(selectedMateriaPeriodoId); 
    });

    // Event listener para el select de Sección en el modal de agregar
    addSeccion.addEventListener("change", () => {
        selectedSectionId = addSeccion.value;
        console.log('ID de Sección seleccionado:', selectedSectionId);
    });


    // Validar número de teléfono para edición
    editNumeroTelefonoInput.addEventListener('input', function() {
      this.value = this.value.replace(/\D/g, '').slice(0, 7);
      if (this.value.length !== 7) {
        mostrarError(this, 'Debe contener 7 dígitos');
      } else {
        limpiarError(this);
      }
    });

    // Validar número de teléfono para agregar
    addNumeroTelefono.addEventListener('input', function() {
        this.value = this.value.replace(/\D/g, '').slice(0, 7);
        if (this.value.length !== 7) {
            mostrarError(this, 'Debe contener 7 dígitos.');
        } else {
            limpiarError(this);
        }
    });


    // Validación de nombres y apellidos: no aceptar números y no permitir campos vacíos
    function validateTextOnly(inputElement, fieldName) {
        const value = inputElement.value;
        const regex = /^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/;
        
        if (!regex.test(value)) {
            inputElement.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, "");
            mostrarError(inputElement, `El campo ${fieldName} solo permite letras y espacios.`);
            return false;
        } else if (inputElement.hasAttribute("required") && value.trim() === "") {
            mostrarError(inputElement, `El campo ${fieldName} es obligatorio.`);
            return false;
        } else {
            limpiarError(inputElement);
            return true;
        }
    }

    // Aplicar validación de solo letras a los campos de nombres y apellidos en ambos modales
    [editPrimerNombre, editSegundoNombre, editPrimerApellido, editSegundoApellido,
     addPrimerNombre, addSegundoNombre, addPrimerApellido, addSegundoApellido].forEach(input => {
      if (input) {
        input.addEventListener('input', function() {
          validateTextOnly(this, this.placeholder || this.labels[0].textContent.replace('*', '').trim());
        });
      }
    });

    // Toggle Password Visibility (para ambos modales)
    document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", function () {
            const targetId = this.dataset.target;
            const passwordInput = document.getElementById(targetId);
            const icon = this.querySelector("i");

            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                icon.classList.remove("bx-hide");
                icon.classList.add("bx-show");
            } else {
                passwordInput.type = "password";
                icon.classList.remove("bx-show");
                icon.classList.add("bx-hide");
            }
        });
    });

    // Password Strength Validation (para el modal de agregar)
    if (addPassword) { 
      addPassword.addEventListener("input", function () {
          const password = this.value;
          let strength = 0;
          let feedback = [];

          const { feedback: passwordErrorElement, strength: strengthFeedbackElement } = getFeedbackElements(this);

          if (password.length >= 8) { strength += 1; } else { feedback.push("Al menos 8 caracteres."); }
          if (/[A-Z]/.test(password)) { strength += 1; } else { feedback.push("Una letra mayúscula."); }
          if (/[a-z]/.test(password)) { strength += 1; } else { feedback.push("Una letra minúscula."); }
          if (/[0-9]/.test(password)) { strength += 1; } else { feedback.push("Un número."); }
          if (/[^A-Za-z0-9]/.test(password)) { strength += 1; } else { feedback.push("Un caracter especial."); }

          if (password.length === 0) {
              if (strengthFeedbackElement) strengthFeedbackElement.textContent = "";
              limpiarError(this); 
              return;
          }

          let strengthText = "";
          let color = "";

          if (strength === 5) {
              strengthText = "¡Excelente!";
              color = "green";
              limpiarError(this); 
          } else if (strength >= 3) {
              strengthText = "Buena";
              color = "orange";
              limpiarError(this); 
          } else {
              strengthText = "Débil";
              color = "red";
              mostrarError(
                  this,
                  "Contraseña débil: " + feedback.join(", ")
              );
          }
          if (strengthFeedbackElement) {
            strengthFeedbackElement.textContent = `Fortaleza: ${strengthText}`;
            strengthFeedbackElement.style.color = color;
          }
      });
    }


    // Validar coincidencia de contraseñas (para el modal de agregar)
    if (addConfirmPassword && addPassword) { 
      addConfirmPassword.addEventListener("input", function () {
          if (addPassword.value !== addConfirmPassword.value) {
              mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
          } else {
              limpiarError(addConfirmPassword);
          }
      });
      addPassword.addEventListener("input", function () {
          if (addConfirmPassword.value !== "") { 
              if (addPassword.value !== addConfirmPassword.value) {
                  mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
              } else {
                  limpiarError(addConfirmPassword);
              }
          }
      });
    }

    // Validación de unicidad de correo electrónico (Frontend con llamada a la API del Backend) para agregar
    addEmail.addEventListener("blur", async function () {
        const email = this.value.trim();
        if (!email) {
            mostrarError(addEmail, "El correo electrónico es obligatorio.");
            return;
        }

        try {
            const response = await fetch(`http://localhost:3001/api/verificar-correo?email=${encodeURIComponent(email)}`);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const data = await response.json();

            if (data.existe) {
                mostrarError(addEmail, "Este correo electrónico ya está registrado.");
            } else {
                limpiarError(addEmail);
            }
        } catch (error) {
            console.error("Error al verificar el correo electrónico:", error);
            mostrarError(addEmail, "Error al verificar el correo electrónico. Intente de nuevo.");
        }
    });

    // Validación de unicidad de cédula (Frontend con llamada a la API del Backend) para agregar
    addCedula.addEventListener("input", function () {
        this.value = this.value.replace(/\D/g, "").slice(0, 15);
        const cedula = this.value.trim();
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(cedula)) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
        } else {
            limpiarError(addCedula);
        }
    });

    addCedula.addEventListener("blur", async function () {
        const cedula = this.value.trim();
        if (!cedula) {
            mostrarError(addCedula, "La cédula es obligatoria.");
            return;
        }
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(cedula)) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
            return;
        }

        try {
            const response = await fetch(`http://localhost:3001/api/verificar-cedula?cedula=${encodeURIComponent(cedula)}`);
            if (!response.ok) {
                const errorData = await response.json();
                if (response.status === 409 && errorData.existe) {
                    mostrarError(addCedula, "Esta cédula ya está registrada en el sistema.");
                    return;
                }
                throw new Error(`Error HTTP: ${response.status} - ${errorData.message || "Error desconocido"}`);
            }

            const data = await response.json();
            if (data.existe) {
                mostrarError(addCedula, "Esta cédula ya está registrada en el sistema.");
            } else {
                limpiarError(addCedula);
            }
        } catch (error) {
            console.error("Error verificando cédula:", error);
            mostrarError(addCedula, error.message || "Error al verificar la cédula.");
        }
    });


    // Manejar envío del formulario de Edición de Profesor
    formEditarProfesor.addEventListener('submit', async function(e) {
      e.preventDefault();
      console.log("DEBUG: Formulario de edición de profesor enviado.");

      // Validar que los campos no estén vacíos y no contengan números
      const campos = [editPrimerNombre, editSegundoNombre, editPrimerApellido, editSegundoApellido];
      let hayError = false;
      campos.forEach(input => {
        if (!validateTextOnly(input, input.labels[0].textContent.replace('*', '').trim())) {
            hayError = true;
        }
      });
      if (hayError) {
        mostrarErrorAlUsuario('Los nombres y apellidos no pueden estar vacíos ni contener números.');
        return;
      }

      const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de guardar los cambios para este profesor?`
        );
      if (!confirmResult) {
        console.log("DEBUG: Edición de profesor cancelada por el usuario.");
        return;
      }

      const id_usuario = editIdUsuario.value;
      const telefonoCompleto = `${editCodigoAreaSelect.value}-${editNumeroTelefonoInput.value}`;
      if (editNumeroTelefonoInput.value.trim() !== '' && !/^\d{7}$/.test(editNumeroTelefonoInput.value)) {
        mostrarError(editNumeroTelefonoInput, 'El teléfono debe tener 7 dígitos');
        return;
      }
      
      btnGuardarEdicion.disabled = true;
      btnGuardarEdicion.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Guardando...
      `;
      console.log("DEBUG: Botón de guardar deshabilitado y spinner activado.");

      try {
        const formData = {
          cedula: editCedula.value.trim(), 
          correo: editCorreo.value.trim(),
          primerNombre: document.getElementById('editPrimerNombre').value.trim(),
          segundoNombre: document.getElementById('editSegundoNombre').value.trim(),
          primerApellido: document.getElementById('editPrimerApellido').value.trim(),
          segundoApellido: document.getElementById('editSegundoApellido').value.trim(),
          telefono: telefonoCompleto,
          direccion: editDireccion.value.trim(), 
        };

        console.log("DEBUG: Datos a enviar (frontend - edición):", formData); 

        const response = await fetch(`http://localhost:3001/api/profesores/${id_usuario}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (!response.ok) {
          // Si la respuesta tiene el mensaje de éxito, igual muestra éxito
          if (data && data.message && data.message.includes('actualizado')) {
            mostrarMensajeExito(data.message);
            setTimeout(() => {
              modalEditarProfesor.hide();
              loadProfesores(currentPage, searchProfesorInput.value.trim()); // Pasar searchTerm
            }, 1500);
            return;
          }
          throw new Error(data.detalle || data.error || 'Error al actualizar el profesor');
        }

        mostrarMensajeExito('Profesor actualizado correctamente');
        
        setTimeout(() => {
          modalEditarProfesor.hide();
          loadProfesores(currentPage, searchProfesorInput.value.trim()); // Pasar searchTerm
        }, 1500);

      } catch (error) {
        console.error('❌ Error en la actualización del profesor:', error);
        mostrarErrorAlUsuario(error.message);
      } finally {
        btnGuardarEdicion.disabled = false;
        btnGuardarEdicion.textContent = 'Guardar Cambios';
        console.log("DEBUG: Proceso de edición finalizado.");
      }
    });

    // Manejar envío del formulario de AGREGAR Nuevo Profesor (NUEVO)
    formAgregarProfesor.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validar campos obligatorios y reglas de contraseña
        const camposRequeridos = [
            { input: addCedula, nombre: "Cédula" },
            { input: addPrimerNombre, nombre: "Primer Nombre" },
            { input: addPrimerApellido, nombre: "Primer Apellido" },
            { input: addEmail, nombre: "Correo Electrónico" },
            { input: addDireccion, nombre: "Dirección" },
            { input: addPassword, nombre: "Contraseña" },
            { input: addConfirmPassword, nombre: "Confirmar contraseña" },
            { input: addNumeroTelefono, nombre: "Teléfono" },
            { input: addEstado, nombre: "Estado" },
            { input: addCiudad, nombre: "Ciudad" },
            { input: addPeriodoAcademico, nombre: "Periodo Académico" },
            { input: addCurso, nombre: "Curso" },
            { input: addMateria, nombre: "Materia" },
            { input: addSeccion, nombre: "Sección" },
        ];

        let formularioValido = true;

        camposRequeridos.forEach((campo) => {
            // Para selects, verificar que el valor no sea vacío y no sea el disabled por defecto
            if (campo.input.tagName === "SELECT") {
                if (!campo.input.value || campo.input.value === "") {
                    mostrarError(campo.input, `El campo ${campo.nombre} es obligatorio.`);
                    formularioValido = false;
                } else {
                    limpiarError(campo.input);
                }
            } else { // Para inputs de texto, etc.
                if (!campo.input.value.trim()) {
                    mostrarError(campo.input, `El campo ${campo.nombre} es obligatorio.`);
                    formularioValido = false;
                } else {
                    limpiarError(campo.input);
                }
            }
        });

        // Revalidaciones adicionales
        const cedulaRegex = /^\d{6,15}$/;
        if (!cedulaRegex.test(addCedula.value.trim())) {
            mostrarError(addCedula, "Formato de cédula inválido (6-15 dígitos numéricos).");
            formularioValido = false;
        }

        if (addPassword.value !== addConfirmPassword.value) {
            mostrarError(addConfirmPassword, "Las contraseñas no coinciden.");
            formularioValido = false;
        }
        // Asegurarse de que la validación de fortaleza de contraseña se ejecute y afecte formularioValido
        addPassword.dispatchEvent(new Event("input")); 
        const { feedback: passwordErrorFeedback } = getFeedbackElements(addPassword);
        if (passwordErrorFeedback && passwordErrorFeedback.style.display !== 'none' && passwordErrorFeedback.textContent.trim() !== '') {
            formularioValido = false;
        }


        if (addNumeroTelefono.value.length !== 7) {
            mostrarError(addNumeroTelefono, "El teléfono debe contener 7 dígitos.");
            formularioValido = false;
        }
        
        // Revalidar campos de nombre/apellido
        if (!validateTextOnly(addPrimerNombre, "Primer Nombre")) formularioValido = false;
        if (!validateTextOnly(addSegundoNombre, "Segundo Nombre")) formularioValido = false;
        if (!validateTextOnly(addPrimerApellido, "Primer Apellido")) formularioValido = false;
        if (!validateTextOnly(addSegundoApellido, "Segundo Apellido")) formularioValido = false;

        // Forzar revalidación de email y cédula
        addEmail.dispatchEvent(new Event("blur"));
        addCedula.dispatchEvent(new Event("blur"));

        // Si hay algún error visible, el formulario no es válido
        if (formAgregarProfesor.querySelector(".is-invalid")) {
            formularioValido = false;
        }

        if (!formularioValido) {
            mostrarErrorAlUsuario("Por favor, complete todos los campos obligatorios y corrija los errores.");
            return;
        }

        // Mostrar loading en el botón
        btnGuardarNuevoProfesor.disabled = true;
        btnGuardarNuevoProfesor.innerHTML = `
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Agregando...
        `;

        try {
            const formData = {
                cedula: addCedula.value.trim(),
                primerNombre: addPrimerNombre.value.trim(),
                segundoNombre: addSegundoNombre.value.trim(),
                primerApellido: addPrimerApellido.value.trim(),
                segundoApellido: addSegundoApellido.value.trim(),
                correo: addEmail.value.trim(),
                telefono: `${addCodigoArea.value}-${addNumeroTelefono.value}`,
                direccion: addDireccion.value.trim(),
                id_estado: addEstado.value,
                id_ciudad: addCiudad.value,
                contraseña: addPassword.value.trim(),
                periodos: [addPeriodoAcademico.value], 
                cursos: [addCurso.value], 
                materias: [addMateria.value], 
                secciones: [addSeccion.value], 
            };

            const response = await fetch(`http://localhost:3001/api/profesores/register`, { // Endpoint para agregar profesores
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al agregar el profesor.');
            }

            mostrarMensajeExito('Profesor agregado exitosamente.');
            
            // Oculta el modal inmediatamente
            modalAgregarProfesor.hide();

            // Usar un setTimeout para dar tiempo a Bootstrap para que inicie su animación de cierre
            // y luego forzar la eliminación del backdrop y la clase modal-open
            setTimeout(() => {
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) {
                    modalBackdrop.remove();
                    console.log('Forced removal of modal-backdrop.');
                }
                if (document.body.classList.contains('modal-open')) {
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = ''; // Restaura el scroll del body
                    console.log('Forced removal of modal-open class and overflow reset.');
                }
                // Recargar la página después de que el modal esté completamente cerrado
                window.location.reload(); 
            }, 500); 

            // Opcional: Mantener el listener 'hidden.bs.modal' como redundancia,
            // aunque el setTimeout debería ser más efectivo si hay problemas de timing.
            // Asegurarse de que no se añadan múltiples listeners.
            const modalElement = modalAgregarProfesor._element;
            const existingHandler = modalElement.__backdrop_cleanup_handler;
            if (existingHandler) {
                modalElement.removeEventListener('hidden.bs.modal', existingHandler);
            }
            const newHandler = function() {
                const modalBackdrop = document.querySelector('.modal-backdrop');
                if (modalBackdrop) {
                    modalBackdrop.remove();
                    console.log('Fallback: Removed modal-backdrop via hidden.bs.modal event.');
                }
                if (document.body.classList.contains('modal-open')) {
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    console.log('Fallback: Removed modal-open via hidden.bs.modal event.');
                }
                modalElement.removeEventListener('hidden.bs.modal', newHandler); // Remove self
                modalElement.__backdrop_cleanup_handler = null; // Clear reference
            };
            modalElement.addEventListener('hidden.bs.modal', newHandler);
            modalElement.__backdrop_cleanup_handler = newHandler; // Store reference

        } catch (error) {
            console.error('Error al agregar profesor:', error);
            mostrarErrorAlUsuario(error.message);
        } finally {
            btnGuardarNuevoProfesor.disabled = false;
            btnGuardarNuevoProfesor.textContent = 'Agregar Profesor';
        }
    });


    // Función para inicializar los dropdowns de Bootstrap después de cargar la tabla
    function initializeDropdowns() {
      console.log('DEBUG: initializeDropdowns called.');
      if (typeof window.bootstrap !== 'undefined' && typeof window.bootstrap.Dropdown !== 'undefined') {
        const dropdownToggles = profesoresTableBody.querySelectorAll('.dropdown-toggle');
        console.log('DEBUG: Attempting to initialize', dropdownToggles.length, 'Bootstrap Dropdowns...');
        dropdownToggles.forEach(button => {
          // Destruir instancias existentes para evitar duplicados si la tabla se recarga
          const existingDropdown = bootstrap.Dropdown.getInstance(button);
          if (existingDropdown) {
            existingDropdown.dispose();
            console.log(`DEBUG: Disposed existing dropdown for #${button.id}`);
          }
          // Crear nueva instancia de Dropdown con popperConfig para evitar ser cortado
          new bootstrap.Dropdown(button, {
            popperConfig: function (defaultBsPopperConfig) {
              return {
                ...defaultBsPopperConfig,
                placement: 'bottom-end', 
                strategy: 'fixed', 
                modifiers: [
                  ...(defaultBsPopperConfig.modifiers || []),
                  {
                    name: 'offset',
                    options: {
                      offset: [0, 8] 
                    }
                  },
                ],
              };
            }
          });
          console.log(`DEBUG: Initialized new dropdown for #${button.id}`);
        });
        if (dropdownToggles.length === 0) {
            console.log('DEBUG: No dropdown toggles found to initialize.');
        } else {
            console.log(`✅ DEBUG: Finished initializing ${dropdownToggles.length} Bootstrap Dropdowns.`);
        }
      } else {
        console.warn('⚠️ WARN: bootstrap.Dropdown no está disponible. Esto es crucial para que los dropdowns funcionen. Asegúrese de que el JavaScript de Bootstrap esté cargado antes de este script.');
      }
    }

    // Función principal para cargar profesores en la tabla y actualizar contadores
    async function loadProfesores(page, searchTerm = '') { // Añadido searchTerm como parámetro
      console.log(`DEBUG: loadProfesores called for page ${page} with search term "${searchTerm}".`);
      profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center">Cargando profesores...</td></tr>`;
      paginationControls.innerHTML = ''; 
      TotalProfesores.textContent = '...';
      ProfesoresActivos.textContent = '...';
      ProfesoresInactivos.textContent = '...';

      try {
        let url = `http://localhost:3001/api/profesores?page=${page}&limit=${itemsPerPage}`;
        if (searchTerm) { // Añadir término de búsqueda a la URL si existe
          url += `&search=${encodeURIComponent(searchTerm)}`;
        }
        console.log(`DEBUG: Solicitando profesores para la página ${page} a ${url}`);
        const response = await fetch(url);
        
        if (!response.ok) {
          if (response.status === 404) {
            profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron profesores.</td></tr>`;
            TotalProfesores.textContent = '0';
            ProfesoresActivos.textContent = '0';
            ProfesoresInactivos.textContent = '0';
            console.log("DEBUG: 404 - No se encontraron profesores.");
            return;
          }
          throw new Error(`Error HTTP: ${response.status}`);
        }

        const data = await response.json();
        const profesores = data.profesores;
        const totalPages = data.totalPages;
        currentPage = data.currentPage;

        console.log("DEBUG: Datos de profesores recibidos del backend:", data);

        // Actualizar contadores
        TotalProfesores.textContent = data.totalCount || '0';
        ProfesoresActivos.textContent = data.activeCount || '0';
        ProfesoresInactivos.textContent = data.inactiveCount || '0'; 

        profesoresTableBody.innerHTML = ''; // Limpiar las filas existentes

        if (profesores.length === 0) {
          profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron profesores que coincidan con "${searchTerm}".</td></tr>`; // Mensaje con término de búsqueda
          console.log("DEBUG: Array de profesores vacío después de fetch.");
          return;
        }

        const processedProfesores = Array.isArray(profesores) ? profesores.map(profesor => ({
          ...profesor,
          periodoAcademicoNames: (typeof profesor.periodoAcademicoNames === 'string' && profesor.periodoAcademicoNames && profesor.periodoAcademicoNames !== 'N/A') 
                                ? profesor.periodoAcademicoNames.split(',').map(s => s.trim()).filter(Boolean) 
                                : ['N/A'],
          periodoAcademicoIds: (typeof profesor.periodoAcademicoIds === 'string' && profesor.periodoAcademicoIds) ? profesor.periodoAcademicoIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          cursosNames: (typeof profesor.cursosNames === 'string' && profesor.cursosNames) ? profesor.cursosNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          cursosIds: (typeof profesor.cursosIds === 'string' && profesor.cursosIds) ? profesor.cursosIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          materiasNames: (typeof profesor.materiasNames === 'string' && profesor.materiasNames) ? profesor.materiasNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          materiasIds: (typeof profesor.materiasIds === 'string' && profesor.materiasIds) ? profesor.materiasIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          seccionNames: (typeof profesor.seccionNames === 'string' && profesor.seccionNames) ? profesor.seccionNames.split(',').map(s => s.trim()).filter(Boolean) : [],
          seccionIds: (typeof profesor.seccionIds === 'string' && profesor.seccionIds) ? profesor.seccionIds.split(',').map(s => s.trim()).filter(Boolean) : [],
          direccion: profesor.direccion || 'N/A' 
        })) : [];
        processedProfesores.forEach((profesor, index) => {
          console.log(`DEBUG: Renderizando profesor ${index + 1}:`, profesor);
          const profesorDataAttribute = JSON.stringify(profesor);

          const profesorStatus = profesor.estado === 1 ? 'Activo' : (profesor.estado === 0 ? 'Inactivo' : 'Desconocido'); 
          const lastConnectionText = profesor.ultima_conexion ? new Date(profesor.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';

          const row = document.createElement('tr');
          row.dataset.id = profesor.id_usuario;
          row.dataset.profesorData = profesorDataAttribute; 


          row.innerHTML = `
            <td>${(currentPage - 1) * itemsPerPage + index + 1}</td>
            <td>${Array.isArray(profesor.periodoAcademicoNames) ? profesor.periodoAcademicoNames.join(', ') : 'N/A'}</td>
            <td>${profesor.cedula || ''}</td>
            <td>${profesor.primer_nombre || ''}</td>
            <td>${profesor.primer_apellido || ''}</td>
            <td>${profesorStatus}</td>
            <td>${lastConnectionText}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton${profesor.id_usuario}" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class='bx bx-dots-vertical-rounded'></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton${profesor.id_usuario}">
                  <li><a class="dropdown-item" href="#" data-action="ver-mas" data-id="${profesor.id_usuario}"><i class='bx bx-info-circle me-2'></i>Ver más información</a></li>
                  <li><a class="dropdown-item" href="#" data-action="editar" data-id="${profesor.id_usuario}"><i class='bx bxs-edit-alt me-2'></i>Editar</a></li>
                  <li><a class="dropdown-item" href="#" data-action="eliminar" data-id="${profesor.id_usuario}"><i class='bx bx-trash me-2'></i>Desactivar Profesor</a></li>
                </ul>
              </div>
            </td>
          `;
          profesoresTableBody.appendChild(row);
        });

        initializeDropdowns();
        setupPagination(totalPages, currentPage, searchTerm); // Pasar searchTerm a la paginación
        setupActionListeners(processedProfesores);
        console.log("DEBUG: Renderizado de profesores completado.");
      } catch (error) {
        console.error('❌ Error al cargar profesores:', error);
        profesoresTableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error al cargar profesores. Intente nuevamente.</td></tr>`;
        TotalProfesores.textContent = '0';
        ProfesoresActivos.textContent = '0';
        ProfesoresInactivos.textContent = '0';
      }
    }

    // Configurar listeners para los botones de acción en cada fila
    function setupActionListeners(profesoresData) {
        console.log("DEBUG: Setting up action listeners for professor table.");
        profesoresTableBody.querySelectorAll('.dropdown-item').forEach(item => {
            item.removeEventListener('click', handleActionClick); // Eliminar listeners anteriores para evitar duplicados
            item.addEventListener('click', handleActionClick);

            function handleActionClick(e) {
                e.preventDefault();
                const action = e.currentTarget.dataset.action;
                const userId = e.currentTarget.dataset.id;
                const profesor = profesoresData.find(p => p.id_usuario.toString() === userId); 

                if (!profesor) {
                    console.error('Error: Profesor no encontrado para ID:', userId);
                    return;
                }
                console.log(`DEBUG: Action "${action}" triggered for professor ID: ${userId}`);
                switch (action) {
                    case 'ver-mas':
                        mostrarDetallesProfesor(profesor);
                        break;
                    case 'editar':
                        editarProfesor(profesor);
                        break;
                    case 'eliminar': 
                        desactivarProfesor(profesor);
                        break;
                    default:
                        console.warn('Acción desconocida:', action);
                }
            }
        });
        console.log("DEBUG: Action listeners setup complete.");
    }

    // Mostrar los detalles del profesor en el modal
    async function mostrarDetallesProfesor(profesor) {
        console.log("DEBUG: Datos del profesor para 'Ver más información':", profesor); 

        const profesorStatusModal = profesor.estado === 1 ? 'Activo' : (profesor.estado === 0 ? 'Inactivo' : 'N/A');

        detalleCedula.textContent = profesor.cedula || 'N/A';
        detalleNombreCompleto.textContent = `${profesor.primer_nombre || ''} ${profesor.segundo_nombre || ''} ${profesor.primer_apellido || ''} ${profesor.segundo_apellido || ''}`.trim() || 'N/A';
        detalleCorreo.textContent = profesor.correo || 'N/A';
        detalleTelefono.textContent = profesor.telefono || 'N/A';
        detalleDireccion.textContent = profesor.direccion || 'N/A'; 
        detalleEstadoProfesor.textContent = profesorStatusModal;
        detalleUltimaConexion.textContent = profesor.ultima_conexion ? new Date(profesor.ultima_conexion).toLocaleDateString() : 'No ha ingresado a la pagina';

        // Tabla académica cruzada
        let tablaAcademica = document.getElementById('tablaAcademicaProfesor');
        if (!tablaAcademica) {
          tablaAcademica = document.createElement('div');
          tablaAcademica.id = 'tablaAcademicaProfesor';
          const parentOfDetails = document.querySelector('#modalVerMasInformacionProfesor .modal-body');
          if(parentOfDetails) {
            parentOfDetails.appendChild(tablaAcademica);
          }
        }
        tablaAcademica.innerHTML = '<div class="text-center text-muted">Cargando información académica detallada...</div>';
        try {
          const resp = await fetch(`http://localhost:3001/api/profesores/${profesor.id_usuario}/academico`);
          if (!resp.ok) throw new Error('Error al obtener información académica cruzada');
          const data = await resp.json();
          if (Array.isArray(data.academico) && data.academico.length > 0) {
            let tabla = `<div class="mt-3"><strong>Detalle Académico:</strong><div class="table-responsive"><table class="table table-bordered table-sm table-dark"><thead><tr><th>Período</th><th>Curso</th><th>Materia</th><th>Sección</th></tr></thead><tbody>`;
            data.academico.forEach(row => {
              tabla += `<tr><td>${row.nombre_periodo || 'N/A'}</td><td>${row.nombre_curso || 'N/A'}</td><td>${row.nombre_materia || 'N/A'}</td><td>${row.nombre_seccion || 'N/A'}</td></tr>`;
            });
            tabla += '</tbody></table></div></div>';
            tablaAcademica.innerHTML = tabla;
          } else {
            tablaAcademica.innerHTML = '<div class="text-center text-muted">No hay información académica cruzada registrada.</div>';
          }
        } catch (err) {
          tablaAcademica.innerHTML = '<div class="text-center text-danger">Error al cargar información académica cruzada.</div>';
        }

        modalVerMasInformacionProfesor.show();
        console.log("DEBUG: Modal 'Ver más información' mostrado.");
    }


    // Función para Editar Profesor
    async function editarProfesor(profesor) {
        console.log("DEBUG: Profesor para editar:", profesor); 

        editIdUsuario.value = profesor.id_usuario;
        editCedula.value = profesor.cedula || '';
        editCorreo.value = profesor.correo || '';
        editPrimerNombre.value = profesor.primer_nombre || '';
        editSegundoNombre.value = profesor.segundo_nombre || '';
        editPrimerApellido.value = profesor.primer_apellido || '';
        editSegundoApellido.value = profesor.segundo_apellido || '';
        editDireccion.value = profesor.direccion || ''; 

        // Separar teléfono en código de área y número
        if (profesor.telefono && typeof profesor.telefono === 'string') {
            const [codigo, numero] = profesor.telefono.split('-');
            editCodigoAreaSelect.value = codigo || '';
            editNumeroTelefonoInput.value = numero || '';
        } else {
            editCodigoAreaSelect.value = '';
            editNumeroTelefonoInput.value = '';
        }
        console.log("DEBUG: Teléfono parseado. Codigo:", editCodigoAreaSelect.value, "Numero:", editNumeroTelefonoInput.value);

        modalEditarProfesor.show();
        console.log("DEBUG: Modal 'Editar Profesor' mostrado.");
    }

    // Función para Desactivar Profesor (Eliminación Lógica)
    async function desactivarProfesor(profesor) {
        const confirmResult = await mostrarConfirmacion(
            `¿Estás seguro de que quieres desactivar al profesor ${profesor.primer_nombre} ${profesor.primer_apellido}? Esto cambiará su estado a "Inactivo".`
        );

        if (!confirmResult) return;

        try {
            console.log(`DEBUG: Desactivando profesor ID: ${profesor.id_usuario}`);
            const response = await fetch(`http://localhost:3001/api/profesores/${profesor.id_usuario}/estado`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ estado: 0 }) 
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Error al desactivar el profesor');
            }

            mostrarMensajeExito(`Profesor ${profesor.primer_nombre} ${profesor.primer_apellido} ha sido desactivado exitosamente.`);
            loadProfesores(currentPage, searchProfesorInput.value.trim()); // Recargar con el término de búsqueda actual
            console.log("DEBUG: Profesor desactivado y tabla recargada.");
        } catch (error) {
            console.error('❌ Error al desactivar profesor:', error);
            mostrarErrorAlUsuario(`Error al desactivar al profesor: ${error.message}`);
        }
    }


    // Función de paginación (generalizada)
    function setupPagination(totalPages, currentPage, searchTerm = '') { // Añadido searchTerm como parámetro
      console.log('DEBUG: setupPagination called. Total pages:', totalPages, 'Current page:', currentPage, 'Search term:', searchTerm);
      paginationControls.innerHTML = '';
      if (totalPages <= 1) return;

      const ul = document.createElement('ul');
      ul.className = 'pagination-list flex justify-center items-center gap-2';

      const prevLi = document.createElement('li');
      prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      const prevLink = document.createElement('a');
      prevLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      prevLink.href = '#';
      prevLink.textContent = 'Anterior';
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage > 1) {
          loadProfesores(currentPage - 1, searchTerm); // Pasar searchTerm
        }
      });
      prevLi.appendChild(prevLink);
      ul.appendChild(prevLi);

      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, currentPage + 2);

      if (startPage > 1) {
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = '1';
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadProfesores(1, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
        if (startPage > 2) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement('li');
        li.className = `page-item ${i === currentPage ? 'active' : ''}`;
        const link = document.createElement('a');
        link.className = `page-link rounded-lg px-3 py-1 ${i === currentPage ? 'bg-purple-800' : 'bg-gray-700'} text-white hover:bg-purple-600`;
        link.href = '#';
        link.textContent = i;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadProfesores(i, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('li');
          ellipsis.className = 'page-item disabled';
          ellipsis.innerHTML = '<span class="page-link rounded-lg px-3 py-1 bg-gray-700 text-white">...</span>';
          ul.appendChild(ellipsis);
        }
        const li = document.createElement('li');
        li.className = 'page-item';
        const link = document.createElement('a');
        link.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
        link.href = '#';
        link.textContent = totalPages;
        link.addEventListener('click', (e) => {
          e.preventDefault();
          loadProfesores(totalPages, searchTerm); // Pasar searchTerm
        });
        li.appendChild(link);
        ul.appendChild(li);
      }

      const nextLi = document.createElement('li');
      nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
      const nextLink = document.createElement('a');
      nextLink.className = 'page-link rounded-lg px-3 py-1 bg-gray-700 text-white hover:bg-purple-600';
      nextLink.href = '#';
      nextLink.textContent = 'Siguiente';
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage < totalPages) {
          loadProfesores(currentPage + 1, searchTerm); // Pasar searchTerm
        }
      });
      nextLi.appendChild(nextLink);
      ul.appendChild(nextLi);

      paginationControls.appendChild(ul);
      console.log("DEBUG: Pagination controls setup complete.");
    }

    loadProfesores(1); // Carga inicial de profesores

    // Event listener para el campo de búsqueda de profesores
    if (searchProfesorInput) {
        searchProfesorInput.addEventListener('input', () => {
            currentPage = 1; // Reiniciar a la primera página en cada búsqueda
            loadProfesores(currentPage, searchProfesorInput.value.trim());
        });
    }


    // Funciones auxiliares
    // Función para obtener los elementos de feedback (invalid-feedback y small)
    function getFeedbackElements(inputElement) {
      // Encuentra el contenedor padre (col-md-6 mb-3) del input o del input-group
      const parentCol = inputElement.closest('.col-md-6.mb-3');
      if (!parentCol) return { feedback: null, strength: null };

      // Busca el .invalid-feedback y el small.form-text dentro de ese contenedor padre
      const invalidFeedback = parentCol.querySelector('.invalid-feedback');
      const strengthFeedback = parentCol.querySelector('small.form-text');
      
      return { feedback: invalidFeedback, strength: strengthFeedback };
    }

    function mostrarError(elemento, mensaje) {
      elemento.classList.add('is-invalid');
      const { feedback } = getFeedbackElements(elemento); 
      if (feedback) {
          feedback.textContent = mensaje;
          feedback.style.display = 'block';
      } else {
          console.warn('No se encontró un elemento de feedback para:', elemento);
      }
      console.log(`DEBUG: Error mostrado para ${elemento.id}: ${mensaje}`);
    }

    function limpiarError(elemento) {
      elemento.classList.remove('is-invalid');
      const { feedback } = getFeedbackElements(elemento); 
      if (feedback) {
          feedback.style.display = 'none';
          feedback.textContent = ''; 
      }
      console.log(`DEBUG: Error limpiado para ${elemento.id}.`);
    }

    function limpiarTodosLosErrores(form) {
        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        form.querySelectorAll('.invalid-feedback').forEach(el => {
            el.textContent = '';
            el.style.display = 'none';
        });
        // También limpiar el feedback de fortaleza de contraseña si existe
        const passwordStrengthEl = form.querySelector('[id$="PasswordStrength"]');
        if (passwordStrengthEl) {
            passwordStrengthEl.textContent = '';
            passwordStrengthEl.style.color = ''; // Reset color
        }
    }


    function mostrarMensajeExito(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-success position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      console.log(`DEBUG: Mensaje de éxito mostrado: ${mensaje}`);
      
      setTimeout(() => {
        alerta.remove();
        console.log("DEBUG: Mensaje de éxito removido.");
      }, 3000);
    }

    function mostrarErrorAlUsuario(mensaje) {
      const alerta = document.createElement('div');
      alerta.className = 'alert alert-danger position-fixed top-0 end-0 m-3';
      alerta.style.zIndex = '1100';
      alerta.textContent = mensaje;
      document.body.appendChild(alerta);
      console.log(`DEBUG: Mensaje de error mostrado al usuario: ${mensaje}`);
      
      setTimeout(() => {
        alerta.remove();
        console.log("DEBUG: Mensaje de error removido.");
      }, 5000);
    }

    // Función para mostrar un modal de confirmación personalizado
    function mostrarConfirmacion(mensaje) {
      console.log("DEBUG: [mostrarConfirmacion] Iniciando...");
      return new Promise((resolve) => {
        if (typeof window.bootstrap === 'undefined' || typeof window.bootstrap.Modal === 'undefined') {
          console.error("ERROR: [mostrarConfirmacion] Bootstrap JS (o Modal) no está disponible. No se puede mostrar el modal de confirmación.");
          mostrarErrorAlUsuario("Un error interno impide mostrar la confirmación. Por favor, recargue la página.");
          resolve(false); 
          return;
        }

        const confirmModalHtml = `
          <div class="modal fade" id="customConfirmModal" tabindex="-1" aria-labelledby="customConfirmModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="customConfirmModalLabel">Confirmación</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                  ${mensaje}
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelActionBtnModal">Cancelar</button>
                  <button type="button" class="btn btn-danger" id="confirmActionBtnModal">Confirmar</button>
                </div>
              </div>
            </div>
          </div>
        `;
        document.body.insertAdjacentHTML('beforeend', confirmModalHtml);
        const confirmModalElement = document.getElementById('customConfirmModal');
        console.log("DEBUG: [mostrarConfirmacion] customConfirmModalElement (después de insertarlo):", confirmModalElement); 
        
        let customConfirmModal;
        try {
            customConfirmModal = new bootstrap.Modal(confirmModalElement);
            console.log("DEBUG: [mostrarConfirmacion] customConfirmModal instancia creada:", customConfirmModal); 
        } catch (e) {
            console.error("ERROR: [mostrarConfirmacion] Fallo al crear instancia de Bootstrap Modal:", e);
            mostrarErrorAlUsuario("Un error al inicializar el modal impide la confirmación. Contacte soporte.");
            resolve(false);
            return;
        }

        let isPromiseResolved = false; // Flag to prevent multiple resolutions

        // Función para resolver la promesa y limpiar
        const cleanupAndResolve = (result) => {
            if (!isPromiseResolved) {
                isPromiseResolved = true;
                console.log(`DEBUG: [mostrarConfirmacion] Promesa resuelta con: ${result}`);
                try {
                    // Solo intentar ocultar el modal si la instancia existe y el modal está visible
                    if (customConfirmModal && confirmModalElement.classList.contains('show')) {
                        customConfirmModal.hide(); 
                        console.log("DEBUG: [mostrarConfirmacion] customConfirmModal.hide() llamado.");
                    }
                } catch (e) {
                    console.error("ERROR: [mostrarConfirmacion] Fallo al ocultar modal durante cleanup:", e);
                }
                // Asegura que el elemento del modal se elimina después de que esté completamente oculto
                confirmModalElement.addEventListener('hidden.bs.modal', () => {
                    console.log("DEBUG: [mostrarConfirmacion] Evento 'hidden.bs.modal' disparado. Removiendo elemento del DOM.");
                    confirmModalElement.remove();
                }, { once: true });
                resolve(result);
            }
        };

        const confirmActionBtn = document.getElementById('confirmActionBtnModal');
        const cancelActionBtn = document.getElementById('cancelActionBtnModal');

        if (confirmActionBtn) {
            confirmActionBtn.addEventListener('click', () => {
                console.log("DEBUG: [mostrarConfirmacion] Botón 'Confirmar' clickeado.");
                cleanupAndResolve(true);
            }, { once: true });
            console.log("DEBUG: [mostrarConfirmacion] Listener para 'Confirmar' añadido.");
        } else {
            console.error("ERROR: [mostrarConfirmacion] Botón 'confirmActionBtnModal' no encontrado.");
            cleanupAndResolve(false); 
        }
        
        if (cancelActionBtn) {
            cancelActionBtn.addEventListener('click', () => {
                console.log("DEBUG: [mostrarConfirmacion] Botón 'Cancelar' clickeado.");
                cleanupAndResolve(false);
            }, { once: true });
            console.log("DEBUG: [mostrarConfirmacion] Listener para 'Cancelar' añadido.");
        } else {
            console.error("ERROR: [mostrarConfirmacion] Botón 'cancelActionBtnModal' no encontrado.");
        }

        confirmModalElement.addEventListener('hidden.bs.modal', () => {
            console.log("DEBUG: [mostrarConfirmacion] Evento 'hidden.bs.modal' disparado (posiblemente por ESC/clic fuera, o hide() programático).");
            cleanupAndResolve(false); 
        }, { once: true }); 

        console.log("DEBUG: [mostrarConfirmacion] Llamando a customConfirmModal.show()...");
        customConfirmModal.show();
      });
    }
  });
</script>
